// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Database;

namespace WebApplication1.Migrations
{
    [DbContext(typeof(MuseumContext))]
    partial class MuseumContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.3.20181.2");

            modelBuilder.Entity("WebApplication1.Datamodel.Administrator", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Museumid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Museumid");

                    b.ToTable("Administrators");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.Artwork", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("author")
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<string>("image")
                        .HasColumnType("TEXT");

                    b.Property<string>("location")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.ArtworkMeasurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtworkId")
                        .HasColumnType("TEXT");

                    b.Property<int>("maxCo2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("maxLight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("maxTemp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("minCo2")
                        .HasColumnType("INTEGER");

                    b.Property<int>("minLight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("minTemp")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("ArtworkId");

                    b.ToTable("ArtworkMeasurements");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.Museum", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Museum");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.Room", b =>
                {
                    b.Property<string>("locationCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Museumid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("currentCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<int>("totalCapacity")
                        .HasColumnType("INTEGER");

                    b.HasKey("locationCode");

                    b.HasIndex("Museumid");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.RoomMeasurement", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Co2")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoomlocationCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoomlocationCode1")
                        .HasColumnType("TEXT");

                    b.Property<int>("humidity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("light")
                        .HasColumnType("INTEGER");

                    b.Property<int>("temp")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("RoomlocationCode");

                    b.HasIndex("RoomlocationCode1");

                    b.ToTable("RoomMeasurement");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.Administrator", b =>
                {
                    b.HasOne("WebApplication1.Datamodel.Museum", null)
                        .WithMany("adminList")
                        .HasForeignKey("Museumid");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.ArtworkMeasurement", b =>
                {
                    b.HasOne("WebApplication1.Datamodel.Artwork", null)
                        .WithMany("artworkMeasurements")
                        .HasForeignKey("ArtworkId");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.Room", b =>
                {
                    b.HasOne("WebApplication1.Datamodel.Museum", null)
                        .WithMany("roomList")
                        .HasForeignKey("Museumid");
                });

            modelBuilder.Entity("WebApplication1.Datamodel.RoomMeasurement", b =>
                {
                    b.HasOne("WebApplication1.Datamodel.Room", null)
                        .WithMany("measurementConditions")
                        .HasForeignKey("RoomlocationCode");

                    b.HasOne("WebApplication1.Datamodel.Room", null)
                        .WithMany("optimalMeasurements")
                        .HasForeignKey("RoomlocationCode1");
                });
#pragma warning restore 612, 618
        }
    }
}
