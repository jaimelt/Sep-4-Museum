
IoTApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000504  00800200  00009798  0000982c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009798  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001292  00800704  00800704  00009d30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000d00  00000000  00000000  00009dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000bf65  00000000  00000000  0000aacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000035b0  00000000  00000000  00016a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007f08  00000000  00000000  00019fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002eec  00000000  00000000  00021eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004f0b  00000000  00000000  00024dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000803a  00000000  00000000  00029ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b60  00000000  00000000  00031d1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	83 c1       	rjmp	.+774    	; 0x308 <__ctors_end>
       2:	00 00       	nop
       4:	a1 c1       	rjmp	.+834    	; 0x348 <__bad_interrupt>
       6:	00 00       	nop
       8:	9f c1       	rjmp	.+830    	; 0x348 <__bad_interrupt>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__bad_interrupt>
       e:	00 00       	nop
      10:	9b c1       	rjmp	.+822    	; 0x348 <__bad_interrupt>
      12:	00 00       	nop
      14:	99 c1       	rjmp	.+818    	; 0x348 <__bad_interrupt>
      16:	00 00       	nop
      18:	97 c1       	rjmp	.+814    	; 0x348 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	95 c1       	rjmp	.+810    	; 0x348 <__bad_interrupt>
      1e:	00 00       	nop
      20:	93 c1       	rjmp	.+806    	; 0x348 <__bad_interrupt>
      22:	00 00       	nop
      24:	91 c1       	rjmp	.+802    	; 0x348 <__bad_interrupt>
      26:	00 00       	nop
      28:	8f c1       	rjmp	.+798    	; 0x348 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	8d c1       	rjmp	.+794    	; 0x348 <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c 94 75 13 	jmp	0x26ea	; 0x26ea <__vector_12>
      34:	89 c1       	rjmp	.+786    	; 0x348 <__bad_interrupt>
      36:	00 00       	nop
      38:	87 c1       	rjmp	.+782    	; 0x348 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	85 c1       	rjmp	.+778    	; 0x348 <__bad_interrupt>
      3e:	00 00       	nop
      40:	83 c1       	rjmp	.+774    	; 0x348 <__bad_interrupt>
      42:	00 00       	nop
      44:	81 c1       	rjmp	.+770    	; 0x348 <__bad_interrupt>
      46:	00 00       	nop
      48:	7f c1       	rjmp	.+766    	; 0x348 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7d c1       	rjmp	.+762    	; 0x348 <__bad_interrupt>
      4e:	00 00       	nop
      50:	7b c1       	rjmp	.+758    	; 0x348 <__bad_interrupt>
      52:	00 00       	nop
      54:	79 c1       	rjmp	.+754    	; 0x348 <__bad_interrupt>
      56:	00 00       	nop
      58:	77 c1       	rjmp	.+750    	; 0x348 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	75 c1       	rjmp	.+746    	; 0x348 <__bad_interrupt>
      5e:	00 00       	nop
      60:	73 c1       	rjmp	.+742    	; 0x348 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8e 3d 	jmp	0x7b1c	; 0x7b1c <__vector_25>
      68:	0c 94 e0 3d 	jmp	0x7bc0	; 0x7bc0 <__vector_26>
      6c:	6d c1       	rjmp	.+730    	; 0x348 <__bad_interrupt>
      6e:	00 00       	nop
      70:	6b c1       	rjmp	.+726    	; 0x348 <__bad_interrupt>
      72:	00 00       	nop
      74:	69 c1       	rjmp	.+722    	; 0x348 <__bad_interrupt>
      76:	00 00       	nop
      78:	67 c1       	rjmp	.+718    	; 0x348 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	65 c1       	rjmp	.+714    	; 0x348 <__bad_interrupt>
      7e:	00 00       	nop
      80:	63 c1       	rjmp	.+710    	; 0x348 <__bad_interrupt>
      82:	00 00       	nop
      84:	61 c1       	rjmp	.+706    	; 0x348 <__bad_interrupt>
      86:	00 00       	nop
      88:	5f c1       	rjmp	.+702    	; 0x348 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5d c1       	rjmp	.+698    	; 0x348 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 24 3e 	jmp	0x7c48	; 0x7c48 <__vector_36>
      94:	0c 94 76 3e 	jmp	0x7cec	; 0x7cec <__vector_37>
      98:	57 c1       	rjmp	.+686    	; 0x348 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 8d 42 	jmp	0x851a	; 0x851a <__vector_39>
      a0:	53 c1       	rjmp	.+678    	; 0x348 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	51 c1       	rjmp	.+674    	; 0x348 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	4f c1       	rjmp	.+670    	; 0x348 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	4d c1       	rjmp	.+666    	; 0x348 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	4b c1       	rjmp	.+662    	; 0x348 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	49 c1       	rjmp	.+658    	; 0x348 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	47 c1       	rjmp	.+654    	; 0x348 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	45 c1       	rjmp	.+650    	; 0x348 <__bad_interrupt>
      be:	00 00       	nop
      c0:	43 c1       	rjmp	.+646    	; 0x348 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	41 c1       	rjmp	.+642    	; 0x348 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	3f c1       	rjmp	.+638    	; 0x348 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ba 3e 	jmp	0x7d74	; 0x7d74 <__vector_51>
      d0:	0c 94 0c 3f 	jmp	0x7e18	; 0x7e18 <__vector_52>
      d4:	39 c1       	rjmp	.+626    	; 0x348 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 50 3f 	jmp	0x7ea0	; 0x7ea0 <__vector_54>
      dc:	0c 94 a2 3f 	jmp	0x7f44	; 0x7f44 <__vector_55>
      e0:	33 c1       	rjmp	.+614    	; 0x348 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5c 30       	cpi	r21, 0x0C	; 12
      e6:	5c 30       	cpi	r21, 0x0C	; 12
      e8:	5c 30       	cpi	r21, 0x0C	; 12
      ea:	bb 30       	cpi	r27, 0x0B	; 11
      ec:	c6 30       	cpi	r28, 0x06	; 6
      ee:	fd 30       	cpi	r31, 0x0D	; 13
      f0:	5c 30       	cpi	r21, 0x0C	; 12
      f2:	5c 30       	cpi	r21, 0x0C	; 12
      f4:	bb 30       	cpi	r27, 0x0B	; 11
      f6:	c6 30       	cpi	r28, 0x06	; 6
      f8:	af 42       	sbci	r26, 0x2F	; 47
      fa:	1f 43       	sbci	r17, 0x3F	; 63
      fc:	1f 43       	sbci	r17, 0x3F	; 63
      fe:	1f 43       	sbci	r17, 0x3F	; 63
     100:	1f 43       	sbci	r17, 0x3F	; 63
     102:	1f 43       	sbci	r17, 0x3F	; 63
     104:	1f 43       	sbci	r17, 0x3F	; 63
     106:	1f 43       	sbci	r17, 0x3F	; 63
     108:	af 42       	sbci	r26, 0x2F	; 47
     10a:	1f 43       	sbci	r17, 0x3F	; 63
     10c:	1f 43       	sbci	r17, 0x3F	; 63
     10e:	1f 43       	sbci	r17, 0x3F	; 63
     110:	1f 43       	sbci	r17, 0x3F	; 63
     112:	1f 43       	sbci	r17, 0x3F	; 63
     114:	1f 43       	sbci	r17, 0x3F	; 63
     116:	1f 43       	sbci	r17, 0x3F	; 63
     118:	b1 42       	sbci	r27, 0x21	; 33
     11a:	1f 43       	sbci	r17, 0x3F	; 63
     11c:	1f 43       	sbci	r17, 0x3F	; 63
     11e:	1f 43       	sbci	r17, 0x3F	; 63
     120:	1f 43       	sbci	r17, 0x3F	; 63
     122:	1f 43       	sbci	r17, 0x3F	; 63
     124:	1f 43       	sbci	r17, 0x3F	; 63
     126:	1f 43       	sbci	r17, 0x3F	; 63
     128:	1f 43       	sbci	r17, 0x3F	; 63
     12a:	1f 43       	sbci	r17, 0x3F	; 63
     12c:	1f 43       	sbci	r17, 0x3F	; 63
     12e:	1f 43       	sbci	r17, 0x3F	; 63
     130:	1f 43       	sbci	r17, 0x3F	; 63
     132:	1f 43       	sbci	r17, 0x3F	; 63
     134:	1f 43       	sbci	r17, 0x3F	; 63
     136:	1f 43       	sbci	r17, 0x3F	; 63
     138:	b1 42       	sbci	r27, 0x21	; 33
     13a:	1f 43       	sbci	r17, 0x3F	; 63
     13c:	1f 43       	sbci	r17, 0x3F	; 63
     13e:	1f 43       	sbci	r17, 0x3F	; 63
     140:	1f 43       	sbci	r17, 0x3F	; 63
     142:	1f 43       	sbci	r17, 0x3F	; 63
     144:	1f 43       	sbci	r17, 0x3F	; 63
     146:	1f 43       	sbci	r17, 0x3F	; 63
     148:	1f 43       	sbci	r17, 0x3F	; 63
     14a:	1f 43       	sbci	r17, 0x3F	; 63
     14c:	1f 43       	sbci	r17, 0x3F	; 63
     14e:	1f 43       	sbci	r17, 0x3F	; 63
     150:	1f 43       	sbci	r17, 0x3F	; 63
     152:	1f 43       	sbci	r17, 0x3F	; 63
     154:	1f 43       	sbci	r17, 0x3F	; 63
     156:	1f 43       	sbci	r17, 0x3F	; 63
     158:	1b 43       	sbci	r17, 0x3B	; 59
     15a:	1f 43       	sbci	r17, 0x3F	; 63
     15c:	1f 43       	sbci	r17, 0x3F	; 63
     15e:	1f 43       	sbci	r17, 0x3F	; 63
     160:	1f 43       	sbci	r17, 0x3F	; 63
     162:	1f 43       	sbci	r17, 0x3F	; 63
     164:	1f 43       	sbci	r17, 0x3F	; 63
     166:	1f 43       	sbci	r17, 0x3F	; 63
     168:	e6 42       	sbci	r30, 0x26	; 38
     16a:	1f 43       	sbci	r17, 0x3F	; 63
     16c:	1f 43       	sbci	r17, 0x3F	; 63
     16e:	1f 43       	sbci	r17, 0x3F	; 63
     170:	1f 43       	sbci	r17, 0x3F	; 63
     172:	1f 43       	sbci	r17, 0x3F	; 63
     174:	1f 43       	sbci	r17, 0x3F	; 63
     176:	1f 43       	sbci	r17, 0x3F	; 63
     178:	1f 43       	sbci	r17, 0x3F	; 63
     17a:	1f 43       	sbci	r17, 0x3F	; 63
     17c:	1f 43       	sbci	r17, 0x3F	; 63
     17e:	1f 43       	sbci	r17, 0x3F	; 63
     180:	1f 43       	sbci	r17, 0x3F	; 63
     182:	1f 43       	sbci	r17, 0x3F	; 63
     184:	1f 43       	sbci	r17, 0x3F	; 63
     186:	1f 43       	sbci	r17, 0x3F	; 63
     188:	da 42       	sbci	r29, 0x2A	; 42
     18a:	1f 43       	sbci	r17, 0x3F	; 63
     18c:	1f 43       	sbci	r17, 0x3F	; 63
     18e:	1f 43       	sbci	r17, 0x3F	; 63
     190:	1f 43       	sbci	r17, 0x3F	; 63
     192:	1f 43       	sbci	r17, 0x3F	; 63
     194:	1f 43       	sbci	r17, 0x3F	; 63
     196:	1f 43       	sbci	r17, 0x3F	; 63
     198:	fe 42       	sbci	r31, 0x2E	; 46

0000019a <__trampolines_end>:
     19a:	6e 61       	ori	r22, 0x1E	; 30
     19c:	6e 00       	.word	0x006e	; ????

0000019e <__c.2332>:
     19e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1ae:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1be:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     1ce:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     1de:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     1ee:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1fe:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     20e:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     21e:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     22e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     23e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     24e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     25e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     26e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     27e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     28e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000029c <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	1f 92       	push	r1
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	9a 83       	std	Y+2, r25	; 0x02
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	0e 94 d4 26 	call	0x4da8	; 0x4da8 <prvCheckTasksWaitingTermination>
     2b0:	80 91 72 17 	lds	r24, 0x1772	; 0x801772 <pxReadyTasksLists>
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	10 f0       	brcs	.+4      	; 0x2bc <prvIdleTask+0x20>
     2b8:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
     2bc:	0e 94 2a 32 	call	0x6454	; 0x6454 <vApplicationIdleHook>
     2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <prvIdleTask+0x10>

000002c2 <prvTimerTask>:
{
Timer_t *pxTimer = xTimer;

    configASSERT( xTimer );
    return pxTimer->pcTimerName;
}
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	27 97       	sbiw	r28, 0x07	; 7
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	9f 83       	std	Y+7, r25	; 0x07
     2d8:	8e 83       	std	Y+6, r24	; 0x06
     2da:	ce 01       	movw	r24, r28
     2dc:	05 96       	adiw	r24, 0x05	; 5
     2de:	0e 94 ee 2e 	call	0x5ddc	; 0x5ddc <prvGetNextExpireTime>
     2e2:	dc 01       	movw	r26, r24
     2e4:	cb 01       	movw	r24, r22
     2e6:	89 83       	std	Y+1, r24	; 0x01
     2e8:	9a 83       	std	Y+2, r25	; 0x02
     2ea:	ab 83       	std	Y+3, r26	; 0x03
     2ec:	bc 83       	std	Y+4, r27	; 0x04
     2ee:	2d 81       	ldd	r18, Y+5	; 0x05
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	9a 81       	ldd	r25, Y+2	; 0x02
     2f4:	ab 81       	ldd	r26, Y+3	; 0x03
     2f6:	bc 81       	ldd	r27, Y+4	; 0x04
     2f8:	42 2f       	mov	r20, r18
     2fa:	bc 01       	movw	r22, r24
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <prvProcessTimerOrBlockTask>
     302:	0e 94 15 30 	call	0x602a	; 0x602a <prvProcessReceivedCommands>
     306:	e9 cf       	rjmp	.-46     	; 0x2da <prvTimerTask+0x18>

00000308 <__ctors_end>:
     308:	11 24       	eor	r1, r1
     30a:	1f be       	out	0x3f, r1	; 63
     30c:	cf ef       	ldi	r28, 0xFF	; 255
     30e:	d1 e2       	ldi	r29, 0x21	; 33
     310:	de bf       	out	0x3e, r29	; 62
     312:	cd bf       	out	0x3d, r28	; 61
     314:	00 e0       	ldi	r16, 0x00	; 0
     316:	0c bf       	out	0x3c, r16	; 60

00000318 <__do_copy_data>:
     318:	17 e0       	ldi	r17, 0x07	; 7
     31a:	a0 e0       	ldi	r26, 0x00	; 0
     31c:	b2 e0       	ldi	r27, 0x02	; 2
     31e:	e8 e9       	ldi	r30, 0x98	; 152
     320:	f7 e9       	ldi	r31, 0x97	; 151
     322:	00 e0       	ldi	r16, 0x00	; 0
     324:	0b bf       	out	0x3b, r16	; 59
     326:	02 c0       	rjmp	.+4      	; 0x32c <__do_copy_data+0x14>
     328:	07 90       	elpm	r0, Z+
     32a:	0d 92       	st	X+, r0
     32c:	a4 30       	cpi	r26, 0x04	; 4
     32e:	b1 07       	cpc	r27, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <__do_copy_data+0x10>

00000332 <__do_clear_bss>:
     332:	29 e1       	ldi	r18, 0x19	; 25
     334:	a4 e0       	ldi	r26, 0x04	; 4
     336:	b7 e0       	ldi	r27, 0x07	; 7
     338:	01 c0       	rjmp	.+2      	; 0x33c <.do_clear_bss_start>

0000033a <.do_clear_bss_loop>:
     33a:	1d 92       	st	X+, r1

0000033c <.do_clear_bss_start>:
     33c:	a6 39       	cpi	r26, 0x96	; 150
     33e:	b2 07       	cpc	r27, r18
     340:	e1 f7       	brne	.-8      	; 0x33a <.do_clear_bss_loop>
     342:	0e d1       	rcall	.+540    	; 0x560 <main>
     344:	0c 94 ca 4b 	jmp	0x9794	; 0x9794 <_exit>

00000348 <__bad_interrupt>:
     348:	5b ce       	rjmp	.-842    	; 0x0 <__vectors>

0000034a <SensorDataPackageHandler_setCo2ppm>:
static float _light = 0;
static float _humidity = 0;
static float _temperature = 0;

void SensorDataPackageHandler_setCo2ppm(uint16_t ppm)
{
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	1f 92       	push	r1
     350:	1f 92       	push	r1
     352:	cd b7       	in	r28, 0x3d	; 61
     354:	de b7       	in	r29, 0x3e	; 62
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	89 83       	std	Y+1, r24	; 0x01
	_co2_ppm = ppm;
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	90 93 05 07 	sts	0x0705, r25	; 0x800705 <__data_end+0x1>
     362:	80 93 04 07 	sts	0x0704, r24	; 0x800704 <__data_end>
}
     366:	00 00       	nop
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <SensorDataPackageHandler_setHumidity>:

void SensorDataPackageHandler_setHumidity(float humidity)
{
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	00 d0       	rcall	.+0      	; 0x378 <SensorDataPackageHandler_setHumidity+0x6>
     378:	1f 92       	push	r1
     37a:	cd b7       	in	r28, 0x3d	; 61
     37c:	de b7       	in	r29, 0x3e	; 62
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
	_humidity = humidity;
     386:	89 81       	ldd	r24, Y+1	; 0x01
     388:	9a 81       	ldd	r25, Y+2	; 0x02
     38a:	ab 81       	ldd	r26, Y+3	; 0x03
     38c:	bc 81       	ldd	r27, Y+4	; 0x04
     38e:	80 93 0a 07 	sts	0x070A, r24	; 0x80070a <_humidity>
     392:	90 93 0b 07 	sts	0x070B, r25	; 0x80070b <_humidity+0x1>
     396:	a0 93 0c 07 	sts	0x070C, r26	; 0x80070c <_humidity+0x2>
     39a:	b0 93 0d 07 	sts	0x070D, r27	; 0x80070d <_humidity+0x3>
}
     39e:	00 00       	nop
     3a0:	0f 90       	pop	r0
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	0f 90       	pop	r0
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	08 95       	ret

000003ae <SensorDataPackageHandler_setTemperature>:

void SensorDataPackageHandler_setTemperature(float temperature)
{
     3ae:	cf 93       	push	r28
     3b0:	df 93       	push	r29
     3b2:	00 d0       	rcall	.+0      	; 0x3b4 <SensorDataPackageHandler_setTemperature+0x6>
     3b4:	1f 92       	push	r1
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
     3ba:	69 83       	std	Y+1, r22	; 0x01
     3bc:	7a 83       	std	Y+2, r23	; 0x02
     3be:	8b 83       	std	Y+3, r24	; 0x03
     3c0:	9c 83       	std	Y+4, r25	; 0x04
	_temperature = temperature;
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	9a 81       	ldd	r25, Y+2	; 0x02
     3c6:	ab 81       	ldd	r26, Y+3	; 0x03
     3c8:	bc 81       	ldd	r27, Y+4	; 0x04
     3ca:	80 93 0e 07 	sts	0x070E, r24	; 0x80070e <_temperature>
     3ce:	90 93 0f 07 	sts	0x070F, r25	; 0x80070f <_temperature+0x1>
     3d2:	a0 93 10 07 	sts	0x0710, r26	; 0x800710 <_temperature+0x2>
     3d6:	b0 93 11 07 	sts	0x0711, r27	; 0x800711 <_temperature+0x3>
}
     3da:	00 00       	nop
     3dc:	0f 90       	pop	r0
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	0f 90       	pop	r0
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret

000003ea <SensorDataPackageHandler_setLight>:

void SensorDataPackageHandler_setLight(float lux)
{
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <SensorDataPackageHandler_setLight+0x6>
     3f0:	1f 92       	push	r1
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	69 83       	std	Y+1, r22	; 0x01
     3f8:	7a 83       	std	Y+2, r23	; 0x02
     3fa:	8b 83       	std	Y+3, r24	; 0x03
     3fc:	9c 83       	std	Y+4, r25	; 0x04
	_light = lux;
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	ab 81       	ldd	r26, Y+3	; 0x03
     404:	bc 81       	ldd	r27, Y+4	; 0x04
     406:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <_light>
     40a:	90 93 07 07 	sts	0x0707, r25	; 0x800707 <_light+0x1>
     40e:	a0 93 08 07 	sts	0x0708, r26	; 0x800708 <_light+0x2>
     412:	b0 93 09 07 	sts	0x0709, r27	; 0x800709 <_light+0x3>
}
     416:	00 00       	nop
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	08 95       	ret

00000426 <SensorDataPackageHandler_getLoraPayload>:

lora_payload_t SensorDataPackageHandler_getLoraPayload(uint8_t portNo)
{
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	6f 97       	sbiw	r28, 0x1f	; 31
     430:	0f b6       	in	r0, 0x3f	; 63
     432:	f8 94       	cli
     434:	de bf       	out	0x3e, r29	; 62
     436:	0f be       	out	0x3f, r0	; 63
     438:	cd bf       	out	0x3d, r28	; 61
     43a:	9e 8f       	std	Y+30, r25	; 0x1e
     43c:	8d 8f       	std	Y+29, r24	; 0x1d
     43e:	6f 8f       	std	Y+31, r22	; 0x1f
	lora_payload_t _uplink_payload = {.len = 8, .bytes = {0}, .port_no = portNo};
     440:	26 e1       	ldi	r18, 0x16	; 22
     442:	ce 01       	movw	r24, r28
     444:	07 96       	adiw	r24, 0x07	; 7
     446:	fc 01       	movw	r30, r24
     448:	32 2f       	mov	r19, r18
     44a:	11 92       	st	Z+, r1
     44c:	3a 95       	dec	r19
     44e:	e9 f7       	brne	.-6      	; 0x44a <SensorDataPackageHandler_getLoraPayload+0x24>
     450:	8f 8d       	ldd	r24, Y+31	; 0x1f
     452:	8f 83       	std	Y+7, r24	; 0x07
     454:	88 e0       	ldi	r24, 0x08	; 8
     456:	88 87       	std	Y+8, r24	; 0x08

	uint16_t _light_as_int = _light * RATIO;
     458:	80 91 06 07 	lds	r24, 0x0706	; 0x800706 <_light>
     45c:	90 91 07 07 	lds	r25, 0x0707	; 0x800707 <_light+0x1>
     460:	a0 91 08 07 	lds	r26, 0x0708	; 0x800708 <_light+0x2>
     464:	b0 91 09 07 	lds	r27, 0x0709	; 0x800709 <_light+0x3>
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	48 ec       	ldi	r20, 0xC8	; 200
     46e:	52 e4       	ldi	r21, 0x42	; 66
     470:	bc 01       	movw	r22, r24
     472:	cd 01       	movw	r24, r26
     474:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
     478:	dc 01       	movw	r26, r24
     47a:	cb 01       	movw	r24, r22
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__fixunssfsi>
     484:	dc 01       	movw	r26, r24
     486:	cb 01       	movw	r24, r22
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
	uint16_t _humidity_as_int = _humidity * RATIO;
     48c:	80 91 0a 07 	lds	r24, 0x070A	; 0x80070a <_humidity>
     490:	90 91 0b 07 	lds	r25, 0x070B	; 0x80070b <_humidity+0x1>
     494:	a0 91 0c 07 	lds	r26, 0x070C	; 0x80070c <_humidity+0x2>
     498:	b0 91 0d 07 	lds	r27, 0x070D	; 0x80070d <_humidity+0x3>
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	48 ec       	ldi	r20, 0xC8	; 200
     4a2:	52 e4       	ldi	r21, 0x42	; 66
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	bc 01       	movw	r22, r24
     4b2:	cd 01       	movw	r24, r26
     4b4:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__fixunssfsi>
     4b8:	dc 01       	movw	r26, r24
     4ba:	cb 01       	movw	r24, r22
     4bc:	9c 83       	std	Y+4, r25	; 0x04
     4be:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t _temperature_as_int = _temperature * RATIO;
     4c0:	80 91 0e 07 	lds	r24, 0x070E	; 0x80070e <_temperature>
     4c4:	90 91 0f 07 	lds	r25, 0x070F	; 0x80070f <_temperature+0x1>
     4c8:	a0 91 10 07 	lds	r26, 0x0710	; 0x800710 <_temperature+0x2>
     4cc:	b0 91 11 07 	lds	r27, 0x0711	; 0x800711 <_temperature+0x3>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	48 ec       	ldi	r20, 0xC8	; 200
     4d6:	52 e4       	ldi	r21, 0x42	; 66
     4d8:	bc 01       	movw	r22, r24
     4da:	cd 01       	movw	r24, r26
     4dc:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__fixunssfsi>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	9e 83       	std	Y+6, r25	; 0x06
     4f2:	8d 83       	std	Y+5, r24	; 0x05

	_uplink_payload.bytes[0] = _humidity_as_int >> 8;
     4f4:	8b 81       	ldd	r24, Y+3	; 0x03
     4f6:	9c 81       	ldd	r25, Y+4	; 0x04
     4f8:	89 2f       	mov	r24, r25
     4fa:	99 27       	eor	r25, r25
     4fc:	89 87       	std	Y+9, r24	; 0x09
	_uplink_payload.bytes[1] = _humidity_as_int & 0xFF;
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	8a 87       	std	Y+10, r24	; 0x0a
	_uplink_payload.bytes[2] = _temperature_as_int >> 8;
     502:	8d 81       	ldd	r24, Y+5	; 0x05
     504:	9e 81       	ldd	r25, Y+6	; 0x06
     506:	89 2f       	mov	r24, r25
     508:	99 27       	eor	r25, r25
     50a:	8b 87       	std	Y+11, r24	; 0x0b
	_uplink_payload.bytes[3] = _temperature_as_int & 0xFF;
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	8c 87       	std	Y+12, r24	; 0x0c
	_uplink_payload.bytes[4] = _co2_ppm >> 8;
     510:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__data_end>
     514:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <__data_end+0x1>
     518:	89 2f       	mov	r24, r25
     51a:	99 27       	eor	r25, r25
     51c:	8d 87       	std	Y+13, r24	; 0x0d
	_uplink_payload.bytes[5] = _co2_ppm & 0xFF;
     51e:	80 91 04 07 	lds	r24, 0x0704	; 0x800704 <__data_end>
     522:	90 91 05 07 	lds	r25, 0x0705	; 0x800705 <__data_end+0x1>
     526:	8e 87       	std	Y+14, r24	; 0x0e
	_uplink_payload.bytes[6] = _light_as_int >> 8;
     528:	89 81       	ldd	r24, Y+1	; 0x01
     52a:	9a 81       	ldd	r25, Y+2	; 0x02
     52c:	89 2f       	mov	r24, r25
     52e:	99 27       	eor	r25, r25
     530:	8f 87       	std	Y+15, r24	; 0x0f
	_uplink_payload.bytes[7] = _light_as_int & 0xFF;
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	88 8b       	std	Y+16, r24	; 0x10

	return _uplink_payload;
     536:	8d 8d       	ldd	r24, Y+29	; 0x1d
     538:	9e 8d       	ldd	r25, Y+30	; 0x1e
     53a:	26 e1       	ldi	r18, 0x16	; 22
     53c:	fe 01       	movw	r30, r28
     53e:	37 96       	adiw	r30, 0x07	; 7
     540:	dc 01       	movw	r26, r24
     542:	01 90       	ld	r0, Z+
     544:	0d 92       	st	X+, r0
     546:	2a 95       	dec	r18
     548:	e1 f7       	brne	.-8      	; 0x542 <SensorDataPackageHandler_getLoraPayload+0x11c>
     54a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     54c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     54e:	6f 96       	adiw	r28, 0x1f	; 31
     550:	0f b6       	in	r0, 0x3f	; 63
     552:	f8 94       	cli
     554:	de bf       	out	0x3e, r29	; 62
     556:	0f be       	out	0x3f, r0	; 63
     558:	cd bf       	out	0x3d, r28	; 61
     55a:	df 91       	pop	r29
     55c:	cf 91       	pop	r28
     55e:	08 95       	ret

00000560 <main>:
#include <serial.h>
#include "avr/interrupt.h"
#include "tasks/sensor_control_task.h"

int main(void)
{
     560:	cf 93       	push	r28
     562:	df 93       	push	r29
     564:	cd b7       	in	r28, 0x3d	; 61
     566:	de b7       	in	r29, 0x3e	; 62
	trace_init();
     568:	cf d6       	rcall	.+3486   	; 0x1308 <trace_init>
	stdioCreate(ser_USART0);	
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 04 40 	call	0x8008	; 0x8008 <stdioCreate>
	//sei();
	printf("Program Started!!\n");
     570:	81 e2       	ldi	r24, 0x21	; 33
     572:	92 e0       	ldi	r25, 0x02	; 2
     574:	0e 94 0e 4b 	call	0x961c	; 0x961c <puts>
	
	sensorControl_create();
     578:	f9 d4       	rcall	.+2546   	; 0xf6c <sensorControl_create>
	
	vTaskStartScheduler();
     57a:	0e 94 58 21 	call	0x42b0	; 0x42b0 <vTaskStartScheduler>

	while (1) {}
     57e:	ff cf       	rjmp	.-2      	; 0x57e <main+0x1e>

00000580 <co2Sensor_callback>:
static TaskHandle_t _CO2SensorTaskHandle;
static uint16_t _lastCo2Measurement;
static mh_z19_return_code_t _rc;

void co2Sensor_callback(uint16_t ppm)
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	1f 92       	push	r1
     586:	1f 92       	push	r1
     588:	cd b7       	in	r28, 0x3d	; 61
     58a:	de b7       	in	r29, 0x3e	; 62
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
	_lastCo2Measurement = ppm;
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	9a 81       	ldd	r25, Y+2	; 0x02
     594:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <_lastCo2Measurement+0x1>
     598:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <_lastCo2Measurement>
	//set the bit to true to signalize that the measurement was completed
	xEventGroupSetBits(_eventGroupHandleNewData, CO2_READY_BIT);
     59c:	80 91 16 07 	lds	r24, 0x0716	; 0x800716 <_eventGroupHandleNewData>
     5a0:	90 91 17 07 	lds	r25, 0x0717	; 0x800717 <_eventGroupHandleNewData+0x1>
     5a4:	42 e0       	ldi	r20, 0x02	; 2
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	0e 94 21 0b 	call	0x1642	; 0x1642 <xEventGroupSetBits>
}
     5b0:	00 00       	nop
     5b2:	0f 90       	pop	r0
     5b4:	0f 90       	pop	r0
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	08 95       	ret

000005bc <_setup_co2_driver>:

static void _setup_co2_driver()
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	cd b7       	in	r28, 0x3d	; 61
     5c2:	de b7       	in	r29, 0x3e	; 62
	//setup driver
	mh_z19_create(ser_USART3, co2Sensor_callback);
     5c4:	60 ec       	ldi	r22, 0xC0	; 192
     5c6:	72 e0       	ldi	r23, 0x02	; 2
     5c8:	83 e0       	ldi	r24, 0x03	; 3
     5ca:	0e 94 00 3c 	call	0x7800	; 0x7800 <mh_z19_create>
	//printf("Initialized CO2\n");
}
     5ce:	00 00       	nop
     5d0:	df 91       	pop	r29
     5d2:	cf 91       	pop	r28
     5d4:	08 95       	ret

000005d6 <_CO2SensorTask>:

void _CO2SensorTask(void *pvParameters)
{
     5d6:	cf 92       	push	r12
     5d8:	df 92       	push	r13
     5da:	ef 92       	push	r14
     5dc:	ff 92       	push	r15
     5de:	0f 93       	push	r16
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	1f 92       	push	r1
     5e6:	1f 92       	push	r1
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	9a 83       	std	Y+2, r25	; 0x02
     5ee:	89 83       	std	Y+1, r24	; 0x01
	for(;;)
	{
		//wait for the start measuring bit in the event group
		xEventGroupWaitBits(_eventGroupHandleMeasure,
     5f0:	80 91 14 07 	lds	r24, 0x0714	; 0x800714 <_eventGroupHandleMeasure>
     5f4:	90 91 15 07 	lds	r25, 0x0715	; 0x800715 <_eventGroupHandleMeasure+0x1>
     5f8:	cc 24       	eor	r12, r12
     5fa:	ca 94       	dec	r12
     5fc:	dc 2c       	mov	r13, r12
     5fe:	76 01       	movw	r14, r12
     600:	01 e0       	ldi	r16, 0x01	; 1
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	42 e0       	ldi	r20, 0x02	; 2
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	e3 d6       	rcall	.+3526   	; 0x13d4 <xEventGroupWaitBits>
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		//perform measuring
		_rc = mh_z19_take_meassuring();
     60e:	0e 94 2e 3c 	call	0x785c	; 0x785c <mh_z19_take_meassuring>
     612:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <_rc>
		
		if(_rc != MHZ19_OK)
     616:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <_rc>
     61a:	88 23       	and	r24, r24
     61c:	49 f3       	breq	.-46     	; 0x5f0 <_CO2SensorTask+0x1a>
		{
			xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     61e:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <_xPrintfSemaphore>
     622:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <_xPrintfSemaphore+0x1>
     626:	4f ef       	ldi	r20, 0xFF	; 255
     628:	5f ef       	ldi	r21, 0xFF	; 255
     62a:	ba 01       	movw	r22, r20
     62c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
			//printf(":: Fetch co2 data failed \n");
			xSemaphoreGive(_xPrintfSemaphore);
     630:	80 91 12 07 	lds	r24, 0x0712	; 0x800712 <_xPrintfSemaphore>
     634:	90 91 13 07 	lds	r25, 0x0713	; 0x800713 <_xPrintfSemaphore+0x1>
     638:	00 e0       	ldi	r16, 0x00	; 0
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	a9 01       	movw	r20, r18
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		}
	}
     648:	d3 cf       	rjmp	.-90     	; 0x5f0 <_CO2SensorTask+0x1a>

0000064a <co2Sensor_create>:
	vTaskDelete(_CO2SensorTaskHandle);
}

void co2Sensor_create(EventGroupHandle_t pvEventHandleMeasure, EventGroupHandle_t pvEventHandleNewData, SemaphoreHandle_t pvPrintfSemaphore)
{
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <co2Sensor_create+0xc>
     656:	00 d0       	rcall	.+0      	; 0x658 <co2Sensor_create+0xe>
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	7c 83       	std	Y+4, r23	; 0x04
     662:	6b 83       	std	Y+3, r22	; 0x03
     664:	5e 83       	std	Y+6, r21	; 0x06
     666:	4d 83       	std	Y+5, r20	; 0x05
	//setting variables
	_xPrintfSemaphore = pvPrintfSemaphore;
     668:	8d 81       	ldd	r24, Y+5	; 0x05
     66a:	9e 81       	ldd	r25, Y+6	; 0x06
     66c:	90 93 13 07 	sts	0x0713, r25	; 0x800713 <_xPrintfSemaphore+0x1>
     670:	80 93 12 07 	sts	0x0712, r24	; 0x800712 <_xPrintfSemaphore>
	_eventGroupHandleMeasure = pvEventHandleMeasure;
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	9a 81       	ldd	r25, Y+2	; 0x02
     678:	90 93 15 07 	sts	0x0715, r25	; 0x800715 <_eventGroupHandleMeasure+0x1>
     67c:	80 93 14 07 	sts	0x0714, r24	; 0x800714 <_eventGroupHandleMeasure>
	_eventGroupHandleNewData = pvEventHandleNewData;
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	90 93 17 07 	sts	0x0717, r25	; 0x800717 <_eventGroupHandleNewData+0x1>
     688:	80 93 16 07 	sts	0x0716, r24	; 0x800716 <_eventGroupHandleNewData>
	_lastCo2Measurement = 0;
     68c:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <_lastCo2Measurement+0x1>
     690:	10 92 1a 07 	sts	0x071A, r1	; 0x80071a <_lastCo2Measurement>
	
	//starting the drivers
	_setup_co2_driver();
     694:	93 df       	rcall	.-218    	; 0x5bc <_setup_co2_driver>
	
	//task handler
	_CO2SensorTaskHandle = NULL;
     696:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <_CO2SensorTaskHandle+0x1>
     69a:	10 92 18 07 	sts	0x0718, r1	; 0x800718 <_CO2SensorTaskHandle>
	
	//task creation
	xTaskCreate(
     69e:	0f 2e       	mov	r0, r31
     6a0:	f8 e1       	ldi	r31, 0x18	; 24
     6a2:	ef 2e       	mov	r14, r31
     6a4:	f7 e0       	ldi	r31, 0x07	; 7
     6a6:	ff 2e       	mov	r15, r31
     6a8:	f0 2d       	mov	r31, r0
     6aa:	01 e0       	ldi	r16, 0x01	; 1
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	40 ec       	ldi	r20, 0xC0	; 192
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	63 e3       	ldi	r22, 0x33	; 51
     6b6:	72 e0       	ldi	r23, 0x02	; 2
     6b8:	8b ee       	ldi	r24, 0xEB	; 235
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
	(const portCHAR *)CO2_SENSOR_TASK_NAME,
	configMINIMAL_STACK_SIZE,
	NULL,
	CO2_TASK_PRIORITY,
	&_CO2SensorTaskHandle);
}
     6c0:	00 00       	nop
     6c2:	26 96       	adiw	r28, 0x06	; 6
     6c4:	0f b6       	in	r0, 0x3f	; 63
     6c6:	f8 94       	cli
     6c8:	de bf       	out	0x3e, r29	; 62
     6ca:	0f be       	out	0x3f, r0	; 63
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	0f 91       	pop	r16
     6d4:	ff 90       	pop	r15
     6d6:	ef 90       	pop	r14
     6d8:	08 95       	ret

000006da <co2sensor_getCo2>:

uint16_t co2sensor_getCo2()
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	cd b7       	in	r28, 0x3d	; 61
     6e0:	de b7       	in	r29, 0x3e	; 62
	return _lastCo2Measurement;
     6e2:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <_lastCo2Measurement>
     6e6:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <_lastCo2Measurement+0x1>
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <LightSensor_callback>:
static EventGroupHandle_t _eventGroupHandleNewData;
static TaskHandle_t _lightSensorTaskHandle;
static float _lastMeasurementLux;

void LightSensor_callback(tsl2591ReturnCode_t rc)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	00 d0       	rcall	.+0      	; 0x6f6 <LightSensor_callback+0x6>
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <LightSensor_callback+0x8>
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	8e 83       	std	Y+6, r24	; 0x06
	if (rc != TSL2591_DATA_READY)
     6fe:	8e 81       	ldd	r24, Y+6	; 0x06
     700:	81 30       	cpi	r24, 0x01	; 1
     702:	a9 f5       	brne	.+106    	; 0x76e <LightSensor_callback+0x7e>
		//xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
		//printf("%s :: Light sensor not ready :: return code %d\n", LIGHT_SENSOR_TAG, rc);
		//xSemaphoreGive(_xPrintfSemaphore);
		return;
	}
	float _lux = 0;
     704:	1a 82       	std	Y+2, r1	; 0x02
     706:	1b 82       	std	Y+3, r1	; 0x03
     708:	1c 82       	std	Y+4, r1	; 0x04
     70a:	1d 82       	std	Y+5, r1	; 0x05
	tsl2591ReturnCode_t result = tsl2591GetLux(&_lux);
     70c:	ce 01       	movw	r24, r28
     70e:	02 96       	adiw	r24, 0x02	; 2
     710:	0e 94 ce 40 	call	0x819c	; 0x819c <tsl2591GetLux>
     714:	89 83       	std	Y+1, r24	; 0x01
	if (TSL2591_OK == result)
     716:	89 81       	ldd	r24, Y+1	; 0x01
     718:	88 23       	and	r24, r24
     71a:	b1 f4       	brne	.+44     	; 0x748 <LightSensor_callback+0x58>
	{
		//set data
		_lastMeasurementLux = _lux;
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	9b 81       	ldd	r25, Y+3	; 0x03
     720:	ac 81       	ldd	r26, Y+4	; 0x04
     722:	bd 81       	ldd	r27, Y+5	; 0x05
     724:	80 93 25 07 	sts	0x0725, r24	; 0x800725 <_lastMeasurementLux>
     728:	90 93 26 07 	sts	0x0726, r25	; 0x800726 <_lastMeasurementLux+0x1>
     72c:	a0 93 27 07 	sts	0x0727, r26	; 0x800727 <_lastMeasurementLux+0x2>
     730:	b0 93 28 07 	sts	0x0728, r27	; 0x800728 <_lastMeasurementLux+0x3>
		xEventGroupSetBits(_eventGroupHandleNewData, LIGHT_READY_BIT);
     734:	80 91 21 07 	lds	r24, 0x0721	; 0x800721 <_eventGroupHandleNewData>
     738:	90 91 22 07 	lds	r25, 0x0722	; 0x800722 <_eventGroupHandleNewData+0x1>
     73c:	44 e0       	ldi	r20, 0x04	; 4
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	7e d7       	rcall	.+3836   	; 0x1642 <xEventGroupSetBits>
     746:	14 c0       	rjmp	.+40     	; 0x770 <LightSensor_callback+0x80>
	}
	else
	{
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     748:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_xPrintfSemaphore>
     74c:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <_xPrintfSemaphore+0x1>
     750:	4f ef       	ldi	r20, 0xFF	; 255
     752:	5f ef       	ldi	r21, 0xFF	; 255
     754:	ba 01       	movw	r22, r20
     756:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		//printf("%s :: Get light measurement failed :: return code %d\n", LIGHT_SENSOR_TAG, result);
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     75a:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_xPrintfSemaphore>
     75e:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <_xPrintfSemaphore+0x1>
     762:	4f ef       	ldi	r20, 0xFF	; 255
     764:	5f ef       	ldi	r21, 0xFF	; 255
     766:	ba 01       	movw	r22, r20
     768:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
     76c:	01 c0       	rjmp	.+2      	; 0x770 <LightSensor_callback+0x80>
	if (rc != TSL2591_DATA_READY)
	{
		//xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
		//printf("%s :: Light sensor not ready :: return code %d\n", LIGHT_SENSOR_TAG, rc);
		//xSemaphoreGive(_xPrintfSemaphore);
		return;
     76e:	00 00       	nop
	{
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
		//printf("%s :: Get light measurement failed :: return code %d\n", LIGHT_SENSOR_TAG, result);
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
	}
}
     770:	26 96       	adiw	r28, 0x06	; 6
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <_setup_light_driver>:

static void _setup_light_driver()
{
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	1f 92       	push	r1
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
	//create
	int result = tsl2591Create(LightSensor_callback);
     78e:	88 e7       	ldi	r24, 0x78	; 120
     790:	93 e0       	ldi	r25, 0x03	; 3
     792:	0e 94 8c 40 	call	0x8118	; 0x8118 <tsl2591Create>
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9a 83       	std	Y+2, r25	; 0x02
     79c:	89 83       	std	Y+1, r24	; 0x01
	if (result != TSL2591_OK)
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	9a 81       	ldd	r25, Y+2	; 0x02
     7a2:	89 2b       	or	r24, r25
     7a4:	21 f0       	breq	.+8      	; 0x7ae <_setup_light_driver+0x2c>
	{
		//printf("%s :: FAILED DRIVER INITIALIZATION :: result code %d\n", LIGHT_SENSOR_TAG, result);
		exit(EXIT_FAILURE);
     7a6:	81 e0       	ldi	r24, 0x01	; 1
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 ca 4b 	call	0x9794	; 0x9794 <_exit>
	else{
		//printf("Initialized Light driver\n");
	}
	
	//enable
	result = tsl2591Enable();
     7ae:	0e 94 a7 40 	call	0x814e	; 0x814e <tsl2591Enable>
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	9a 83       	std	Y+2, r25	; 0x02
     7b8:	89 83       	std	Y+1, r24	; 0x01
	if (result != TSL2591_OK)
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	89 2b       	or	r24, r25
     7c0:	21 f0       	breq	.+8      	; 0x7ca <_setup_light_driver+0x48>
	{
		//printf("%s :: FAILED DRIVER ENABLING :: Light :: result code %d\n", LIGHT_SENSOR_TAG, result);
		exit(EXIT_FAILURE);
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 ca 4b 	call	0x9794	; 0x9794 <_exit>
	}
	else{
		//printf("Enabled light driver\n");
	}
}
     7ca:	00 00       	nop
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	df 91       	pop	r29
     7d2:	cf 91       	pop	r28
     7d4:	08 95       	ret

000007d6 <vALightSensorTask>:

void vALightSensorTask(void *pvParameters)
{
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	00 d0       	rcall	.+0      	; 0x7e6 <vALightSensorTask+0x10>
     7e6:	1f 92       	push	r1
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	8b 83       	std	Y+3, r24	; 0x03
	for (;;)
	{
		xEventGroupWaitBits(_eventGroupHandleMeasure,
     7f0:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <_eventGroupHandleMeasure>
     7f4:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <_eventGroupHandleMeasure+0x1>
     7f8:	cc 24       	eor	r12, r12
     7fa:	ca 94       	dec	r12
     7fc:	dc 2c       	mov	r13, r12
     7fe:	76 01       	movw	r14, r12
     800:	01 e0       	ldi	r16, 0x01	; 1
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	44 e0       	ldi	r20, 0x04	; 4
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	70 e0       	ldi	r23, 0x00	; 0
     80c:	e3 d5       	rcall	.+3014   	; 0x13d4 <xEventGroupWaitBits>
		LIGHT_MEASURE_BIT,
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);

		int result = tsl2591FetchData();
     80e:	0e 94 bc 40 	call	0x8178	; 0x8178 <tsl2591FetchData>
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	9a 83       	std	Y+2, r25	; 0x02
     818:	89 83       	std	Y+1, r24	; 0x01

		if (result != TSL2591_OK)
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	9a 81       	ldd	r25, Y+2	; 0x02
     81e:	89 2b       	or	r24, r25
     820:	39 f3       	breq	.-50     	; 0x7f0 <vALightSensorTask+0x1a>
		{
			xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     822:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_xPrintfSemaphore>
     826:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <_xPrintfSemaphore+0x1>
     82a:	4f ef       	ldi	r20, 0xFF	; 255
     82c:	5f ef       	ldi	r21, 0xFF	; 255
     82e:	ba 01       	movw	r22, r20
     830:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
			//printf("%s :: Fetch light data failed %d\n", LIGHT_SENSOR_TAG, result);
			xSemaphoreGive(_xPrintfSemaphore);
     834:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <_xPrintfSemaphore>
     838:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <_xPrintfSemaphore+0x1>
     83c:	00 e0       	ldi	r16, 0x00	; 0
     83e:	20 e0       	ldi	r18, 0x00	; 0
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	a9 01       	movw	r20, r18
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		}
	}
     84c:	d1 cf       	rjmp	.-94     	; 0x7f0 <vALightSensorTask+0x1a>

0000084e <LightSensor_create>:
	vTaskDelete(_lightSensorTaskHandle);
}

void LightSensor_create(EventGroupHandle_t pvEventHandleMeasure, EventGroupHandle_t pvEventHandleNewData, SemaphoreHandle_t pvPrintfSemaphore)
{
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	00 d0       	rcall	.+0      	; 0x85a <LightSensor_create+0xc>
     85a:	00 d0       	rcall	.+0      	; 0x85c <LightSensor_create+0xe>
     85c:	cd b7       	in	r28, 0x3d	; 61
     85e:	de b7       	in	r29, 0x3e	; 62
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	89 83       	std	Y+1, r24	; 0x01
     864:	7c 83       	std	Y+4, r23	; 0x04
     866:	6b 83       	std	Y+3, r22	; 0x03
     868:	5e 83       	std	Y+6, r21	; 0x06
     86a:	4d 83       	std	Y+5, r20	; 0x05
	_xPrintfSemaphore = pvPrintfSemaphore;
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	9e 81       	ldd	r25, Y+6	; 0x06
     870:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <_xPrintfSemaphore+0x1>
     874:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <_xPrintfSemaphore>
	_eventGroupHandleMeasure = pvEventHandleMeasure;
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <_eventGroupHandleMeasure+0x1>
     880:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <_eventGroupHandleMeasure>
	_eventGroupHandleNewData = pvEventHandleNewData;
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	9c 81       	ldd	r25, Y+4	; 0x04
     888:	90 93 22 07 	sts	0x0722, r25	; 0x800722 <_eventGroupHandleNewData+0x1>
     88c:	80 93 21 07 	sts	0x0721, r24	; 0x800721 <_eventGroupHandleNewData>
	_lastMeasurementLux = 0;
     890:	10 92 25 07 	sts	0x0725, r1	; 0x800725 <_lastMeasurementLux>
     894:	10 92 26 07 	sts	0x0726, r1	; 0x800726 <_lastMeasurementLux+0x1>
     898:	10 92 27 07 	sts	0x0727, r1	; 0x800727 <_lastMeasurementLux+0x2>
     89c:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <_lastMeasurementLux+0x3>

	_setup_light_driver();
     8a0:	70 df       	rcall	.-288    	; 0x782 <_setup_light_driver>

	_lightSensorTaskHandle = NULL;
     8a2:	10 92 24 07 	sts	0x0724, r1	; 0x800724 <_lightSensorTaskHandle+0x1>
     8a6:	10 92 23 07 	sts	0x0723, r1	; 0x800723 <_lightSensorTaskHandle>

	xTaskCreate(
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f3 e2       	ldi	r31, 0x23	; 35
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f7 e0       	ldi	r31, 0x07	; 7
     8b2:	ff 2e       	mov	r15, r31
     8b4:	f0 2d       	mov	r31, r0
     8b6:	01 e0       	ldi	r16, 0x01	; 1
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	40 ec       	ldi	r20, 0xC0	; 192
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	67 e3       	ldi	r22, 0x37	; 55
     8c2:	72 e0       	ldi	r23, 0x02	; 2
     8c4:	8b ee       	ldi	r24, 0xEB	; 235
     8c6:	93 e0       	ldi	r25, 0x03	; 3
     8c8:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
	(const portCHAR *)LIGHT_SENSOR_TASK_NAME,
	configMINIMAL_STACK_SIZE,
	NULL,
	LIGHT_TASK_PRIORITY,
	&_lightSensorTaskHandle);
}
     8cc:	00 00       	nop
     8ce:	26 96       	adiw	r28, 0x06	; 6
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	f8 94       	cli
     8d4:	de bf       	out	0x3e, r29	; 62
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	cd bf       	out	0x3d, r28	; 61
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	0f 91       	pop	r16
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	08 95       	ret

000008e6 <LightSensor_getLightMeasurement>:

float LightSensor_getLightMeasurement()
{
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
	return _lastMeasurementLux;
     8ee:	80 91 25 07 	lds	r24, 0x0725	; 0x800725 <_lastMeasurementLux>
     8f2:	90 91 26 07 	lds	r25, 0x0726	; 0x800726 <_lastMeasurementLux+0x1>
     8f6:	a0 91 27 07 	lds	r26, 0x0727	; 0x800727 <_lastMeasurementLux+0x2>
     8fa:	b0 91 28 07 	lds	r27, 0x0728	; 0x800728 <_lastMeasurementLux+0x3>
     8fe:	bc 01       	movw	r22, r24
     900:	cd 01       	movw	r24, r26
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <_setup_lora_driver>:
static char _out_buf[100];

#define LED_TASK_PRIORITY   7

static void _setup_lora_driver()
{
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	1f 92       	push	r1
     90e:	1f 92       	push	r1
     910:	cd b7       	in	r28, 0x3d	; 61
     912:	de b7       	in	r29, 0x3e	; 62
	//hal_create(LED_TASK_PRIORITY);
	// Initialise the LoRaWAN driver without down-link buffer
	//lora_driver_create(LORA_USART, NULL);
	
	e_LoRa_return_code_t rc;
	led_slow_blink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <led_slow_blink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_map_return_code_to_text(lora_driver_rn2483_factory_reset()));
     91a:	0e 94 5a 38 	call	0x70b4	; 0x70b4 <lora_driver_rn2483_factory_reset>
     91e:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     922:	29 2f       	mov	r18, r25
     924:	2f 93       	push	r18
     926:	8f 93       	push	r24
     928:	8d e3       	ldi	r24, 0x3D	; 61
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	89 2f       	mov	r24, r25
     92e:	8f 93       	push	r24
     930:	8d e3       	ldi	r24, 0x3D	; 61
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	8f 93       	push	r24
     936:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0

	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_map_return_code_to_text(lora_driver_configure_to_eu868()));
     942:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <lora_driver_configure_to_eu868>
     946:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     94a:	29 2f       	mov	r18, r25
     94c:	2f 93       	push	r18
     94e:	8f 93       	push	r24
     950:	80 e5       	ldi	r24, 0x50	; 80
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	89 2f       	mov	r24, r25
     956:	8f 93       	push	r24
     958:	80 e5       	ldi	r24, 0x50	; 80
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	8f 93       	push	r24
     95e:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0

	// Get the transceivers HW EUI
	rc = lora_driver_get_rn2483_hweui(_out_buf);
     96a:	8f e2       	ldi	r24, 0x2F	; 47
     96c:	97 e0       	ldi	r25, 0x07	; 7
     96e:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <lora_driver_get_rn2483_hweui>
     972:	8a 83       	std	Y+2, r24	; 0x02
	printf("Get HWEUI >%s<: %s\n", lora_driver_map_return_code_to_text(rc), _out_buf);
     974:	8a 81       	ldd	r24, Y+2	; 0x02
     976:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     97a:	9c 01       	movw	r18, r24
     97c:	8f e2       	ldi	r24, 0x2F	; 47
     97e:	97 e0       	ldi	r25, 0x07	; 7
     980:	89 2f       	mov	r24, r25
     982:	8f 93       	push	r24
     984:	8f e2       	ldi	r24, 0x2F	; 47
     986:	97 e0       	ldi	r25, 0x07	; 7
     988:	8f 93       	push	r24
     98a:	83 2f       	mov	r24, r19
     98c:	8f 93       	push	r24
     98e:	82 2f       	mov	r24, r18
     990:	8f 93       	push	r24
     992:	89 e6       	ldi	r24, 0x69	; 105
     994:	92 e0       	ldi	r25, 0x02	; 2
     996:	89 2f       	mov	r24, r25
     998:	8f 93       	push	r24
     99a:	89 e6       	ldi	r24, 0x69	; 105
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	8f 93       	push	r24
     9a0:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_device_identifier(_out_buf)));
     9b0:	8f e2       	ldi	r24, 0x2F	; 47
     9b2:	97 e0       	ldi	r25, 0x07	; 7
     9b4:	0e 94 88 38 	call	0x7110	; 0x7110 <lora_driver_set_device_identifier>
     9b8:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     9bc:	29 2f       	mov	r18, r25
     9be:	2f 93       	push	r18
     9c0:	8f 93       	push	r24
     9c2:	8f e2       	ldi	r24, 0x2F	; 47
     9c4:	97 e0       	ldi	r25, 0x07	; 7
     9c6:	89 2f       	mov	r24, r25
     9c8:	8f 93       	push	r24
     9ca:	8f e2       	ldi	r24, 0x2F	; 47
     9cc:	97 e0       	ldi	r25, 0x07	; 7
     9ce:	8f 93       	push	r24
     9d0:	8d e7       	ldi	r24, 0x7D	; 125
     9d2:	92 e0       	ldi	r25, 0x02	; 2
     9d4:	89 2f       	mov	r24, r25
     9d6:	8f 93       	push	r24
     9d8:	8d e7       	ldi	r24, 0x7D	; 125
     9da:	92 e0       	ldi	r25, 0x02	; 2
     9dc:	8f 93       	push	r24
     9de:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_map_return_code_to_text(lora_driver_set_otaa_identity(LORA_appEUI, LORA_appKEY, _out_buf)));
     9ee:	4f e2       	ldi	r20, 0x2F	; 47
     9f0:	57 e0       	ldi	r21, 0x07	; 7
     9f2:	62 e9       	ldi	r22, 0x92	; 146
     9f4:	72 e0       	ldi	r23, 0x02	; 2
     9f6:	83 eb       	ldi	r24, 0xB3	; 179
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	0e 94 b6 3a 	call	0x756c	; 0x756c <lora_driver_set_otaa_identity>
     9fe:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     a02:	29 2f       	mov	r18, r25
     a04:	2f 93       	push	r18
     a06:	8f 93       	push	r24
     a08:	8f e2       	ldi	r24, 0x2F	; 47
     a0a:	97 e0       	ldi	r25, 0x07	; 7
     a0c:	89 2f       	mov	r24, r25
     a0e:	8f 93       	push	r24
     a10:	8f e2       	ldi	r24, 0x2F	; 47
     a12:	97 e0       	ldi	r25, 0x07	; 7
     a14:	8f 93       	push	r24
     a16:	82 e9       	ldi	r24, 0x92	; 146
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	89 2f       	mov	r24, r25
     a1c:	8f 93       	push	r24
     a1e:	82 e9       	ldi	r24, 0x92	; 146
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	8f 93       	push	r24
     a24:	83 eb       	ldi	r24, 0xB3	; 179
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	89 2f       	mov	r24, r25
     a2a:	8f 93       	push	r24
     a2c:	83 eb       	ldi	r24, 0xB3	; 179
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	8f 93       	push	r24
     a32:	84 ec       	ldi	r24, 0xC4	; 196
     a34:	92 e0       	ldi	r25, 0x02	; 2
     a36:	89 2f       	mov	r24, r25
     a38:	8f 93       	push	r24
     a3a:	84 ec       	ldi	r24, 0xC4	; 196
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	8f 93       	push	r24
     a40:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     a44:	8d b7       	in	r24, 0x3d	; 61
     a46:	9e b7       	in	r25, 0x3e	; 62
     a48:	0a 96       	adiw	r24, 0x0a	; 10
     a4a:	0f b6       	in	r0, 0x3f	; 63
     a4c:	f8 94       	cli
     a4e:	de bf       	out	0x3e, r29	; 62
     a50:	0f be       	out	0x3f, r0	; 63
     a52:	cd bf       	out	0x3d, r28	; 61

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n", lora_driver_map_return_code_to_text(lora_driver_save_mac()));
     a54:	0e 94 bb 38 	call	0x7176	; 0x7176 <lora_driver_save_mac>
     a58:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     a5c:	29 2f       	mov	r18, r25
     a5e:	2f 93       	push	r18
     a60:	8f 93       	push	r24
     a62:	8a ef       	ldi	r24, 0xFA	; 250
     a64:	92 e0       	ldi	r25, 0x02	; 2
     a66:	89 2f       	mov	r24, r25
     a68:	8f 93       	push	r24
     a6a:	8a ef       	ldi	r24, 0xFA	; 250
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	8f 93       	push	r24
     a70:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     a74:	0f 90       	pop	r0
     a76:	0f 90       	pop	r0
     a78:	0f 90       	pop	r0
     a7a:	0f 90       	pop	r0

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_map_return_code_to_text(lora_driver_set_adaptive_data_rate(LoRa_ON)));
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	0e 94 b5 39 	call	0x736a	; 0x736a <lora_driver_set_adaptive_data_rate>
     a82:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     a86:	29 2f       	mov	r18, r25
     a88:	2f 93       	push	r18
     a8a:	8f 93       	push	r24
     a8c:	89 e0       	ldi	r24, 0x09	; 9
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	89 2f       	mov	r24, r25
     a92:	8f 93       	push	r24
     a94:	89 e0       	ldi	r24, 0x09	; 9
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	8f 93       	push	r24
     a9a:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     a9e:	0f 90       	pop	r0
     aa0:	0f 90       	pop	r0
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_map_return_code_to_text(lora_driver_set_receive_delay(500)));
     aa6:	84 ef       	ldi	r24, 0xF4	; 244
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 c0 39 	call	0x7380	; 0x7380 <lora_driver_set_receive_delay>
     aae:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     ab2:	29 2f       	mov	r18, r25
     ab4:	2f 93       	push	r18
     ab6:	8f 93       	push	r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	8f 93       	push	r24
     abc:	84 ef       	ldi	r24, 0xF4	; 244
     abe:	8f 93       	push	r24
     ac0:	8a e2       	ldi	r24, 0x2A	; 42
     ac2:	93 e0       	ldi	r25, 0x03	; 3
     ac4:	89 2f       	mov	r24, r25
     ac6:	8f 93       	push	r24
     ac8:	8a e2       	ldi	r24, 0x2A	; 42
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	8f 93       	push	r24
     ace:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
     ade:	8a e0       	ldi	r24, 0x0A	; 10
     ae0:	89 83       	std	Y+1, r24	; 0x01

	do
	{
		rc = lora_driver_join(LoRa_OTAA);
     ae2:	80 e0       	ldi	r24, 0x00	; 0
     ae4:	0e 94 c1 38 	call	0x7182	; 0x7182 <lora_driver_join>
     ae8:	8a 83       	std	Y+2, r24	; 0x02
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
     aea:	8a 81       	ldd	r24, Y+2	; 0x02
     aec:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     af0:	9c 01       	movw	r18, r24
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	88 2f       	mov	r24, r24
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	43 2f       	mov	r20, r19
     afa:	4f 93       	push	r20
     afc:	2f 93       	push	r18
     afe:	29 2f       	mov	r18, r25
     b00:	2f 93       	push	r18
     b02:	8f 93       	push	r24
     b04:	8a e4       	ldi	r24, 0x4A	; 74
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	89 2f       	mov	r24, r25
     b0a:	8f 93       	push	r24
     b0c:	8a e4       	ldi	r24, 0x4A	; 74
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	8f 93       	push	r24
     b12:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     b16:	0f 90       	pop	r0
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
		if (rc != LoRa_ACCEPTED)
     b22:	8a 81       	ldd	r24, Y+2	; 0x02
     b24:	88 30       	cpi	r24, 0x08	; 8
     b26:	81 f0       	breq	.+32     	; 0xb48 <_setup_lora_driver+0x240>
		{
			// Make the red led pulse to tell something went wrong
			led_long_puls(led_ST1); // OPTIONAL
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	0e 94 c0 36 	call	0x6d80	; 0x6d80 <led_long_puls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
     b2e:	66 e3       	ldi	r22, 0x36	; 54
     b30:	71 e0       	ldi	r23, 0x01	; 1
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
     b3c:	81 50       	subi	r24, 0x01	; 1
     b3e:	89 83       	std	Y+1, r24	; 0x01
     b40:	89 81       	ldd	r24, Y+1	; 0x01
     b42:	88 23       	and	r24, r24
     b44:	71 f6       	brne	.-100    	; 0xae2 <_setup_lora_driver+0x1da>
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <_setup_lora_driver+0x242>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
		}
		else
		{
			break;
     b48:	00 00       	nop
		}
	} while (--maxJoinTriesLeft);

	if (rc == LoRa_ACCEPTED)
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	21 f4       	brne	.+8      	; 0xb58 <_setup_lora_driver+0x250>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		led_led_on(led_ST2); // OPTIONAL
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	0e 94 a2 36 	call	0x6d44	; 0x6d44 <led_led_on>
		while (1)
		{
			taskYIELD();
		}
	}
}
     b56:	09 c0       	rjmp	.+18     	; 0xb6a <_setup_lora_driver+0x262>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		led_led_off(led_ST2); // OPTIONAL
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	0e 94 b1 36 	call	0x6d62	; 0x6d62 <led_led_off>
		// Make the red led blink fast to tell something went wrong
		led_fast_blink(led_ST1); // OPTIONAL
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <led_fast_blink>

		// Lets stay here
		while (1)
		{
			taskYIELD();
     b64:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
		}
     b68:	fd cf       	rjmp	.-6      	; 0xb64 <_setup_lora_driver+0x25c>
	}
}
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	08 95       	ret

00000b74 <loraDriver_sent_upload_message>:

void loraDriver_sent_upload_message(lora_payload_t uplink_lora_payoad)
{
     b74:	0f 93       	push	r16
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
	led_short_puls(led_ST4);
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	0e 94 d2 36 	call	0x6da4	; 0x6da4 <led_short_puls>
	if (_xPrintfSemaphore != NULL)
     b84:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_xPrintfSemaphore>
     b88:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <_xPrintfSemaphore+0x1>
     b8c:	89 2b       	or	r24, r25
     b8e:	69 f1       	breq	.+90     	; 0xbea <loraDriver_sent_upload_message+0x76>
	{
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     b90:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_xPrintfSemaphore>
     b94:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <_xPrintfSemaphore+0x1>
     b98:	4f ef       	ldi	r20, 0xFF	; 255
     b9a:	5f ef       	ldi	r21, 0xFF	; 255
     b9c:	ba 01       	movw	r22, r20
     b9e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(
     ba2:	be 01       	movw	r22, r28
     ba4:	69 5f       	subi	r22, 0xF9	; 249
     ba6:	7f 4f       	sbci	r23, 0xFF	; 255
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	0e 94 ea 38 	call	0x71d4	; 0x71d4 <lora_driver_sent_upload_message>
     bae:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <lora_driver_map_return_code_to_text>
     bb2:	29 2f       	mov	r18, r25
     bb4:	2f 93       	push	r18
     bb6:	8f 93       	push	r24
     bb8:	8a e6       	ldi	r24, 0x6A	; 106
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	89 2f       	mov	r24, r25
     bbe:	8f 93       	push	r24
     bc0:	8a e6       	ldi	r24, 0x6A	; 106
     bc2:	93 e0       	ldi	r25, 0x03	; 3
     bc4:	8f 93       	push	r24
     bc6:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
		lora_driver_sent_upload_message(false, &uplink_lora_payoad)));
		xSemaphoreGive(_xPrintfSemaphore);
     bd2:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <_xPrintfSemaphore>
     bd6:	90 91 2c 07 	lds	r25, 0x072C	; 0x80072c <_xPrintfSemaphore+0x1>
     bda:	00 e0       	ldi	r16, 0x00	; 0
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	a9 01       	movw	r20, r18
     be2:	60 e0       	ldi	r22, 0x00	; 0
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
	}
}
     bea:	00 00       	nop
     bec:	df 91       	pop	r29
     bee:	cf 91       	pop	r28
     bf0:	0f 91       	pop	r16
     bf2:	08 95       	ret

00000bf4 <vALoraTask>:

void vALoraTask(void *pvParameters)
{
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	1f 92       	push	r1
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	9a 83       	std	Y+2, r25	; 0x02
     c02:	89 83       	std	Y+1, r24	; 0x01
	//(void*)pvParameters;

	lora_driver_reset_rn2483(1);
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	0e 94 46 38 	call	0x708c	; 0x708c <lora_driver_reset_rn2483>
	vTaskDelay(2);
     c0a:	62 e0       	ldi	r22, 0x02	; 2
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
	lora_driver_reset_rn2483(0);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 46 38 	call	0x708c	; 0x708c <lora_driver_reset_rn2483>
	vTaskDelay(150);
     c1c:	66 e9       	ldi	r22, 0x96	; 150
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>

	lora_driver_flush_buffers();
     c28:	0e 94 fc 37 	call	0x6ff8	; 0x6ff8 <lora_driver_flush_buffers>
	_setup_lora_driver();
     c2c:	6d de       	rcall	.-806    	; 0x908 <_setup_lora_driver>

	vTaskDelay(150);
     c2e:	66 e9       	ldi	r22, 0x96	; 150
     c30:	70 e0       	ldi	r23, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>

	static lora_payload_t _lorapayload;

	for (;;)
	{
		if (_receivingQueue != NULL)
     c3a:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_receivingQueue>
     c3e:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <_receivingQueue+0x1>
     c42:	89 2b       	or	r24, r25
     c44:	d1 f3       	breq	.-12     	; 0xc3a <vALoraTask+0x46>
		{
			if (xQueueReceive(_receivingQueue,
     c46:	80 91 29 07 	lds	r24, 0x0729	; 0x800729 <_receivingQueue>
     c4a:	90 91 2a 07 	lds	r25, 0x072A	; 0x80072a <_receivingQueue+0x1>
     c4e:	2f ef       	ldi	r18, 0xFF	; 255
     c50:	3f ef       	ldi	r19, 0xFF	; 255
     c52:	a9 01       	movw	r20, r18
     c54:	63 e9       	ldi	r22, 0x93	; 147
     c56:	77 e0       	ldi	r23, 0x07	; 7
     c58:	0e 94 f7 15 	call	0x2bee	; 0x2bee <xQueueReceive>
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	69 f7       	brne	.-38     	; 0xc3a <vALoraTask+0x46>
			&_lorapayload,
			portMAX_DELAY) == pdPASS)
			{
				//if (_lorapayload != NULL)
				//{
					loraDriver_sent_upload_message(_lorapayload);
     c60:	8d b7       	in	r24, 0x3d	; 61
     c62:	9e b7       	in	r25, 0x3e	; 62
     c64:	46 97       	sbiw	r24, 0x16	; 22
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	9e bf       	out	0x3e, r25	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	8d bf       	out	0x3d, r24	; 61
     c70:	8d b7       	in	r24, 0x3d	; 61
     c72:	9e b7       	in	r25, 0x3e	; 62
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	26 e1       	ldi	r18, 0x16	; 22
     c78:	e3 e9       	ldi	r30, 0x93	; 147
     c7a:	f7 e0       	ldi	r31, 0x07	; 7
     c7c:	dc 01       	movw	r26, r24
     c7e:	01 90       	ld	r0, Z+
     c80:	0d 92       	st	X+, r0
     c82:	2a 95       	dec	r18
     c84:	e1 f7       	brne	.-8      	; 0xc7e <vALoraTask+0x8a>
     c86:	76 df       	rcall	.-276    	; 0xb74 <loraDriver_sent_upload_message>
     c88:	8d b7       	in	r24, 0x3d	; 61
     c8a:	9e b7       	in	r25, 0x3e	; 62
     c8c:	46 96       	adiw	r24, 0x16	; 22
     c8e:	0f b6       	in	r0, 0x3f	; 63
     c90:	f8 94       	cli
     c92:	de bf       	out	0x3e, r29	; 62
     c94:	0f be       	out	0x3f, r0	; 63
     c96:	cd bf       	out	0x3d, r28	; 61
						xSemaphoreGive(_xPrintfSemaphore);
					}
				}*/
			}
		}
	}
     c98:	d0 cf       	rjmp	.-96     	; 0xc3a <vALoraTask+0x46>

00000c9a <_init_hal>:
	vTaskDelete(_lora_task_handle);
}

static void _init_hal(){
     c9a:	cf 93       	push	r28
     c9c:	df 93       	push	r29
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	hal_create(LED_TASK_PRIORITY);
     ca2:	87 e0       	ldi	r24, 0x07	; 7
     ca4:	0e 94 66 34 	call	0x68cc	; 0x68cc <hal_create>
	lora_driver_create(LORA_USART, NULL);
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	0e 94 03 38 	call	0x7006	; 0x7006 <lora_driver_create>
}
     cb2:	00 00       	nop
     cb4:	df 91       	pop	r29
     cb6:	cf 91       	pop	r28
     cb8:	08 95       	ret

00000cba <loraSensor_create>:

void loraSensor_create(QueueHandle_t pQueue, SemaphoreHandle_t pPrintfSemaphore)
{
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <loraSensor_create+0xc>
     cc6:	1f 92       	push	r1
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9a 83       	std	Y+2, r25	; 0x02
     cce:	89 83       	std	Y+1, r24	; 0x01
     cd0:	7c 83       	std	Y+4, r23	; 0x04
     cd2:	6b 83       	std	Y+3, r22	; 0x03
	_receivingQueue = pQueue;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	90 93 2a 07 	sts	0x072A, r25	; 0x80072a <_receivingQueue+0x1>
     cdc:	80 93 29 07 	sts	0x0729, r24	; 0x800729 <_receivingQueue>
	_xPrintfSemaphore = pPrintfSemaphore;
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	90 93 2c 07 	sts	0x072C, r25	; 0x80072c <_xPrintfSemaphore+0x1>
     ce8:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <_xPrintfSemaphore>
	_lora_task_handle = NULL;
     cec:	10 92 2e 07 	sts	0x072E, r1	; 0x80072e <_lora_task_handle+0x1>
     cf0:	10 92 2d 07 	sts	0x072D, r1	; 0x80072d <_lora_task_handle>

	_init_hal();
     cf4:	d2 df       	rcall	.-92     	; 0xc9a <_init_hal>

	xTaskCreate(
     cf6:	0f 2e       	mov	r0, r31
     cf8:	fd e2       	ldi	r31, 0x2D	; 45
     cfa:	ef 2e       	mov	r14, r31
     cfc:	f7 e0       	ldi	r31, 0x07	; 7
     cfe:	ff 2e       	mov	r15, r31
     d00:	f0 2d       	mov	r31, r0
     d02:	03 e0       	ldi	r16, 0x03	; 3
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	48 e8       	ldi	r20, 0x88	; 136
     d0a:	51 e0       	ldi	r21, 0x01	; 1
     d0c:	6f e7       	ldi	r22, 0x7F	; 127
     d0e:	73 e0       	ldi	r23, 0x03	; 3
     d10:	8a ef       	ldi	r24, 0xFA	; 250
     d12:	95 e0       	ldi	r25, 0x05	; 5
     d14:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
	(const portCHAR *)LORA_TASK_NAME, /* String with name of task. */
	configMINIMAL_STACK_SIZE + 200,	  /* Stack size in words. */
	NULL,							  /* Parameter passed as input of the task */
	LORAWAN_TASK_PRIORITY,			  /* Priority of the task. */
	&_lora_task_handle);			  /* Task handle. */
     d18:	00 00       	nop
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	0f 91       	pop	r16
     d28:	ff 90       	pop	r15
     d2a:	ef 90       	pop	r14
     d2c:	08 95       	ret

00000d2e <vASensorControlTask>:
static EventGroupHandle_t _event_group_measure = NULL;
static EventGroupHandle_t _event_group_new_data = NULL;
static QueueHandle_t _sendingQueue = NULL;

void vASensorControlTask(void *pvParameters)
{
     d2e:	cf 92       	push	r12
     d30:	df 92       	push	r13
     d32:	ef 92       	push	r14
     d34:	ff 92       	push	r15
     d36:	0f 93       	push	r16
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	a6 97       	sbiw	r28, 0x26	; 38
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
     d4c:	9e a3       	std	Y+38, r25	; 0x26
     d4e:	8d a3       	std	Y+37, r24	; 0x25
	for (;;)
	{
		//set bits to measure
		xEventGroupSetBits(_event_group_measure,
     d50:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_event_group_measure>
     d54:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <_event_group_measure+0x1>
     d58:	47 e0       	ldi	r20, 0x07	; 7
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	70 e0       	ldi	r23, 0x00	; 0
     d60:	70 d4       	rcall	.+2272   	; 0x1642 <xEventGroupSetBits>
		((TEMPERATURE_HUMIDITY_MEASURE_BIT) | (CO2_MEASURE_BIT) | (LIGHT_MEASURE_BIT)));

		/*CO2_READY_BIT | TEMPERATURE_HUMIDITY_READY_BIT |    */

		//wait for new data bits
		xEventGroupWaitBits(
     d62:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <_event_group_new_data>
     d66:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <_event_group_new_data+0x1>
     d6a:	cc 24       	eor	r12, r12
     d6c:	ca 94       	dec	r12
     d6e:	dc 2c       	mov	r13, r12
     d70:	76 01       	movw	r14, r12
     d72:	01 e0       	ldi	r16, 0x01	; 1
     d74:	21 e0       	ldi	r18, 0x01	; 1
     d76:	47 e0       	ldi	r20, 0x07	; 7
     d78:	50 e0       	ldi	r21, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	2a d3       	rcall	.+1620   	; 0x13d4 <xEventGroupWaitBits>
		_event_group_new_data,
		((TEMPERATURE_HUMIDITY_READY_BIT) | (CO2_READY_BIT) | (LIGHT_READY_BIT)),
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		printf("here\n");
     d80:	87 e8       	ldi	r24, 0x87	; 135
     d82:	93 e0       	ldi	r25, 0x03	; 3
     d84:	0e 94 0e 4b 	call	0x961c	; 0x961c <puts>
		//get co2
		uint16_t _co2 = co2sensor_getCo2();
     d88:	a8 dc       	rcall	.-1712   	; 0x6da <co2sensor_getCo2>
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
		
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     d8e:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     d92:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     d96:	4f ef       	ldi	r20, 0xFF	; 255
     d98:	5f ef       	ldi	r21, 0xFF	; 255
     d9a:	ba 01       	movw	r22, r20
     d9c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		printf("Co2 %d \n", _co2);
     da0:	8a 81       	ldd	r24, Y+2	; 0x02
     da2:	8f 93       	push	r24
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	8f 93       	push	r24
     da8:	8c e8       	ldi	r24, 0x8C	; 140
     daa:	93 e0       	ldi	r25, 0x03	; 3
     dac:	89 2f       	mov	r24, r25
     dae:	8f 93       	push	r24
     db0:	8c e8       	ldi	r24, 0x8C	; 140
     db2:	93 e0       	ldi	r25, 0x03	; 3
     db4:	8f 93       	push	r24
     db6:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	0f 90       	pop	r0
     dc0:	0f 90       	pop	r0
		xSemaphoreGive(_xPrintfSemaphore);
     dc2:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     dc6:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     dca:	00 e0       	ldi	r16, 0x00	; 0
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	a9 01       	movw	r20, r18
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		
		//get temperature
		float _temperature = temperatureHumiditySensor_getTemperature();
     dda:	85 d2       	rcall	.+1290   	; 0x12e6 <temperatureHumiditySensor_getTemperature>
     ddc:	dc 01       	movw	r26, r24
     dde:	cb 01       	movw	r24, r22
     de0:	8b 83       	std	Y+3, r24	; 0x03
     de2:	9c 83       	std	Y+4, r25	; 0x04
     de4:	ad 83       	std	Y+5, r26	; 0x05
     de6:	be 83       	std	Y+6, r27	; 0x06
		
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     de8:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     dec:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     df0:	4f ef       	ldi	r20, 0xFF	; 255
     df2:	5f ef       	ldi	r21, 0xFF	; 255
     df4:	ba 01       	movw	r22, r20
     df6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		printf("Temperature %.2f \n", _temperature);
     dfa:	8e 81       	ldd	r24, Y+6	; 0x06
     dfc:	8f 93       	push	r24
     dfe:	8d 81       	ldd	r24, Y+5	; 0x05
     e00:	8f 93       	push	r24
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	8f 93       	push	r24
     e06:	8b 81       	ldd	r24, Y+3	; 0x03
     e08:	8f 93       	push	r24
     e0a:	85 e9       	ldi	r24, 0x95	; 149
     e0c:	93 e0       	ldi	r25, 0x03	; 3
     e0e:	89 2f       	mov	r24, r25
     e10:	8f 93       	push	r24
     e12:	85 e9       	ldi	r24, 0x95	; 149
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	8f 93       	push	r24
     e18:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
		xSemaphoreGive(_xPrintfSemaphore);
     e28:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     e2c:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     e30:	00 e0       	ldi	r16, 0x00	; 0
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	a9 01       	movw	r20, r18
     e38:	60 e0       	ldi	r22, 0x00	; 0
     e3a:	70 e0       	ldi	r23, 0x00	; 0
     e3c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		
		
		//get humidity
		float _humidity = temperatureHumiditySensor_getHumidity();
     e40:	41 d2       	rcall	.+1154   	; 0x12c4 <temperatureHumiditySensor_getHumidity>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	8f 83       	std	Y+7, r24	; 0x07
     e48:	98 87       	std	Y+8, r25	; 0x08
     e4a:	a9 87       	std	Y+9, r26	; 0x09
     e4c:	ba 87       	std	Y+10, r27	; 0x0a
		
		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     e4e:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     e52:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     e56:	4f ef       	ldi	r20, 0xFF	; 255
     e58:	5f ef       	ldi	r21, 0xFF	; 255
     e5a:	ba 01       	movw	r22, r20
     e5c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		printf("Humidity %.2f \n", _humidity);
     e60:	8a 85       	ldd	r24, Y+10	; 0x0a
     e62:	8f 93       	push	r24
     e64:	89 85       	ldd	r24, Y+9	; 0x09
     e66:	8f 93       	push	r24
     e68:	88 85       	ldd	r24, Y+8	; 0x08
     e6a:	8f 93       	push	r24
     e6c:	8f 81       	ldd	r24, Y+7	; 0x07
     e6e:	8f 93       	push	r24
     e70:	88 ea       	ldi	r24, 0xA8	; 168
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	89 2f       	mov	r24, r25
     e76:	8f 93       	push	r24
     e78:	88 ea       	ldi	r24, 0xA8	; 168
     e7a:	93 e0       	ldi	r25, 0x03	; 3
     e7c:	8f 93       	push	r24
     e7e:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
		xSemaphoreGive(_xPrintfSemaphore);
     e8e:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     e92:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     e96:	00 e0       	ldi	r16, 0x00	; 0
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	a9 01       	movw	r20, r18
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		
		//get light
		float _lightInLux = LightSensor_getLightMeasurement();
     ea6:	1f dd       	rcall	.-1474   	; 0x8e6 <LightSensor_getLightMeasurement>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	8b 87       	std	Y+11, r24	; 0x0b
     eae:	9c 87       	std	Y+12, r25	; 0x0c
     eb0:	ad 87       	std	Y+13, r26	; 0x0d
     eb2:	be 87       	std	Y+14, r27	; 0x0e

		xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
     eb4:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     eb8:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     ebc:	4f ef       	ldi	r20, 0xFF	; 255
     ebe:	5f ef       	ldi	r21, 0xFF	; 255
     ec0:	ba 01       	movw	r22, r20
     ec2:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
		printf("Light %.2f \n", _lightInLux);
     ec6:	8e 85       	ldd	r24, Y+14	; 0x0e
     ec8:	8f 93       	push	r24
     eca:	8d 85       	ldd	r24, Y+13	; 0x0d
     ecc:	8f 93       	push	r24
     ece:	8c 85       	ldd	r24, Y+12	; 0x0c
     ed0:	8f 93       	push	r24
     ed2:	8b 85       	ldd	r24, Y+11	; 0x0b
     ed4:	8f 93       	push	r24
     ed6:	88 eb       	ldi	r24, 0xB8	; 184
     ed8:	93 e0       	ldi	r25, 0x03	; 3
     eda:	89 2f       	mov	r24, r25
     edc:	8f 93       	push	r24
     ede:	88 eb       	ldi	r24, 0xB8	; 184
     ee0:	93 e0       	ldi	r25, 0x03	; 3
     ee2:	8f 93       	push	r24
     ee4:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <printf>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
		xSemaphoreGive(_xPrintfSemaphore);
     ef4:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     ef8:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     efc:	00 e0       	ldi	r16, 0x00	; 0
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	a9 01       	movw	r20, r18
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		
		SensorDataPackageHandler_setCo2ppm(_co2);
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
		SensorDataPackageHandler_setTemperature(_temperature);
     f10:	1c da       	rcall	.-3016   	; 0x34a <SensorDataPackageHandler_setCo2ppm>
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	ad 81       	ldd	r26, Y+5	; 0x05
     f18:	be 81       	ldd	r27, Y+6	; 0x06
     f1a:	bc 01       	movw	r22, r24
     f1c:	cd 01       	movw	r24, r26
		SensorDataPackageHandler_setHumidity(_humidity);
     f1e:	47 da       	rcall	.-2930   	; 0x3ae <SensorDataPackageHandler_setTemperature>
     f20:	8f 81       	ldd	r24, Y+7	; 0x07
     f22:	98 85       	ldd	r25, Y+8	; 0x08
     f24:	a9 85       	ldd	r26, Y+9	; 0x09
     f26:	ba 85       	ldd	r27, Y+10	; 0x0a
     f28:	bc 01       	movw	r22, r24
     f2a:	cd 01       	movw	r24, r26
		SensorDataPackageHandler_setLight(_lightInLux);
     f2c:	22 da       	rcall	.-3004   	; 0x372 <SensorDataPackageHandler_setHumidity>
     f2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     f30:	9c 85       	ldd	r25, Y+12	; 0x0c
     f32:	ad 85       	ldd	r26, Y+13	; 0x0d
     f34:	be 85       	ldd	r27, Y+14	; 0x0e
     f36:	bc 01       	movw	r22, r24
     f38:	cd 01       	movw	r24, r26
		
		lora_payload_t _lora_payload = SensorDataPackageHandler_getLoraPayload(LORA_PAYLOAD_PORT_NO);
     f3a:	57 da       	rcall	.-2898   	; 0x3ea <SensorDataPackageHandler_setLight>
     f3c:	ce 01       	movw	r24, r28
     f3e:	0f 96       	adiw	r24, 0x0f	; 15
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	71 da       	rcall	.-2846   	; 0x426 <SensorDataPackageHandler_getLoraPayload>

		xQueueSend(_sendingQueue, //queue handler
     f44:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <_sendingQueue>
     f48:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <_sendingQueue+0x1>
     f4c:	be 01       	movw	r22, r28
     f4e:	61 5f       	subi	r22, 0xF1	; 241
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	00 e0       	ldi	r16, 0x00	; 0
     f54:	2f ef       	ldi	r18, 0xFF	; 255
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	a9 01       	movw	r20, r18
     f5a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		(void *)&_lora_payload,
		portMAX_DELAY);

		vTaskDelay(TIME_DELAY_BETWEEN_MEASUREMENTS);
     f5e:	6e e3       	ldi	r22, 0x3E	; 62
     f60:	79 e4       	ldi	r23, 0x49	; 73
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
	}
     f6a:	f2 ce       	rjmp	.-540    	; 0xd50 <vASensorControlTask+0x22>

00000f6c <sensorControl_create>:
	vTaskDelete(_sensor_control_task_handle);
}

void sensorControl_create()
{
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
	if (_xPrintfSemaphore == NULL)
     f7a:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     f7e:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     f82:	89 2b       	or	r24, r25
     f84:	c9 f4       	brne	.+50     	; 0xfb8 <sensorControl_create+0x4c>
	{
		_xPrintfSemaphore = xSemaphoreCreateMutex();
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	0e 94 c5 14 	call	0x298a	; 0x298a <xQueueCreateMutex>
     f8c:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <_xPrintfSemaphore+0x1>
     f90:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <_xPrintfSemaphore>
		if (_xPrintfSemaphore != NULL)
     f94:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     f98:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     f9c:	89 2b       	or	r24, r25
     f9e:	61 f0       	breq	.+24     	; 0xfb8 <sensorControl_create+0x4c>
		xSemaphoreGive(_xPrintfSemaphore);
     fa0:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
     fa4:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
     fa8:	00 e0       	ldi	r16, 0x00	; 0
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	a9 01       	movw	r20, r18
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
	}

	if (_event_group_measure == NULL)
     fb8:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_event_group_measure>
     fbc:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <_event_group_measure+0x1>
     fc0:	89 2b       	or	r24, r25
     fc2:	29 f4       	brne	.+10     	; 0xfce <sensorControl_create+0x62>
	_event_group_measure = xEventGroupCreate();
     fc4:	e6 d1       	rcall	.+972    	; 0x1392 <xEventGroupCreate>
     fc6:	90 93 ae 07 	sts	0x07AE, r25	; 0x8007ae <_event_group_measure+0x1>
     fca:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <_event_group_measure>
	//_event_group_measure != NULL ? printf("%s :: SUCCESS :: created event group measure\n", SENSOR_CONTROL_TAG) : printf("%s :: ERROR :: creation of event group measure failed\n", SENSOR_CONTROL_TAG);

	if (_event_group_new_data == NULL)
     fce:	80 91 af 07 	lds	r24, 0x07AF	; 0x8007af <_event_group_new_data>
     fd2:	90 91 b0 07 	lds	r25, 0x07B0	; 0x8007b0 <_event_group_new_data+0x1>
     fd6:	89 2b       	or	r24, r25
	_event_group_new_data = xEventGroupCreate();
     fd8:	29 f4       	brne	.+10     	; 0xfe4 <sensorControl_create+0x78>
     fda:	db d1       	rcall	.+950    	; 0x1392 <xEventGroupCreate>
     fdc:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <_event_group_new_data+0x1>
     fe0:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <_event_group_new_data>
	//_event_group_new_data != NULL ? printf("%s :: SUCCESS :: created event group new data\n", SENSOR_CONTROL_TAG) : printf("%s :: ERROR :: creation of event group new data failed\n", SENSOR_CONTROL_TAG);

	if (_sendingQueue == NULL)
     fe4:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <_sendingQueue>
     fe8:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <_sendingQueue+0x1>
     fec:	89 2b       	or	r24, r25
     fee:	49 f4       	brne	.+18     	; 0x1002 <sensorControl_create+0x96>
	_sendingQueue = xQueueCreate(1, sizeof(lora_payload_t));
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	66 e1       	ldi	r22, 0x16	; 22
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	0e 94 08 14 	call	0x2810	; 0x2810 <xQueueGenericCreate>
     ffa:	90 93 b2 07 	sts	0x07B2, r25	; 0x8007b2 <_sendingQueue+0x1>
     ffe:	80 93 b1 07 	sts	0x07B1, r24	; 0x8007b1 <_sendingQueue>
	//_sendingQueue != NULL ? printf("%s :: SUCCESS :: created queue\n", SENSOR_CONTROL_TAG) : printf("%s :: ERROR :: creation of queue\n", SENSOR_CONTROL_TAG);

	//create lora driver
	loraSensor_create(_sendingQueue, _xPrintfSemaphore);
    1002:	20 91 ab 07 	lds	r18, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
    1006:	30 91 ac 07 	lds	r19, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
    100a:	80 91 b1 07 	lds	r24, 0x07B1	; 0x8007b1 <_sendingQueue>
    100e:	90 91 b2 07 	lds	r25, 0x07B2	; 0x8007b2 <_sendingQueue+0x1>
    1012:	b9 01       	movw	r22, r18
    1014:	52 de       	rcall	.-860    	; 0xcba <loraSensor_create>

	//create co2
	co2Sensor_create(_event_group_measure, _event_group_new_data, _xPrintfSemaphore);
    1016:	40 91 ab 07 	lds	r20, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
    101a:	50 91 ac 07 	lds	r21, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
    101e:	20 91 af 07 	lds	r18, 0x07AF	; 0x8007af <_event_group_new_data>
    1022:	30 91 b0 07 	lds	r19, 0x07B0	; 0x8007b0 <_event_group_new_data+0x1>
    1026:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_event_group_measure>
    102a:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <_event_group_measure+0x1>
    102e:	b9 01       	movw	r22, r18
    1030:	0c db       	rcall	.-2536   	; 0x64a <co2Sensor_create>

	//create humidity/temperature
	temperatureHumiditySensor_create(_event_group_measure, _event_group_new_data, _xPrintfSemaphore);
    1032:	40 91 ab 07 	lds	r20, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
    1036:	50 91 ac 07 	lds	r21, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
    103a:	20 91 af 07 	lds	r18, 0x07AF	; 0x8007af <_event_group_new_data>
    103e:	30 91 b0 07 	lds	r19, 0x07B0	; 0x8007b0 <_event_group_new_data+0x1>
    1042:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_event_group_measure>
    1046:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <_event_group_measure+0x1>
    104a:	b9 01       	movw	r22, r18
    104c:	e7 d0       	rcall	.+462    	; 0x121c <temperatureHumiditySensor_create>

	//create light
	LightSensor_create(_event_group_measure, _event_group_new_data, _xPrintfSemaphore);
    104e:	40 91 ab 07 	lds	r20, 0x07AB	; 0x8007ab <_xPrintfSemaphore>
    1052:	50 91 ac 07 	lds	r21, 0x07AC	; 0x8007ac <_xPrintfSemaphore+0x1>
    1056:	20 91 af 07 	lds	r18, 0x07AF	; 0x8007af <_event_group_new_data>
    105a:	30 91 b0 07 	lds	r19, 0x07B0	; 0x8007b0 <_event_group_new_data+0x1>
    105e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <_event_group_measure>
    1062:	90 91 ae 07 	lds	r25, 0x07AE	; 0x8007ae <_event_group_measure+0x1>
    1066:	b9 01       	movw	r22, r18
    1068:	f2 db       	rcall	.-2076   	; 0x84e <LightSensor_create>

	_sensor_control_task_handle = NULL;
    106a:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <_sensor_control_task_handle+0x1>
    106e:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <_sensor_control_task_handle>
	//create the task
	xTaskCreate(
    1072:	0f 2e       	mov	r0, r31
    1074:	f9 ea       	ldi	r31, 0xA9	; 169
    1076:	ef 2e       	mov	r14, r31
    1078:	f7 e0       	ldi	r31, 0x07	; 7
    107a:	ff 2e       	mov	r15, r31
    107c:	f0 2d       	mov	r31, r0
    107e:	01 e0       	ldi	r16, 0x01	; 1
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	44 e2       	ldi	r20, 0x24	; 36
    1086:	51 e0       	ldi	r21, 0x01	; 1
    1088:	65 ec       	ldi	r22, 0xC5	; 197
    108a:	73 e0       	ldi	r23, 0x03	; 3
    108c:	87 e9       	ldi	r24, 0x97	; 151
    108e:	96 e0       	ldi	r25, 0x06	; 6
    1090:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
	(const portCHAR *)SENSOR_CONTROL_TASK_NAME, /* String with name of task. */
	configMINIMAL_STACK_SIZE + 100,				/* Stack size in words. */
	NULL,										/* Parameter passed as input of the task */
	SENSOR_CONTROL_TASK_PRIORITY,				/* Priority of the task. */
	&_sensor_control_task_handle);				/* Task handle. */
    1094:	00 00       	nop
    1096:	df 91       	pop	r29
    1098:	cf 91       	pop	r28
    109a:	0f 91       	pop	r16
    109c:	ff 90       	pop	r15
    109e:	ef 90       	pop	r14
    10a0:	08 95       	ret

000010a2 <_setup_temperature_humidity_driver>:
static TaskHandle_t _temperatureHumiditySensorTaskHandle;
static float _lastMeasurementTemperature;
static float _lastMeasurementHumidity;

static void _setup_temperature_humidity_driver()
{
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	1f 92       	push	r1
    10a8:	1f 92       	push	r1
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	//set up driver
	int result = hih8120Create();
    10ae:	0e 94 c5 34 	call	0x698a	; 0x698a <hih8120Create>
    10b2:	88 2f       	mov	r24, r24
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	89 83       	std	Y+1, r24	; 0x01
	if(HIH8120_OK != result)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	9a 81       	ldd	r25, Y+2	; 0x02
    10be:	89 2b       	or	r24, r25
    10c0:	21 f0       	breq	.+8      	; 0x10ca <_setup_temperature_humidity_driver+0x28>
	{
		//printf("%s", TEMPERATURE_HUMIDITY_SENSOR_TAG);
		//printf(" :: FAILED DRIVER INITIALIZATION\n");
		exit(EXIT_FAILURE);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 ca 4b 	call	0x9794	; 0x9794 <_exit>
	}
	else
	{
		//printf("Init Temp + Hum driver\n");
	}
}
    10ca:	00 00       	nop
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	08 95       	ret

000010d6 <_TemperatureHumiditySensorTask>:

static hih8120DriverReturnCode_t result;

void _TemperatureHumiditySensorTask(void *pvParameters)
{
    10d6:	cf 92       	push	r12
    10d8:	df 92       	push	r13
    10da:	ef 92       	push	r14
    10dc:	ff 92       	push	r15
    10de:	0f 93       	push	r16
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <_TemperatureHumiditySensorTask+0x10>
    10e6:	1f 92       	push	r1
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
	for (;;)
	{
		//wait for the start measuring bit in the event group
		xEventGroupWaitBits(_eventGroupHandleMeasure,
    10f0:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <_eventGroupHandleMeasure>
    10f4:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <_eventGroupHandleMeasure+0x1>
    10f8:	cc 24       	eor	r12, r12
    10fa:	ca 94       	dec	r12
    10fc:	dc 2c       	mov	r13, r12
    10fe:	76 01       	movw	r14, r12
    1100:	01 e0       	ldi	r16, 0x01	; 1
    1102:	21 e0       	ldi	r18, 0x01	; 1
    1104:	41 e0       	ldi	r20, 0x01	; 1
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	63 d1       	rcall	.+710    	; 0x13d4 <xEventGroupWaitBits>
		pdTRUE,
		pdTRUE,
		portMAX_DELAY);
		
		//wake up the sensor from power down
		result = hih8120Wakeup();
    110e:	0e 94 dd 34 	call	0x69ba	; 0x69ba <hih8120Wakeup>
    1112:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <result>
		vTaskDelay(100/*pdMS_TO_TICKS(100UL)*/);
    1116:	64 e6       	ldi	r22, 0x64	; 100
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>

		if ( HIH8120_OK != result )
    1122:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <result>
    1126:	88 23       	and	r24, r24
    1128:	a9 f0       	breq	.+42     	; 0x1154 <_TemperatureHumiditySensorTask+0x7e>
		{
			xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
    112a:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <_xPrintfSemaphore>
    112e:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <_xPrintfSemaphore+0x1>
    1132:	4f ef       	ldi	r20, 0xFF	; 255
    1134:	5f ef       	ldi	r21, 0xFF	; 255
    1136:	ba 01       	movw	r22, r20
    1138:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
			//printf("%s", TEMPERATURE_HUMIDITY_SENSOR_TAG);
			//printf(" :: DRIVER CANNOT WAKE UP\n");
			xSemaphoreGive(_xPrintfSemaphore);
    113c:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <_xPrintfSemaphore>
    1140:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <_xPrintfSemaphore+0x1>
    1144:	00 e0       	ldi	r16, 0x00	; 0
    1146:	20 e0       	ldi	r18, 0x00	; 0
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		}
		
		//pool sensor for result
		result = hih8120Meassure();
    1154:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <hih8120Meassure>
    1158:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <result>
		//delay 50ms to wait for the sensor to be ready
		vTaskDelay(100/*pdMS_TO_TICKS(100UL)*/);
    115c:	64 e6       	ldi	r22, 0x64	; 100
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
		
		//check the result
		if ( HIH8120_OK !=  result)
    1168:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <result>
    116c:	88 23       	and	r24, r24
    116e:	a1 f1       	breq	.+104    	; 0x11d8 <_TemperatureHumiditySensorTask+0x102>
		{
			int count = 10;
    1170:	8a e0       	ldi	r24, 0x0A	; 10
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9a 83       	std	Y+2, r25	; 0x02
    1176:	89 83       	std	Y+1, r24	; 0x01
			while((HIH8120_TWI_BUSY == result) && count > 0)
    1178:	24 c0       	rjmp	.+72     	; 0x11c2 <_TemperatureHumiditySensorTask+0xec>
			{
				result = hih8120Meassure();
    117a:	0e 94 f2 34 	call	0x69e4	; 0x69e4 <hih8120Meassure>
    117e:	80 93 c3 07 	sts	0x07C3, r24	; 0x8007c3 <result>
				vTaskDelay(pdMS_TO_TICKS(20UL));				
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
				
				count--;
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
				xSemaphoreTake(_xPrintfSemaphore, portMAX_DELAY);
    1198:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <_xPrintfSemaphore>
    119c:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <_xPrintfSemaphore+0x1>
    11a0:	4f ef       	ldi	r20, 0xFF	; 255
    11a2:	5f ef       	ldi	r21, 0xFF	; 255
    11a4:	ba 01       	movw	r22, r20
    11a6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <xQueueSemaphoreTake>
				//printf("\n%s", TEMPERATURE_HUMIDITY_SENSOR_TAG);
				//printf(" :: FETCH TEMP/HUM FAILED\n");
				xSemaphoreGive(_xPrintfSemaphore);
    11aa:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <_xPrintfSemaphore>
    11ae:	90 91 b4 07 	lds	r25, 0x07B4	; 0x8007b4 <_xPrintfSemaphore+0x1>
    11b2:	00 e0       	ldi	r16, 0x00	; 0
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
		
		//check the result
		if ( HIH8120_OK !=  result)
		{
			int count = 10;
			while((HIH8120_TWI_BUSY == result) && count > 0)
    11c2:	80 91 c3 07 	lds	r24, 0x07C3	; 0x8007c3 <result>
    11c6:	83 30       	cpi	r24, 0x03	; 3
    11c8:	09 f0       	breq	.+2      	; 0x11cc <_TemperatureHumiditySensorTask+0xf6>
    11ca:	92 cf       	rjmp	.-220    	; 0x10f0 <_TemperatureHumiditySensorTask+0x1a>
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	18 16       	cp	r1, r24
    11d2:	19 06       	cpc	r1, r25
    11d4:	94 f2       	brlt	.-92     	; 0x117a <_TemperatureHumiditySensorTask+0xa4>
    11d6:	8c cf       	rjmp	.-232    	; 0x10f0 <_TemperatureHumiditySensorTask+0x1a>
			}
		}
		else
		{
			//get measurements
			_lastMeasurementTemperature = hih8120GetTemperature();
    11d8:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <hih8120GetTemperature>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <_lastMeasurementTemperature>
    11e4:	90 93 bc 07 	sts	0x07BC, r25	; 0x8007bc <_lastMeasurementTemperature+0x1>
    11e8:	a0 93 bd 07 	sts	0x07BD, r26	; 0x8007bd <_lastMeasurementTemperature+0x2>
    11ec:	b0 93 be 07 	sts	0x07BE, r27	; 0x8007be <_lastMeasurementTemperature+0x3>
			_lastMeasurementHumidity = hih8120GetHumidity();
    11f0:	0e 94 03 35 	call	0x6a06	; 0x6a06 <hih8120GetHumidity>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <_lastMeasurementHumidity>
    11fc:	90 93 c0 07 	sts	0x07C0, r25	; 0x8007c0 <_lastMeasurementHumidity+0x1>
    1200:	a0 93 c1 07 	sts	0x07C1, r26	; 0x8007c1 <_lastMeasurementHumidity+0x2>
    1204:	b0 93 c2 07 	sts	0x07C2, r27	; 0x8007c2 <_lastMeasurementHumidity+0x3>
			
			//set the bit to true to signalize that the measurement was completed
			xEventGroupSetBits(_eventGroupHandleNewData, TEMPERATURE_HUMIDITY_READY_BIT);
    1208:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <_eventGroupHandleNewData>
    120c:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <_eventGroupHandleNewData+0x1>
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	14 d2       	rcall	.+1064   	; 0x1642 <xEventGroupSetBits>
		}
	}
    121a:	6a cf       	rjmp	.-300    	; 0x10f0 <_TemperatureHumiditySensorTask+0x1a>

0000121c <temperatureHumiditySensor_create>:
	vTaskDelete(_temperatureHumiditySensorTaskHandle);
}

void temperatureHumiditySensor_create(EventGroupHandle_t pvEventHandleMeasure,
EventGroupHandle_t pvEventHandleNewData, SemaphoreHandle_t pvPrintfSemaphore)
{
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	00 d0       	rcall	.+0      	; 0x1228 <temperatureHumiditySensor_create+0xc>
    1228:	00 d0       	rcall	.+0      	; 0x122a <temperatureHumiditySensor_create+0xe>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	7c 83       	std	Y+4, r23	; 0x04
    1234:	6b 83       	std	Y+3, r22	; 0x03
    1236:	5e 83       	std	Y+6, r21	; 0x06
    1238:	4d 83       	std	Y+5, r20	; 0x05
	//setting variables
	_xPrintfSemaphore = pvPrintfSemaphore;
    123a:	8d 81       	ldd	r24, Y+5	; 0x05
    123c:	9e 81       	ldd	r25, Y+6	; 0x06
    123e:	90 93 b4 07 	sts	0x07B4, r25	; 0x8007b4 <_xPrintfSemaphore+0x1>
    1242:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <_xPrintfSemaphore>
	_eventGroupHandleMeasure = pvEventHandleMeasure;
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	90 93 b6 07 	sts	0x07B6, r25	; 0x8007b6 <_eventGroupHandleMeasure+0x1>
    124e:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <_eventGroupHandleMeasure>
	_eventGroupHandleNewData = pvEventHandleNewData;
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <_eventGroupHandleNewData+0x1>
    125a:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <_eventGroupHandleNewData>
	_lastMeasurementTemperature = 0.0;
    125e:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <_lastMeasurementTemperature>
    1262:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <_lastMeasurementTemperature+0x1>
    1266:	10 92 bd 07 	sts	0x07BD, r1	; 0x8007bd <_lastMeasurementTemperature+0x2>
    126a:	10 92 be 07 	sts	0x07BE, r1	; 0x8007be <_lastMeasurementTemperature+0x3>
	_lastMeasurementHumidity = 0.0;
    126e:	10 92 bf 07 	sts	0x07BF, r1	; 0x8007bf <_lastMeasurementHumidity>
    1272:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <_lastMeasurementHumidity+0x1>
    1276:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <_lastMeasurementHumidity+0x2>
    127a:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <_lastMeasurementHumidity+0x3>
	
	//starting the drivers
	_setup_temperature_humidity_driver();
    127e:	11 df       	rcall	.-478    	; 0x10a2 <_setup_temperature_humidity_driver>
	
	//task handler
	_temperatureHumiditySensorTaskHandle = NULL;
    1280:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <_temperatureHumiditySensorTaskHandle+0x1>
    1284:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <_temperatureHumiditySensorTaskHandle>
	
	//task creation
	xTaskCreate(_TemperatureHumiditySensorTask,
    1288:	0f 2e       	mov	r0, r31
    128a:	f9 eb       	ldi	r31, 0xB9	; 185
    128c:	ef 2e       	mov	r14, r31
    128e:	f7 e0       	ldi	r31, 0x07	; 7
    1290:	ff 2e       	mov	r15, r31
    1292:	f0 2d       	mov	r31, r0
    1294:	01 e0       	ldi	r16, 0x01	; 1
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 ec       	ldi	r20, 0xC0	; 192
    129c:	50 e0       	ldi	r21, 0x00	; 0
    129e:	6d ec       	ldi	r22, 0xCD	; 205
    12a0:	73 e0       	ldi	r23, 0x03	; 3
    12a2:	8b e6       	ldi	r24, 0x6B	; 107
    12a4:	98 e0       	ldi	r25, 0x08	; 8
    12a6:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
	(const portCHAR *)TEMPERATURE_HUMIDITY_SENSOR_TASK_NAME,
	configMINIMAL_STACK_SIZE,
	NULL,
	Temperature_Humidity_TASK_PRIORITY,
	&_temperatureHumiditySensorTaskHandle);
}
    12aa:	00 00       	nop
    12ac:	26 96       	adiw	r28, 0x06	; 6
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	08 95       	ret

000012c4 <temperatureHumiditySensor_getHumidity>:

float temperatureHumiditySensor_getHumidity()
{
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
	return _lastMeasurementHumidity;
    12cc:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <_lastMeasurementHumidity>
    12d0:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <_lastMeasurementHumidity+0x1>
    12d4:	a0 91 c1 07 	lds	r26, 0x07C1	; 0x8007c1 <_lastMeasurementHumidity+0x2>
    12d8:	b0 91 c2 07 	lds	r27, 0x07C2	; 0x8007c2 <_lastMeasurementHumidity+0x3>
}
    12dc:	bc 01       	movw	r22, r24
    12de:	cd 01       	movw	r24, r26
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <temperatureHumiditySensor_getTemperature>:

float temperatureHumiditySensor_getTemperature()
{
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	return _lastMeasurementTemperature;
    12ee:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <_lastMeasurementTemperature>
    12f2:	90 91 bc 07 	lds	r25, 0x07BC	; 0x8007bc <_lastMeasurementTemperature+0x1>
    12f6:	a0 91 bd 07 	lds	r26, 0x07BD	; 0x8007bd <_lastMeasurementTemperature+0x2>
    12fa:	b0 91 be 07 	lds	r27, 0x07BE	; 0x8007be <_lastMeasurementTemperature+0x3>
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	08 95       	ret

00001308 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	91 e0       	ldi	r25, 0x01	; 1
    1314:	27 e0       	ldi	r18, 0x07	; 7
    1316:	31 e0       	ldi	r19, 0x01	; 1
    1318:	f9 01       	movw	r30, r18
    131a:	20 81       	ld	r18, Z
    131c:	2f 60       	ori	r18, 0x0F	; 15
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
	 #endif
	 #endif
 }
    1322:	00 00       	nop
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <task_switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_in(uint8_t task_no) {
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	1f 92       	push	r1
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	89 83       	std	Y+1, r24	; 0x01
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
    1336:	88 e0       	ldi	r24, 0x08	; 8
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	28 e0       	ldi	r18, 0x08	; 8
    133c:	31 e0       	ldi	r19, 0x01	; 1
    133e:	f9 01       	movw	r30, r18
    1340:	20 81       	ld	r18, Z
    1342:	20 7f       	andi	r18, 0xF0	; 240
    1344:	fc 01       	movw	r30, r24
    1346:	20 83       	st	Z, r18
		 PORTK |= (task_no & 0b00001111);
    1348:	88 e0       	ldi	r24, 0x08	; 8
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	28 e0       	ldi	r18, 0x08	; 8
    134e:	31 e0       	ldi	r19, 0x01	; 1
    1350:	f9 01       	movw	r30, r18
    1352:	20 81       	ld	r18, Z
    1354:	32 2f       	mov	r19, r18
    1356:	29 81       	ldd	r18, Y+1	; 0x01
    1358:	2f 70       	andi	r18, 0x0F	; 15
    135a:	23 2b       	or	r18, r19
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18
		 #endif
	}
    1360:	00 00       	nop
    1362:	0f 90       	pop	r0
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <task_switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void task_switch_out(uint8_t task_no) {
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	1f 92       	push	r1
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	89 83       	std	Y+1, r24	; 0x01
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
    1376:	88 e0       	ldi	r24, 0x08	; 8
    1378:	91 e0       	ldi	r25, 0x01	; 1
    137a:	28 e0       	ldi	r18, 0x08	; 8
    137c:	31 e0       	ldi	r19, 0x01	; 1
    137e:	f9 01       	movw	r30, r18
    1380:	20 81       	ld	r18, Z
    1382:	20 7f       	andi	r18, 0xF0	; 240
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
		#endif
	}
    1388:	00 00       	nop
    138a:	0f 90       	pop	r0
    138c:	df 91       	pop	r29
    138e:	cf 91       	pop	r28
    1390:	08 95       	ret

00001392 <xEventGroupCreate>:
/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
    ( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
    1392:	cf 93       	push	r28
    1394:	df 93       	push	r29
    1396:	1f 92       	push	r1
    1398:	1f 92       	push	r1
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	80 e1       	ldi	r24, 0x10	; 16
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	aa d2       	rcall	.+1364   	; 0x18f8 <pvPortMalloc>
    13a4:	9a 83       	std	Y+2, r25	; 0x02
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	89 2b       	or	r24, r25
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <xEventGroupCreate+0x34>
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	9a 81       	ldd	r25, Y+2	; 0x02
    13b4:	fc 01       	movw	r30, r24
    13b6:	10 82       	st	Z, r1
    13b8:	11 82       	std	Z+1, r1	; 0x01
    13ba:	12 82       	std	Z+2, r1	; 0x02
    13bc:	13 82       	std	Z+3, r1	; 0x03
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	04 96       	adiw	r24, 0x04	; 4
    13c4:	32 d5       	rcall	.+2660   	; 0x1e2a <vListInitialise>
    13c6:	89 81       	ldd	r24, Y+1	; 0x01
    13c8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <xEventGroupWaitBits>:
    13d4:	cf 92       	push	r12
    13d6:	df 92       	push	r13
    13d8:	ef 92       	push	r14
    13da:	ff 92       	push	r15
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	6d 97       	sbiw	r28, 0x1d	; 29
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	9b 8b       	std	Y+19, r25	; 0x13
    13f6:	8a 8b       	std	Y+18, r24	; 0x12
    13f8:	4c 8b       	std	Y+20, r20	; 0x14
    13fa:	5d 8b       	std	Y+21, r21	; 0x15
    13fc:	6e 8b       	std	Y+22, r22	; 0x16
    13fe:	7f 8b       	std	Y+23, r23	; 0x17
    1400:	28 8f       	std	Y+24, r18	; 0x18
    1402:	09 8f       	std	Y+25, r16	; 0x19
    1404:	ca 8e       	std	Y+26, r12	; 0x1a
    1406:	db 8e       	std	Y+27, r13	; 0x1b
    1408:	ec 8e       	std	Y+28, r14	; 0x1c
    140a:	fd 8e       	std	Y+29, r15	; 0x1d
    140c:	8a 89       	ldd	r24, Y+18	; 0x12
    140e:	9b 89       	ldd	r25, Y+19	; 0x13
    1410:	9a 87       	std	Y+10, r25	; 0x0a
    1412:	89 87       	std	Y+9, r24	; 0x09
    1414:	1d 82       	std	Y+5, r1	; 0x05
    1416:	1e 82       	std	Y+6, r1	; 0x06
    1418:	1f 82       	std	Y+7, r1	; 0x07
    141a:	18 86       	std	Y+8, r1	; 0x08
    141c:	1b 86       	std	Y+11, r1	; 0x0b
    141e:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    1422:	89 85       	ldd	r24, Y+9	; 0x09
    1424:	9a 85       	ldd	r25, Y+10	; 0x0a
    1426:	fc 01       	movw	r30, r24
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	a2 81       	ldd	r26, Z+2	; 0x02
    142e:	b3 81       	ldd	r27, Z+3	; 0x03
    1430:	8c 87       	std	Y+12, r24	; 0x0c
    1432:	9d 87       	std	Y+13, r25	; 0x0d
    1434:	ae 87       	std	Y+14, r26	; 0x0e
    1436:	bf 87       	std	Y+15, r27	; 0x0f
    1438:	2c 89       	ldd	r18, Y+20	; 0x14
    143a:	3d 89       	ldd	r19, Y+21	; 0x15
    143c:	4e 89       	ldd	r20, Y+22	; 0x16
    143e:	5f 89       	ldd	r21, Y+23	; 0x17
    1440:	8c 85       	ldd	r24, Y+12	; 0x0c
    1442:	9d 85       	ldd	r25, Y+13	; 0x0d
    1444:	ae 85       	ldd	r26, Y+14	; 0x0e
    1446:	bf 85       	ldd	r27, Y+15	; 0x0f
    1448:	09 8d       	ldd	r16, Y+25	; 0x19
    144a:	bc 01       	movw	r22, r24
    144c:	cd 01       	movw	r24, r26
    144e:	07 d2       	rcall	.+1038   	; 0x185e <prvTestWaitCondition>
    1450:	88 8b       	std	Y+16, r24	; 0x10
    1452:	88 89       	ldd	r24, Y+16	; 0x10
    1454:	88 23       	and	r24, r24
    1456:	59 f1       	breq	.+86     	; 0x14ae <xEventGroupWaitBits+0xda>
    1458:	8c 85       	ldd	r24, Y+12	; 0x0c
    145a:	9d 85       	ldd	r25, Y+13	; 0x0d
    145c:	ae 85       	ldd	r26, Y+14	; 0x0e
    145e:	bf 85       	ldd	r27, Y+15	; 0x0f
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	9a 83       	std	Y+2, r25	; 0x02
    1464:	ab 83       	std	Y+3, r26	; 0x03
    1466:	bc 83       	std	Y+4, r27	; 0x04
    1468:	1a 8e       	std	Y+26, r1	; 0x1a
    146a:	1b 8e       	std	Y+27, r1	; 0x1b
    146c:	1c 8e       	std	Y+28, r1	; 0x1c
    146e:	1d 8e       	std	Y+29, r1	; 0x1d
    1470:	88 8d       	ldd	r24, Y+24	; 0x18
    1472:	88 23       	and	r24, r24
    1474:	09 f4       	brne	.+2      	; 0x1478 <xEventGroupWaitBits+0xa4>
    1476:	65 c0       	rjmp	.+202    	; 0x1542 <xEventGroupWaitBits+0x16e>
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	fc 01       	movw	r30, r24
    147e:	20 81       	ld	r18, Z
    1480:	31 81       	ldd	r19, Z+1	; 0x01
    1482:	42 81       	ldd	r20, Z+2	; 0x02
    1484:	53 81       	ldd	r21, Z+3	; 0x03
    1486:	8c 89       	ldd	r24, Y+20	; 0x14
    1488:	9d 89       	ldd	r25, Y+21	; 0x15
    148a:	ae 89       	ldd	r26, Y+22	; 0x16
    148c:	bf 89       	ldd	r27, Y+23	; 0x17
    148e:	80 95       	com	r24
    1490:	90 95       	com	r25
    1492:	a0 95       	com	r26
    1494:	b0 95       	com	r27
    1496:	82 23       	and	r24, r18
    1498:	93 23       	and	r25, r19
    149a:	a4 23       	and	r26, r20
    149c:	b5 23       	and	r27, r21
    149e:	29 85       	ldd	r18, Y+9	; 0x09
    14a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a2:	f9 01       	movw	r30, r18
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	b3 83       	std	Z+3, r27	; 0x03
    14ac:	4a c0       	rjmp	.+148    	; 0x1542 <xEventGroupWaitBits+0x16e>
    14ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14b2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    14b4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    14b6:	89 2b       	or	r24, r25
    14b8:	8a 2b       	or	r24, r26
    14ba:	8b 2b       	or	r24, r27
    14bc:	59 f4       	brne	.+22     	; 0x14d4 <xEventGroupWaitBits+0x100>
    14be:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14c2:	ae 85       	ldd	r26, Y+14	; 0x0e
    14c4:	bf 85       	ldd	r27, Y+15	; 0x0f
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	ab 83       	std	Y+3, r26	; 0x03
    14cc:	bc 83       	std	Y+4, r27	; 0x04
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	8b 87       	std	Y+11, r24	; 0x0b
    14d2:	37 c0       	rjmp	.+110    	; 0x1542 <xEventGroupWaitBits+0x16e>
    14d4:	88 8d       	ldd	r24, Y+24	; 0x18
    14d6:	88 23       	and	r24, r24
    14d8:	49 f0       	breq	.+18     	; 0x14ec <xEventGroupWaitBits+0x118>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	af 81       	ldd	r26, Y+7	; 0x07
    14e0:	b8 85       	ldd	r27, Y+8	; 0x08
    14e2:	b1 60       	ori	r27, 0x01	; 1
    14e4:	8d 83       	std	Y+5, r24	; 0x05
    14e6:	9e 83       	std	Y+6, r25	; 0x06
    14e8:	af 83       	std	Y+7, r26	; 0x07
    14ea:	b8 87       	std	Y+8, r27	; 0x08
    14ec:	89 8d       	ldd	r24, Y+25	; 0x19
    14ee:	88 23       	and	r24, r24
    14f0:	49 f0       	breq	.+18     	; 0x1504 <xEventGroupWaitBits+0x130>
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	af 81       	ldd	r26, Y+7	; 0x07
    14f8:	b8 85       	ldd	r27, Y+8	; 0x08
    14fa:	b4 60       	ori	r27, 0x04	; 4
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	af 83       	std	Y+7, r26	; 0x07
    1502:	b8 87       	std	Y+8, r27	; 0x08
    1504:	2c 89       	ldd	r18, Y+20	; 0x14
    1506:	3d 89       	ldd	r19, Y+21	; 0x15
    1508:	4e 89       	ldd	r20, Y+22	; 0x16
    150a:	5f 89       	ldd	r21, Y+23	; 0x17
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	af 81       	ldd	r26, Y+7	; 0x07
    1512:	b8 85       	ldd	r27, Y+8	; 0x08
    1514:	82 2b       	or	r24, r18
    1516:	93 2b       	or	r25, r19
    1518:	a4 2b       	or	r26, r20
    151a:	b5 2b       	or	r27, r21
    151c:	29 85       	ldd	r18, Y+9	; 0x09
    151e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1520:	f9 01       	movw	r30, r18
    1522:	34 96       	adiw	r30, 0x04	; 4
    1524:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1526:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1528:	4c 8d       	ldd	r20, Y+28	; 0x1c
    152a:	5d 8d       	ldd	r21, Y+29	; 0x1d
    152c:	89 01       	movw	r16, r18
    152e:	9a 01       	movw	r18, r20
    1530:	ac 01       	movw	r20, r24
    1532:	bd 01       	movw	r22, r26
    1534:	cf 01       	movw	r24, r30
    1536:	0e 94 45 24 	call	0x488a	; 0x488a <vTaskPlaceOnUnorderedEventList>
    153a:	19 82       	std	Y+1, r1	; 0x01
    153c:	1a 82       	std	Y+2, r1	; 0x02
    153e:	1b 82       	std	Y+3, r1	; 0x03
    1540:	1c 82       	std	Y+4, r1	; 0x04
    1542:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    1546:	89 8b       	std	Y+17, r24	; 0x11
    1548:	8a 8d       	ldd	r24, Y+26	; 0x1a
    154a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    154c:	ac 8d       	ldd	r26, Y+28	; 0x1c
    154e:	bd 8d       	ldd	r27, Y+29	; 0x1d
    1550:	89 2b       	or	r24, r25
    1552:	8a 2b       	or	r24, r26
    1554:	8b 2b       	or	r24, r27
    1556:	09 f4       	brne	.+2      	; 0x155a <xEventGroupWaitBits+0x186>
    1558:	5f c0       	rjmp	.+190    	; 0x1618 <xEventGroupWaitBits+0x244>
    155a:	89 89       	ldd	r24, Y+17	; 0x11
    155c:	88 23       	and	r24, r24
    155e:	09 f4       	brne	.+2      	; 0x1562 <xEventGroupWaitBits+0x18e>
    1560:	d9 d7       	rcall	.+4018   	; 0x2514 <vPortYield>
    1562:	0e 94 7f 29 	call	0x52fe	; 0x52fe <uxTaskResetEventItemValue>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	9a 83       	std	Y+2, r25	; 0x02
    156e:	ab 83       	std	Y+3, r26	; 0x03
    1570:	bc 83       	std	Y+4, r27	; 0x04
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	9a 81       	ldd	r25, Y+2	; 0x02
    1576:	ab 81       	ldd	r26, Y+3	; 0x03
    1578:	bc 81       	ldd	r27, Y+4	; 0x04
    157a:	88 27       	eor	r24, r24
    157c:	99 27       	eor	r25, r25
    157e:	aa 27       	eor	r26, r26
    1580:	b2 70       	andi	r27, 0x02	; 2
    1582:	89 2b       	or	r24, r25
    1584:	8a 2b       	or	r24, r26
    1586:	8b 2b       	or	r24, r27
    1588:	09 f0       	breq	.+2      	; 0x158c <xEventGroupWaitBits+0x1b8>
    158a:	3d c0       	rjmp	.+122    	; 0x1606 <xEventGroupWaitBits+0x232>
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	fc 01       	movw	r30, r24
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	a2 81       	ldd	r26, Z+2	; 0x02
    159e:	b3 81       	ldd	r27, Z+3	; 0x03
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	ab 83       	std	Y+3, r26	; 0x03
    15a6:	bc 83       	std	Y+4, r27	; 0x04
    15a8:	2c 89       	ldd	r18, Y+20	; 0x14
    15aa:	3d 89       	ldd	r19, Y+21	; 0x15
    15ac:	4e 89       	ldd	r20, Y+22	; 0x16
    15ae:	5f 89       	ldd	r21, Y+23	; 0x17
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	9a 81       	ldd	r25, Y+2	; 0x02
    15b4:	ab 81       	ldd	r26, Y+3	; 0x03
    15b6:	bc 81       	ldd	r27, Y+4	; 0x04
    15b8:	09 8d       	ldd	r16, Y+25	; 0x19
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	4f d1       	rcall	.+670    	; 0x185e <prvTestWaitCondition>
    15c0:	88 23       	and	r24, r24
    15c2:	e9 f0       	breq	.+58     	; 0x15fe <xEventGroupWaitBits+0x22a>
    15c4:	88 8d       	ldd	r24, Y+24	; 0x18
    15c6:	88 23       	and	r24, r24
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <xEventGroupWaitBits+0x22a>
    15ca:	89 85       	ldd	r24, Y+9	; 0x09
    15cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 81       	ld	r18, Z
    15d2:	31 81       	ldd	r19, Z+1	; 0x01
    15d4:	42 81       	ldd	r20, Z+2	; 0x02
    15d6:	53 81       	ldd	r21, Z+3	; 0x03
    15d8:	8c 89       	ldd	r24, Y+20	; 0x14
    15da:	9d 89       	ldd	r25, Y+21	; 0x15
    15dc:	ae 89       	ldd	r26, Y+22	; 0x16
    15de:	bf 89       	ldd	r27, Y+23	; 0x17
    15e0:	80 95       	com	r24
    15e2:	90 95       	com	r25
    15e4:	a0 95       	com	r26
    15e6:	b0 95       	com	r27
    15e8:	82 23       	and	r24, r18
    15ea:	93 23       	and	r25, r19
    15ec:	a4 23       	and	r26, r20
    15ee:	b5 23       	and	r27, r21
    15f0:	29 85       	ldd	r18, Y+9	; 0x09
    15f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f4:	f9 01       	movw	r30, r18
    15f6:	80 83       	st	Z, r24
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	a2 83       	std	Z+2, r26	; 0x02
    15fc:	b3 83       	std	Z+3, r27	; 0x03
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	8b 87       	std	Y+11, r24	; 0x0b
    1602:	0f 90       	pop	r0
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	ab 81       	ldd	r26, Y+3	; 0x03
    160c:	bc 81       	ldd	r27, Y+4	; 0x04
    160e:	bb 27       	eor	r27, r27
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	ab 83       	std	Y+3, r26	; 0x03
    1616:	bc 83       	std	Y+4, r27	; 0x04
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	ab 81       	ldd	r26, Y+3	; 0x03
    161e:	bc 81       	ldd	r27, Y+4	; 0x04
    1620:	bc 01       	movw	r22, r24
    1622:	cd 01       	movw	r24, r26
    1624:	6d 96       	adiw	r28, 0x1d	; 29
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
    1630:	df 91       	pop	r29
    1632:	cf 91       	pop	r28
    1634:	1f 91       	pop	r17
    1636:	0f 91       	pop	r16
    1638:	ff 90       	pop	r15
    163a:	ef 90       	pop	r14
    163c:	df 90       	pop	r13
    163e:	cf 90       	pop	r12
    1640:	08 95       	ret

00001642 <xEventGroupSetBits>:
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	6d 97       	sbiw	r28, 0x1d	; 29
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	de bf       	out	0x3e, r29	; 62
    1652:	0f be       	out	0x3f, r0	; 63
    1654:	cd bf       	out	0x3d, r28	; 61
    1656:	99 8f       	std	Y+25, r25	; 0x19
    1658:	88 8f       	std	Y+24, r24	; 0x18
    165a:	4a 8f       	std	Y+26, r20	; 0x1a
    165c:	5b 8f       	std	Y+27, r21	; 0x1b
    165e:	6c 8f       	std	Y+28, r22	; 0x1c
    1660:	7d 8f       	std	Y+29, r23	; 0x1d
    1662:	1b 82       	std	Y+3, r1	; 0x03
    1664:	1c 82       	std	Y+4, r1	; 0x04
    1666:	1d 82       	std	Y+5, r1	; 0x05
    1668:	1e 82       	std	Y+6, r1	; 0x06
    166a:	88 8d       	ldd	r24, Y+24	; 0x18
    166c:	99 8d       	ldd	r25, Y+25	; 0x19
    166e:	99 87       	std	Y+9, r25	; 0x09
    1670:	88 87       	std	Y+8, r24	; 0x08
    1672:	1f 82       	std	Y+7, r1	; 0x07
    1674:	88 85       	ldd	r24, Y+8	; 0x08
    1676:	99 85       	ldd	r25, Y+9	; 0x09
    1678:	04 96       	adiw	r24, 0x04	; 4
    167a:	9b 87       	std	Y+11, r25	; 0x0b
    167c:	8a 87       	std	Y+10, r24	; 0x0a
    167e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1680:	9b 85       	ldd	r25, Y+11	; 0x0b
    1682:	03 96       	adiw	r24, 0x03	; 3
    1684:	9d 87       	std	Y+13, r25	; 0x0d
    1686:	8c 87       	std	Y+12, r24	; 0x0c
    1688:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    168c:	8a 85       	ldd	r24, Y+10	; 0x0a
    168e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1690:	fc 01       	movw	r30, r24
    1692:	87 81       	ldd	r24, Z+7	; 0x07
    1694:	90 85       	ldd	r25, Z+8	; 0x08
    1696:	9a 83       	std	Y+2, r25	; 0x02
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	88 85       	ldd	r24, Y+8	; 0x08
    169c:	99 85       	ldd	r25, Y+9	; 0x09
    169e:	fc 01       	movw	r30, r24
    16a0:	20 81       	ld	r18, Z
    16a2:	31 81       	ldd	r19, Z+1	; 0x01
    16a4:	42 81       	ldd	r20, Z+2	; 0x02
    16a6:	53 81       	ldd	r21, Z+3	; 0x03
    16a8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16aa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    16ac:	ac 8d       	ldd	r26, Y+28	; 0x1c
    16ae:	bd 8d       	ldd	r27, Y+29	; 0x1d
    16b0:	82 2b       	or	r24, r18
    16b2:	93 2b       	or	r25, r19
    16b4:	a4 2b       	or	r26, r20
    16b6:	b5 2b       	or	r27, r21
    16b8:	28 85       	ldd	r18, Y+8	; 0x08
    16ba:	39 85       	ldd	r19, Y+9	; 0x09
    16bc:	f9 01       	movw	r30, r18
    16be:	80 83       	st	Z, r24
    16c0:	91 83       	std	Z+1, r25	; 0x01
    16c2:	a2 83       	std	Z+2, r26	; 0x02
    16c4:	b3 83       	std	Z+3, r27	; 0x03
    16c6:	95 c0       	rjmp	.+298    	; 0x17f2 <xEventGroupSetBits+0x1b0>
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	fc 01       	movw	r30, r24
    16ce:	84 81       	ldd	r24, Z+4	; 0x04
    16d0:	95 81       	ldd	r25, Z+5	; 0x05
    16d2:	9f 87       	std	Y+15, r25	; 0x0f
    16d4:	8e 87       	std	Y+14, r24	; 0x0e
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	fc 01       	movw	r30, r24
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	a2 81       	ldd	r26, Z+2	; 0x02
    16e2:	b3 81       	ldd	r27, Z+3	; 0x03
    16e4:	88 8b       	std	Y+16, r24	; 0x10
    16e6:	99 8b       	std	Y+17, r25	; 0x11
    16e8:	aa 8b       	std	Y+18, r26	; 0x12
    16ea:	bb 8b       	std	Y+19, r27	; 0x13
    16ec:	1f 82       	std	Y+7, r1	; 0x07
    16ee:	88 89       	ldd	r24, Y+16	; 0x10
    16f0:	99 89       	ldd	r25, Y+17	; 0x11
    16f2:	aa 89       	ldd	r26, Y+18	; 0x12
    16f4:	bb 89       	ldd	r27, Y+19	; 0x13
    16f6:	88 27       	eor	r24, r24
    16f8:	99 27       	eor	r25, r25
    16fa:	aa 27       	eor	r26, r26
    16fc:	8c 8b       	std	Y+20, r24	; 0x14
    16fe:	9d 8b       	std	Y+21, r25	; 0x15
    1700:	ae 8b       	std	Y+22, r26	; 0x16
    1702:	bf 8b       	std	Y+23, r27	; 0x17
    1704:	88 89       	ldd	r24, Y+16	; 0x10
    1706:	99 89       	ldd	r25, Y+17	; 0x11
    1708:	aa 89       	ldd	r26, Y+18	; 0x12
    170a:	bb 89       	ldd	r27, Y+19	; 0x13
    170c:	bb 27       	eor	r27, r27
    170e:	88 8b       	std	Y+16, r24	; 0x10
    1710:	99 8b       	std	Y+17, r25	; 0x11
    1712:	aa 8b       	std	Y+18, r26	; 0x12
    1714:	bb 8b       	std	Y+19, r27	; 0x13
    1716:	8c 89       	ldd	r24, Y+20	; 0x14
    1718:	9d 89       	ldd	r25, Y+21	; 0x15
    171a:	ae 89       	ldd	r26, Y+22	; 0x16
    171c:	bf 89       	ldd	r27, Y+23	; 0x17
    171e:	88 27       	eor	r24, r24
    1720:	99 27       	eor	r25, r25
    1722:	aa 27       	eor	r26, r26
    1724:	b4 70       	andi	r27, 0x04	; 4
    1726:	89 2b       	or	r24, r25
    1728:	8a 2b       	or	r24, r26
    172a:	8b 2b       	or	r24, r27
    172c:	b1 f4       	brne	.+44     	; 0x175a <xEventGroupSetBits+0x118>
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	99 85       	ldd	r25, Y+9	; 0x09
    1732:	fc 01       	movw	r30, r24
    1734:	20 81       	ld	r18, Z
    1736:	31 81       	ldd	r19, Z+1	; 0x01
    1738:	42 81       	ldd	r20, Z+2	; 0x02
    173a:	53 81       	ldd	r21, Z+3	; 0x03
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	99 89       	ldd	r25, Y+17	; 0x11
    1740:	aa 89       	ldd	r26, Y+18	; 0x12
    1742:	bb 89       	ldd	r27, Y+19	; 0x13
    1744:	82 23       	and	r24, r18
    1746:	93 23       	and	r25, r19
    1748:	a4 23       	and	r26, r20
    174a:	b5 23       	and	r27, r21
    174c:	89 2b       	or	r24, r25
    174e:	8a 2b       	or	r24, r26
    1750:	8b 2b       	or	r24, r27
    1752:	e9 f0       	breq	.+58     	; 0x178e <xEventGroupSetBits+0x14c>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	8f 83       	std	Y+7, r24	; 0x07
    1758:	1a c0       	rjmp	.+52     	; 0x178e <xEventGroupSetBits+0x14c>
    175a:	88 85       	ldd	r24, Y+8	; 0x08
    175c:	99 85       	ldd	r25, Y+9	; 0x09
    175e:	fc 01       	movw	r30, r24
    1760:	20 81       	ld	r18, Z
    1762:	31 81       	ldd	r19, Z+1	; 0x01
    1764:	42 81       	ldd	r20, Z+2	; 0x02
    1766:	53 81       	ldd	r21, Z+3	; 0x03
    1768:	88 89       	ldd	r24, Y+16	; 0x10
    176a:	99 89       	ldd	r25, Y+17	; 0x11
    176c:	aa 89       	ldd	r26, Y+18	; 0x12
    176e:	bb 89       	ldd	r27, Y+19	; 0x13
    1770:	28 23       	and	r18, r24
    1772:	39 23       	and	r19, r25
    1774:	4a 23       	and	r20, r26
    1776:	5b 23       	and	r21, r27
    1778:	88 89       	ldd	r24, Y+16	; 0x10
    177a:	99 89       	ldd	r25, Y+17	; 0x11
    177c:	aa 89       	ldd	r26, Y+18	; 0x12
    177e:	bb 89       	ldd	r27, Y+19	; 0x13
    1780:	28 17       	cp	r18, r24
    1782:	39 07       	cpc	r19, r25
    1784:	4a 07       	cpc	r20, r26
    1786:	5b 07       	cpc	r21, r27
    1788:	11 f4       	brne	.+4      	; 0x178e <xEventGroupSetBits+0x14c>
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	8f 81       	ldd	r24, Y+7	; 0x07
    1790:	88 23       	and	r24, r24
    1792:	59 f1       	breq	.+86     	; 0x17ea <xEventGroupSetBits+0x1a8>
    1794:	8c 89       	ldd	r24, Y+20	; 0x14
    1796:	9d 89       	ldd	r25, Y+21	; 0x15
    1798:	ae 89       	ldd	r26, Y+22	; 0x16
    179a:	bf 89       	ldd	r27, Y+23	; 0x17
    179c:	88 27       	eor	r24, r24
    179e:	99 27       	eor	r25, r25
    17a0:	aa 27       	eor	r26, r26
    17a2:	b1 70       	andi	r27, 0x01	; 1
    17a4:	89 2b       	or	r24, r25
    17a6:	8a 2b       	or	r24, r26
    17a8:	8b 2b       	or	r24, r27
    17aa:	81 f0       	breq	.+32     	; 0x17cc <xEventGroupSetBits+0x18a>
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	4d 81       	ldd	r20, Y+5	; 0x05
    17b2:	5e 81       	ldd	r21, Y+6	; 0x06
    17b4:	88 89       	ldd	r24, Y+16	; 0x10
    17b6:	99 89       	ldd	r25, Y+17	; 0x11
    17b8:	aa 89       	ldd	r26, Y+18	; 0x12
    17ba:	bb 89       	ldd	r27, Y+19	; 0x13
    17bc:	82 2b       	or	r24, r18
    17be:	93 2b       	or	r25, r19
    17c0:	a4 2b       	or	r26, r20
    17c2:	b5 2b       	or	r27, r21
    17c4:	8b 83       	std	Y+3, r24	; 0x03
    17c6:	9c 83       	std	Y+4, r25	; 0x04
    17c8:	ad 83       	std	Y+5, r26	; 0x05
    17ca:	be 83       	std	Y+6, r27	; 0x06
    17cc:	88 85       	ldd	r24, Y+8	; 0x08
    17ce:	99 85       	ldd	r25, Y+9	; 0x09
    17d0:	fc 01       	movw	r30, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	a2 81       	ldd	r26, Z+2	; 0x02
    17d8:	b3 81       	ldd	r27, Z+3	; 0x03
    17da:	b2 60       	ori	r27, 0x02	; 2
    17dc:	29 81       	ldd	r18, Y+1	; 0x01
    17de:	3a 81       	ldd	r19, Y+2	; 0x02
    17e0:	ac 01       	movw	r20, r24
    17e2:	bd 01       	movw	r22, r26
    17e4:	c9 01       	movw	r24, r18
    17e6:	0e 94 2d 25 	call	0x4a5a	; 0x4a5a <vTaskRemoveFromUnorderedEventList>
    17ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    17ee:	9a 83       	std	Y+2, r25	; 0x02
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	29 81       	ldd	r18, Y+1	; 0x01
    17f4:	3a 81       	ldd	r19, Y+2	; 0x02
    17f6:	8c 85       	ldd	r24, Y+12	; 0x0c
    17f8:	9d 85       	ldd	r25, Y+13	; 0x0d
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	09 f0       	breq	.+2      	; 0x1802 <xEventGroupSetBits+0x1c0>
    1800:	63 cf       	rjmp	.-314    	; 0x16c8 <xEventGroupSetBits+0x86>
    1802:	88 85       	ldd	r24, Y+8	; 0x08
    1804:	99 85       	ldd	r25, Y+9	; 0x09
    1806:	fc 01       	movw	r30, r24
    1808:	20 81       	ld	r18, Z
    180a:	31 81       	ldd	r19, Z+1	; 0x01
    180c:	42 81       	ldd	r20, Z+2	; 0x02
    180e:	53 81       	ldd	r21, Z+3	; 0x03
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	9c 81       	ldd	r25, Y+4	; 0x04
    1814:	ad 81       	ldd	r26, Y+5	; 0x05
    1816:	be 81       	ldd	r27, Y+6	; 0x06
    1818:	80 95       	com	r24
    181a:	90 95       	com	r25
    181c:	a0 95       	com	r26
    181e:	b0 95       	com	r27
    1820:	82 23       	and	r24, r18
    1822:	93 23       	and	r25, r19
    1824:	a4 23       	and	r26, r20
    1826:	b5 23       	and	r27, r21
    1828:	28 85       	ldd	r18, Y+8	; 0x08
    182a:	39 85       	ldd	r19, Y+9	; 0x09
    182c:	f9 01       	movw	r30, r18
    182e:	80 83       	st	Z, r24
    1830:	91 83       	std	Z+1, r25	; 0x01
    1832:	a2 83       	std	Z+2, r26	; 0x02
    1834:	b3 83       	std	Z+3, r27	; 0x03
    1836:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    183a:	88 85       	ldd	r24, Y+8	; 0x08
    183c:	99 85       	ldd	r25, Y+9	; 0x09
    183e:	fc 01       	movw	r30, r24
    1840:	80 81       	ld	r24, Z
    1842:	91 81       	ldd	r25, Z+1	; 0x01
    1844:	a2 81       	ldd	r26, Z+2	; 0x02
    1846:	b3 81       	ldd	r27, Z+3	; 0x03
    1848:	bc 01       	movw	r22, r24
    184a:	cd 01       	movw	r24, r26
    184c:	6d 96       	adiw	r28, 0x1d	; 29
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
    185e:	0f 93       	push	r16
    1860:	cf 93       	push	r28
    1862:	df 93       	push	r29
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
    1868:	2a 97       	sbiw	r28, 0x0a	; 10
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	6a 83       	std	Y+2, r22	; 0x02
    1876:	7b 83       	std	Y+3, r23	; 0x03
    1878:	8c 83       	std	Y+4, r24	; 0x04
    187a:	9d 83       	std	Y+5, r25	; 0x05
    187c:	2e 83       	std	Y+6, r18	; 0x06
    187e:	3f 83       	std	Y+7, r19	; 0x07
    1880:	48 87       	std	Y+8, r20	; 0x08
    1882:	59 87       	std	Y+9, r21	; 0x09
    1884:	0a 87       	std	Y+10, r16	; 0x0a
BaseType_t xWaitConditionMet = pdFALSE;
    1886:	19 82       	std	Y+1, r1	; 0x01

    if( xWaitForAllBits == pdFALSE )
    1888:	8a 85       	ldd	r24, Y+10	; 0x0a
    188a:	88 23       	and	r24, r24
    188c:	99 f4       	brne	.+38     	; 0x18b4 <prvTestWaitCondition+0x56>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
        set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
    188e:	2a 81       	ldd	r18, Y+2	; 0x02
    1890:	3b 81       	ldd	r19, Y+3	; 0x03
    1892:	4c 81       	ldd	r20, Y+4	; 0x04
    1894:	5d 81       	ldd	r21, Y+5	; 0x05
    1896:	8e 81       	ldd	r24, Y+6	; 0x06
    1898:	9f 81       	ldd	r25, Y+7	; 0x07
    189a:	a8 85       	ldd	r26, Y+8	; 0x08
    189c:	b9 85       	ldd	r27, Y+9	; 0x09
    189e:	82 23       	and	r24, r18
    18a0:	93 23       	and	r25, r19
    18a2:	a4 23       	and	r26, r20
    18a4:	b5 23       	and	r27, r21
    18a6:	89 2b       	or	r24, r25
    18a8:	8a 2b       	or	r24, r26
    18aa:	8b 2b       	or	r24, r27
    18ac:	d1 f0       	breq	.+52     	; 0x18e2 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	17 c0       	rjmp	.+46     	; 0x18e2 <prvTestWaitCondition+0x84>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
        Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
    18b4:	2a 81       	ldd	r18, Y+2	; 0x02
    18b6:	3b 81       	ldd	r19, Y+3	; 0x03
    18b8:	4c 81       	ldd	r20, Y+4	; 0x04
    18ba:	5d 81       	ldd	r21, Y+5	; 0x05
    18bc:	8e 81       	ldd	r24, Y+6	; 0x06
    18be:	9f 81       	ldd	r25, Y+7	; 0x07
    18c0:	a8 85       	ldd	r26, Y+8	; 0x08
    18c2:	b9 85       	ldd	r27, Y+9	; 0x09
    18c4:	28 23       	and	r18, r24
    18c6:	39 23       	and	r19, r25
    18c8:	4a 23       	and	r20, r26
    18ca:	5b 23       	and	r21, r27
    18cc:	8e 81       	ldd	r24, Y+6	; 0x06
    18ce:	9f 81       	ldd	r25, Y+7	; 0x07
    18d0:	a8 85       	ldd	r26, Y+8	; 0x08
    18d2:	b9 85       	ldd	r27, Y+9	; 0x09
    18d4:	28 17       	cp	r18, r24
    18d6:	39 07       	cpc	r19, r25
    18d8:	4a 07       	cpc	r20, r26
    18da:	5b 07       	cpc	r21, r27
    18dc:	11 f4       	brne	.+4      	; 0x18e2 <prvTestWaitCondition+0x84>
        {
            xWaitConditionMet = pdTRUE;
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	89 83       	std	Y+1, r24	; 0x01
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e4:	2a 96       	adiw	r28, 0x0a	; 10
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
    18f0:	df 91       	pop	r29
    18f2:	cf 91       	pop	r28
    18f4:	0f 91       	pop	r16
    18f6:	08 95       	ret

000018f8 <pvPortMalloc>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
	/* This just exists to keep the linker quiet. */
}
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	2a 97       	sbiw	r28, 0x0a	; 10
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	de bf       	out	0x3e, r29	; 62
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	cd bf       	out	0x3d, r28	; 61
    190c:	9a 87       	std	Y+10, r25	; 0x0a
    190e:	89 87       	std	Y+9, r24	; 0x09
    1910:	1e 82       	std	Y+6, r1	; 0x06
    1912:	1d 82       	std	Y+5, r1	; 0x05
    1914:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    1918:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxEnd>
    191c:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <pxEnd+0x1>
    1920:	89 2b       	or	r24, r25
    1922:	09 f4       	brne	.+2      	; 0x1926 <pvPortMalloc+0x2e>
    1924:	4e d1       	rcall	.+668    	; 0x1bc2 <prvHeapInit>
    1926:	20 91 6e 17 	lds	r18, 0x176E	; 0x80176e <xBlockAllocatedBit>
    192a:	30 91 6f 17 	lds	r19, 0x176F	; 0x80176f <xBlockAllocatedBit+0x1>
    192e:	89 85       	ldd	r24, Y+9	; 0x09
    1930:	9a 85       	ldd	r25, Y+10	; 0x0a
    1932:	82 23       	and	r24, r18
    1934:	93 23       	and	r25, r19
    1936:	89 2b       	or	r24, r25
    1938:	09 f0       	breq	.+2      	; 0x193c <pvPortMalloc+0x44>
    193a:	ca c0       	rjmp	.+404    	; 0x1ad0 <pvPortMalloc+0x1d8>
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	89 2b       	or	r24, r25
    1942:	41 f0       	breq	.+16     	; 0x1954 <pvPortMalloc+0x5c>
    1944:	84 e0       	ldi	r24, 0x04	; 4
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	29 85       	ldd	r18, Y+9	; 0x09
    194a:	3a 85       	ldd	r19, Y+10	; 0x0a
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	9a 87       	std	Y+10, r25	; 0x0a
    1952:	89 87       	std	Y+9, r24	; 0x09
    1954:	89 85       	ldd	r24, Y+9	; 0x09
    1956:	9a 85       	ldd	r25, Y+10	; 0x0a
    1958:	89 2b       	or	r24, r25
    195a:	09 f4       	brne	.+2      	; 0x195e <pvPortMalloc+0x66>
    195c:	b9 c0       	rjmp	.+370    	; 0x1ad0 <pvPortMalloc+0x1d8>
    195e:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <xFreeBytesRemaining>
    1962:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <xFreeBytesRemaining+0x1>
    1966:	29 85       	ldd	r18, Y+9	; 0x09
    1968:	3a 85       	ldd	r19, Y+10	; 0x0a
    196a:	82 17       	cp	r24, r18
    196c:	93 07       	cpc	r25, r19
    196e:	08 f4       	brcc	.+2      	; 0x1972 <pvPortMalloc+0x7a>
    1970:	af c0       	rjmp	.+350    	; 0x1ad0 <pvPortMalloc+0x1d8>
    1972:	84 e6       	ldi	r24, 0x64	; 100
    1974:	97 e1       	ldi	r25, 0x17	; 23
    1976:	9c 83       	std	Y+4, r25	; 0x04
    1978:	8b 83       	std	Y+3, r24	; 0x03
    197a:	80 91 64 17 	lds	r24, 0x1764	; 0x801764 <xStart>
    197e:	90 91 65 17 	lds	r25, 0x1765	; 0x801765 <xStart+0x1>
    1982:	9a 83       	std	Y+2, r25	; 0x02
    1984:	89 83       	std	Y+1, r24	; 0x01
    1986:	0b c0       	rjmp	.+22     	; 0x199e <pvPortMalloc+0xa6>
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	9a 81       	ldd	r25, Y+2	; 0x02
    198c:	9c 83       	std	Y+4, r25	; 0x04
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	89 81       	ldd	r24, Y+1	; 0x01
    1992:	9a 81       	ldd	r25, Y+2	; 0x02
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	fc 01       	movw	r30, r24
    19a4:	22 81       	ldd	r18, Z+2	; 0x02
    19a6:	33 81       	ldd	r19, Z+3	; 0x03
    19a8:	89 85       	ldd	r24, Y+9	; 0x09
    19aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ac:	28 17       	cp	r18, r24
    19ae:	39 07       	cpc	r19, r25
    19b0:	38 f4       	brcc	.+14     	; 0x19c0 <pvPortMalloc+0xc8>
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	9a 81       	ldd	r25, Y+2	; 0x02
    19b6:	fc 01       	movw	r30, r24
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	89 2b       	or	r24, r25
    19be:	21 f7       	brne	.-56     	; 0x1988 <pvPortMalloc+0x90>
    19c0:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxEnd>
    19c4:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <pxEnd+0x1>
    19c8:	29 81       	ldd	r18, Y+1	; 0x01
    19ca:	3a 81       	ldd	r19, Y+2	; 0x02
    19cc:	28 17       	cp	r18, r24
    19ce:	39 07       	cpc	r19, r25
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <pvPortMalloc+0xdc>
    19d2:	7e c0       	rjmp	.+252    	; 0x1ad0 <pvPortMalloc+0x1d8>
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	fc 01       	movw	r30, r24
    19da:	20 81       	ld	r18, Z
    19dc:	31 81       	ldd	r19, Z+1	; 0x01
    19de:	84 e0       	ldi	r24, 0x04	; 4
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	fc 01       	movw	r30, r24
    19f0:	20 81       	ld	r18, Z
    19f2:	31 81       	ldd	r19, Z+1	; 0x01
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	fc 01       	movw	r30, r24
    19fa:	31 83       	std	Z+1, r19	; 0x01
    19fc:	20 83       	st	Z, r18
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	fc 01       	movw	r30, r24
    1a04:	22 81       	ldd	r18, Z+2	; 0x02
    1a06:	33 81       	ldd	r19, Z+3	; 0x03
    1a08:	89 85       	ldd	r24, Y+9	; 0x09
    1a0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0c:	28 1b       	sub	r18, r24
    1a0e:	39 0b       	sbc	r19, r25
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	82 17       	cp	r24, r18
    1a1a:	93 07       	cpc	r25, r19
    1a1c:	00 f5       	brcc	.+64     	; 0x1a5e <pvPortMalloc+0x166>
    1a1e:	29 81       	ldd	r18, Y+1	; 0x01
    1a20:	3a 81       	ldd	r19, Y+2	; 0x02
    1a22:	89 85       	ldd	r24, Y+9	; 0x09
    1a24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a26:	82 0f       	add	r24, r18
    1a28:	93 1f       	adc	r25, r19
    1a2a:	98 87       	std	Y+8, r25	; 0x08
    1a2c:	8f 83       	std	Y+7, r24	; 0x07
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	fc 01       	movw	r30, r24
    1a34:	22 81       	ldd	r18, Z+2	; 0x02
    1a36:	33 81       	ldd	r19, Z+3	; 0x03
    1a38:	89 85       	ldd	r24, Y+9	; 0x09
    1a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3c:	28 1b       	sub	r18, r24
    1a3e:	39 0b       	sbc	r19, r25
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	98 85       	ldd	r25, Y+8	; 0x08
    1a44:	fc 01       	movw	r30, r24
    1a46:	33 83       	std	Z+3, r19	; 0x03
    1a48:	22 83       	std	Z+2, r18	; 0x02
    1a4a:	89 81       	ldd	r24, Y+1	; 0x01
    1a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4e:	29 85       	ldd	r18, Y+9	; 0x09
    1a50:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a52:	fc 01       	movw	r30, r24
    1a54:	33 83       	std	Z+3, r19	; 0x03
    1a56:	22 83       	std	Z+2, r18	; 0x02
    1a58:	8f 81       	ldd	r24, Y+7	; 0x07
    1a5a:	98 85       	ldd	r25, Y+8	; 0x08
    1a5c:	32 d1       	rcall	.+612    	; 0x1cc2 <prvInsertBlockIntoFreeList>
    1a5e:	20 91 6a 17 	lds	r18, 0x176A	; 0x80176a <xFreeBytesRemaining>
    1a62:	30 91 6b 17 	lds	r19, 0x176B	; 0x80176b <xFreeBytesRemaining+0x1>
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	9a 81       	ldd	r25, Y+2	; 0x02
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	a9 01       	movw	r20, r18
    1a72:	48 1b       	sub	r20, r24
    1a74:	59 0b       	sbc	r21, r25
    1a76:	ca 01       	movw	r24, r20
    1a78:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <xFreeBytesRemaining+0x1>
    1a7c:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <xFreeBytesRemaining>
    1a80:	20 91 6a 17 	lds	r18, 0x176A	; 0x80176a <xFreeBytesRemaining>
    1a84:	30 91 6b 17 	lds	r19, 0x176B	; 0x80176b <xFreeBytesRemaining+0x1>
    1a88:	80 91 6c 17 	lds	r24, 0x176C	; 0x80176c <xMinimumEverFreeBytesRemaining>
    1a8c:	90 91 6d 17 	lds	r25, 0x176D	; 0x80176d <xMinimumEverFreeBytesRemaining+0x1>
    1a90:	28 17       	cp	r18, r24
    1a92:	39 07       	cpc	r19, r25
    1a94:	40 f4       	brcc	.+16     	; 0x1aa6 <pvPortMalloc+0x1ae>
    1a96:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <xFreeBytesRemaining>
    1a9a:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <xFreeBytesRemaining+0x1>
    1a9e:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <xMinimumEverFreeBytesRemaining+0x1>
    1aa2:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <xMinimumEverFreeBytesRemaining>
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	fc 01       	movw	r30, r24
    1aac:	22 81       	ldd	r18, Z+2	; 0x02
    1aae:	33 81       	ldd	r19, Z+3	; 0x03
    1ab0:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <xBlockAllocatedBit>
    1ab4:	90 91 6f 17 	lds	r25, 0x176F	; 0x80176f <xBlockAllocatedBit+0x1>
    1ab8:	28 2b       	or	r18, r24
    1aba:	39 2b       	or	r19, r25
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	33 83       	std	Z+3, r19	; 0x03
    1ac4:	22 83       	std	Z+2, r18	; 0x02
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aca:	fc 01       	movw	r30, r24
    1acc:	11 82       	std	Z+1, r1	; 0x01
    1ace:	10 82       	st	Z, r1
    1ad0:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	89 2b       	or	r24, r25
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <pvPortMalloc+0x1e8>
    1adc:	0e 94 32 32 	call	0x6464	; 0x6464 <vApplicationMallocFailedHook>
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	2a 96       	adiw	r28, 0x0a	; 10
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	df 91       	pop	r29
    1af2:	cf 91       	pop	r28
    1af4:	08 95       	ret

00001af6 <vPortFree>:
    1af6:	cf 93       	push	r28
    1af8:	df 93       	push	r29
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <vPortFree+0x6>
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <vPortFree+0x8>
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	8d 81       	ldd	r24, Y+5	; 0x05
    1b08:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b10:	9e 81       	ldd	r25, Y+6	; 0x06
    1b12:	89 2b       	or	r24, r25
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <vPortFree+0x22>
    1b16:	4b c0       	rjmp	.+150    	; 0x1bae <vPortFree+0xb8>
    1b18:	84 e0       	ldi	r24, 0x04	; 4
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	91 95       	neg	r25
    1b1e:	81 95       	neg	r24
    1b20:	91 09       	sbc	r25, r1
    1b22:	29 81       	ldd	r18, Y+1	; 0x01
    1b24:	3a 81       	ldd	r19, Y+2	; 0x02
    1b26:	82 0f       	add	r24, r18
    1b28:	93 1f       	adc	r25, r19
    1b2a:	9a 83       	std	Y+2, r25	; 0x02
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	22 81       	ldd	r18, Z+2	; 0x02
    1b3e:	33 81       	ldd	r19, Z+3	; 0x03
    1b40:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <xBlockAllocatedBit>
    1b44:	90 91 6f 17 	lds	r25, 0x176F	; 0x80176f <xBlockAllocatedBit+0x1>
    1b48:	82 23       	and	r24, r18
    1b4a:	93 23       	and	r25, r19
    1b4c:	89 2b       	or	r24, r25
    1b4e:	79 f1       	breq	.+94     	; 0x1bae <vPortFree+0xb8>
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	fc 01       	movw	r30, r24
    1b56:	80 81       	ld	r24, Z
    1b58:	91 81       	ldd	r25, Z+1	; 0x01
    1b5a:	89 2b       	or	r24, r25
    1b5c:	41 f5       	brne	.+80     	; 0x1bae <vPortFree+0xb8>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	fc 01       	movw	r30, r24
    1b64:	22 81       	ldd	r18, Z+2	; 0x02
    1b66:	33 81       	ldd	r19, Z+3	; 0x03
    1b68:	80 91 6e 17 	lds	r24, 0x176E	; 0x80176e <xBlockAllocatedBit>
    1b6c:	90 91 6f 17 	lds	r25, 0x176F	; 0x80176f <xBlockAllocatedBit+0x1>
    1b70:	80 95       	com	r24
    1b72:	90 95       	com	r25
    1b74:	28 23       	and	r18, r24
    1b76:	39 23       	and	r19, r25
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	33 83       	std	Z+3, r19	; 0x03
    1b80:	22 83       	std	Z+2, r18	; 0x02
    1b82:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	22 81       	ldd	r18, Z+2	; 0x02
    1b8e:	33 81       	ldd	r19, Z+3	; 0x03
    1b90:	80 91 6a 17 	lds	r24, 0x176A	; 0x80176a <xFreeBytesRemaining>
    1b94:	90 91 6b 17 	lds	r25, 0x176B	; 0x80176b <xFreeBytesRemaining+0x1>
    1b98:	82 0f       	add	r24, r18
    1b9a:	93 1f       	adc	r25, r19
    1b9c:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <xFreeBytesRemaining+0x1>
    1ba0:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <xFreeBytesRemaining>
    1ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba8:	8c d0       	rcall	.+280    	; 0x1cc2 <prvInsertBlockIntoFreeList>
    1baa:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    1bae:	00 00       	nop
    1bb0:	26 96       	adiw	r28, 0x06	; 6
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	df 91       	pop	r29
    1bbe:	cf 91       	pop	r28
    1bc0:	08 95       	ret

00001bc2 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    1bc2:	cf 93       	push	r28
    1bc4:	df 93       	push	r29
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	28 97       	sbiw	r28, 0x08	; 8
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
    1bd6:	80 ea       	ldi	r24, 0xA0	; 160
    1bd8:	9f e0       	ldi	r25, 0x0F	; 15
    1bda:	9a 83       	std	Y+2, r25	; 0x02
    1bdc:	89 83       	std	Y+1, r24	; 0x01

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
    1bde:	84 ec       	ldi	r24, 0xC4	; 196
    1be0:	97 e0       	ldi	r25, 0x07	; 7
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    1bee:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf2:	90 93 65 17 	sts	0x1765, r25	; 0x801765 <xStart+0x1>
    1bf6:	80 93 64 17 	sts	0x1764, r24	; 0x801764 <xStart>
	xStart.xBlockSize = ( size_t ) 0;
    1bfa:	10 92 67 17 	sts	0x1767, r1	; 0x801767 <xStart+0x3>
    1bfe:	10 92 66 17 	sts	0x1766, r1	; 0x801766 <xStart+0x2>

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    1c02:	2d 81       	ldd	r18, Y+5	; 0x05
    1c04:	3e 81       	ldd	r19, Y+6	; 0x06
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	82 0f       	add	r24, r18
    1c0c:	93 1f       	adc	r25, r19
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	8b 83       	std	Y+3, r24	; 0x03
	uxAddress -= xHeapStructSize;
    1c12:	84 e0       	ldi	r24, 0x04	; 4
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	a9 01       	movw	r20, r18
    1c1c:	48 1b       	sub	r20, r24
    1c1e:	59 0b       	sbc	r21, r25
    1c20:	ca 01       	movw	r24, r20
    1c22:	9c 83       	std	Y+4, r25	; 0x04
    1c24:	8b 83       	std	Y+3, r24	; 0x03
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2a:	90 93 69 17 	sts	0x1769, r25	; 0x801769 <pxEnd+0x1>
    1c2e:	80 93 68 17 	sts	0x1768, r24	; 0x801768 <pxEnd>
	pxEnd->xBlockSize = 0;
    1c32:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxEnd>
    1c36:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <pxEnd+0x1>
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	13 82       	std	Z+3, r1	; 0x03
    1c3e:	12 82       	std	Z+2, r1	; 0x02
	pxEnd->pxNextFreeBlock = NULL;
    1c40:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxEnd>
    1c44:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <pxEnd+0x1>
    1c48:	fc 01       	movw	r30, r24
    1c4a:	11 82       	std	Z+1, r1	; 0x01
    1c4c:	10 82       	st	Z, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	98 87       	std	Y+8, r25	; 0x08
    1c54:	8f 83       	std	Y+7, r24	; 0x07
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
    1c56:	8f 81       	ldd	r24, Y+7	; 0x07
    1c58:	98 85       	ldd	r25, Y+8	; 0x08
    1c5a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c5c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c5e:	28 1b       	sub	r18, r24
    1c60:	39 0b       	sbc	r19, r25
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	fc 01       	movw	r30, r24
    1c68:	33 83       	std	Z+3, r19	; 0x03
    1c6a:	22 83       	std	Z+2, r18	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
    1c6c:	20 91 68 17 	lds	r18, 0x1768	; 0x801768 <pxEnd>
    1c70:	30 91 69 17 	lds	r19, 0x1769	; 0x801769 <pxEnd+0x1>
    1c74:	8f 81       	ldd	r24, Y+7	; 0x07
    1c76:	98 85       	ldd	r25, Y+8	; 0x08
    1c78:	fc 01       	movw	r30, r24
    1c7a:	31 83       	std	Z+1, r19	; 0x01
    1c7c:	20 83       	st	Z, r18

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	fc 01       	movw	r30, r24
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	93 81       	ldd	r25, Z+3	; 0x03
    1c88:	90 93 6d 17 	sts	0x176D, r25	; 0x80176d <xMinimumEverFreeBytesRemaining+0x1>
    1c8c:	80 93 6c 17 	sts	0x176C, r24	; 0x80176c <xMinimumEverFreeBytesRemaining>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
    1c90:	8f 81       	ldd	r24, Y+7	; 0x07
    1c92:	98 85       	ldd	r25, Y+8	; 0x08
    1c94:	fc 01       	movw	r30, r24
    1c96:	82 81       	ldd	r24, Z+2	; 0x02
    1c98:	93 81       	ldd	r25, Z+3	; 0x03
    1c9a:	90 93 6b 17 	sts	0x176B, r25	; 0x80176b <xFreeBytesRemaining+0x1>
    1c9e:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <xFreeBytesRemaining>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e8       	ldi	r25, 0x80	; 128
    1ca6:	90 93 6f 17 	sts	0x176F, r25	; 0x80176f <xBlockAllocatedBit+0x1>
    1caa:	80 93 6e 17 	sts	0x176E, r24	; 0x80176e <xBlockAllocatedBit>
}
    1cae:	00 00       	nop
    1cb0:	28 96       	adiw	r28, 0x08	; 8
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	de bf       	out	0x3e, r29	; 62
    1cb8:	0f be       	out	0x3f, r0	; 63
    1cba:	cd bf       	out	0x3d, r28	; 61
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	08 95       	ret

00001cc2 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <prvInsertBlockIntoFreeList+0x6>
    1cc8:	00 d0       	rcall	.+0      	; 0x1cca <prvInsertBlockIntoFreeList+0x8>
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
    1cd2:	84 e6       	ldi	r24, 0x64	; 100
    1cd4:	97 e1       	ldi	r25, 0x17	; 23
    1cd6:	9a 83       	std	Y+2, r25	; 0x02
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	07 c0       	rjmp	.+14     	; 0x1cea <prvInsertBlockIntoFreeList+0x28>
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	80 81       	ld	r24, Z
    1ce4:	91 81       	ldd	r25, Z+1	; 0x01
    1ce6:	9a 83       	std	Y+2, r25	; 0x02
    1ce8:	89 83       	std	Y+1, r24	; 0x01
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	9a 81       	ldd	r25, Y+2	; 0x02
    1cee:	fc 01       	movw	r30, r24
    1cf0:	20 81       	ld	r18, Z
    1cf2:	31 81       	ldd	r19, Z+1	; 0x01
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	28 17       	cp	r18, r24
    1cfa:	39 07       	cpc	r19, r25
    1cfc:	78 f3       	brcs	.-34     	; 0x1cdc <prvInsertBlockIntoFreeList+0x1a>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	9a 81       	ldd	r25, Y+2	; 0x02
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
    1d08:	9a 81       	ldd	r25, Y+2	; 0x02
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	82 81       	ldd	r24, Z+2	; 0x02
    1d0e:	93 81       	ldd	r25, Z+3	; 0x03
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	28 0f       	add	r18, r24
    1d16:	39 1f       	adc	r19, r25
    1d18:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1c:	28 17       	cp	r18, r24
    1d1e:	39 07       	cpc	r19, r25
    1d20:	a9 f4       	brne	.+42     	; 0x1d4c <prvInsertBlockIntoFreeList+0x8a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	fc 01       	movw	r30, r24
    1d28:	22 81       	ldd	r18, Z+2	; 0x02
    1d2a:	33 81       	ldd	r19, Z+3	; 0x03
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	fc 01       	movw	r30, r24
    1d32:	82 81       	ldd	r24, Z+2	; 0x02
    1d34:	93 81       	ldd	r25, Z+3	; 0x03
    1d36:	28 0f       	add	r18, r24
    1d38:	39 1f       	adc	r19, r25
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	33 83       	std	Z+3, r19	; 0x03
    1d42:	22 83       	std	Z+2, r18	; 0x02
		pxBlockToInsert = pxIterator;
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	9e 83       	std	Y+6, r25	; 0x06
    1d4a:	8d 83       	std	Y+5, r24	; 0x05
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	9c 83       	std	Y+4, r25	; 0x04
    1d52:	8b 83       	std	Y+3, r24	; 0x03
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	fc 01       	movw	r30, r24
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d60:	3c 81       	ldd	r19, Y+4	; 0x04
    1d62:	28 0f       	add	r18, r24
    1d64:	39 1f       	adc	r19, r25
    1d66:	89 81       	ldd	r24, Y+1	; 0x01
    1d68:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	80 81       	ld	r24, Z
    1d6e:	91 81       	ldd	r25, Z+1	; 0x01
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	c1 f5       	brne	.+112    	; 0x1de6 <prvInsertBlockIntoFreeList+0x124>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	20 81       	ld	r18, Z
    1d7e:	31 81       	ldd	r19, Z+1	; 0x01
    1d80:	80 91 68 17 	lds	r24, 0x1768	; 0x801768 <pxEnd>
    1d84:	90 91 69 17 	lds	r25, 0x1769	; 0x801769 <pxEnd+0x1>
    1d88:	28 17       	cp	r18, r24
    1d8a:	39 07       	cpc	r19, r25
    1d8c:	11 f1       	breq	.+68     	; 0x1dd2 <prvInsertBlockIntoFreeList+0x110>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
    1d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d90:	9e 81       	ldd	r25, Y+6	; 0x06
    1d92:	fc 01       	movw	r30, r24
    1d94:	22 81       	ldd	r18, Z+2	; 0x02
    1d96:	33 81       	ldd	r19, Z+3	; 0x03
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	fc 01       	movw	r30, r24
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	28 0f       	add	r18, r24
    1daa:	39 1f       	adc	r19, r25
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	9e 81       	ldd	r25, Y+6	; 0x06
    1db0:	fc 01       	movw	r30, r24
    1db2:	33 83       	std	Z+3, r19	; 0x03
    1db4:	22 83       	std	Z+2, r18	; 0x02
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	fc 01       	movw	r30, r24
    1dc2:	20 81       	ld	r18, Z
    1dc4:	31 81       	ldd	r19, Z+1	; 0x01
    1dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dca:	fc 01       	movw	r30, r24
    1dcc:	31 83       	std	Z+1, r19	; 0x01
    1dce:	20 83       	st	Z, r18
    1dd0:	14 c0       	rjmp	.+40     	; 0x1dfa <prvInsertBlockIntoFreeList+0x138>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
    1dd2:	20 91 68 17 	lds	r18, 0x1768	; 0x801768 <pxEnd>
    1dd6:	30 91 69 17 	lds	r19, 0x1769	; 0x801769 <pxEnd+0x1>
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	fc 01       	movw	r30, r24
    1de0:	31 83       	std	Z+1, r19	; 0x01
    1de2:	20 83       	st	Z, r18
    1de4:	0a c0       	rjmp	.+20     	; 0x1dfa <prvInsertBlockIntoFreeList+0x138>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dea:	fc 01       	movw	r30, r24
    1dec:	20 81       	ld	r18, Z
    1dee:	31 81       	ldd	r19, Z+1	; 0x01
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	fc 01       	movw	r30, r24
    1df6:	31 83       	std	Z+1, r19	; 0x01
    1df8:	20 83       	st	Z, r18

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
    1dfa:	29 81       	ldd	r18, Y+1	; 0x01
    1dfc:	3a 81       	ldd	r19, Y+2	; 0x02
    1dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1e00:	9e 81       	ldd	r25, Y+6	; 0x06
    1e02:	28 17       	cp	r18, r24
    1e04:	39 07       	cpc	r19, r25
    1e06:	39 f0       	breq	.+14     	; 0x1e16 <prvInsertBlockIntoFreeList+0x154>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e10:	fc 01       	movw	r30, r24
    1e12:	31 83       	std	Z+1, r19	; 0x01
    1e14:	20 83       	st	Z, r18
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    1e16:	00 00       	nop
    1e18:	26 96       	adiw	r28, 0x06	; 6
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	1f 92       	push	r1
    1e30:	1f 92       	push	r1
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	9a 83       	std	Y+2, r25	; 0x02
    1e38:	89 83       	std	Y+1, r24	; 0x01
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3e:	9c 01       	movw	r18, r24
    1e40:	2d 5f       	subi	r18, 0xFD	; 253
    1e42:	3f 4f       	sbci	r19, 0xFF	; 255
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	fc 01       	movw	r30, r24
    1e4a:	32 83       	std	Z+2, r19	; 0x02
    1e4c:	21 83       	std	Z+1, r18	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1e4e:	29 81       	ldd	r18, Y+1	; 0x01
    1e50:	3a 81       	ldd	r19, Y+2	; 0x02
    1e52:	8f ef       	ldi	r24, 0xFF	; 255
    1e54:	9f ef       	ldi	r25, 0xFF	; 255
    1e56:	dc 01       	movw	r26, r24
    1e58:	f9 01       	movw	r30, r18
    1e5a:	83 83       	std	Z+3, r24	; 0x03
    1e5c:	94 83       	std	Z+4, r25	; 0x04
    1e5e:	a5 83       	std	Z+5, r26	; 0x05
    1e60:	b6 83       	std	Z+6, r27	; 0x06

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	9a 81       	ldd	r25, Y+2	; 0x02
    1e66:	9c 01       	movw	r18, r24
    1e68:	2d 5f       	subi	r18, 0xFD	; 253
    1e6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	fc 01       	movw	r30, r24
    1e72:	30 87       	std	Z+8, r19	; 0x08
    1e74:	27 83       	std	Z+7, r18	; 0x07
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1e76:	89 81       	ldd	r24, Y+1	; 0x01
    1e78:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	2d 5f       	subi	r18, 0xFD	; 253
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	89 81       	ldd	r24, Y+1	; 0x01
    1e82:	9a 81       	ldd	r25, Y+2	; 0x02
    1e84:	fc 01       	movw	r30, r24
    1e86:	32 87       	std	Z+10, r19	; 0x0a
    1e88:	21 87       	std	Z+9, r18	; 0x09

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	fc 01       	movw	r30, r24
    1e90:	10 82       	st	Z, r1

    /* Write known values into the list if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1e92:	00 00       	nop
    1e94:	0f 90       	pop	r0
    1e96:	0f 90       	pop	r0
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1e9e:	cf 93       	push	r28
    1ea0:	df 93       	push	r29
    1ea2:	1f 92       	push	r1
    1ea4:	1f 92       	push	r1
    1ea6:	cd b7       	in	r28, 0x3d	; 61
    1ea8:	de b7       	in	r29, 0x3e	; 62
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	13 86       	std	Z+11, r1	; 0x0b
    1eb6:	12 86       	std	Z+10, r1	; 0x0a

    /* Write known values into the list item if
    configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    1eb8:	00 00       	nop
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	df 91       	pop	r29
    1ec0:	cf 91       	pop	r28
    1ec2:	08 95       	ret

00001ec4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1ec4:	cf 93       	push	r28
    1ec6:	df 93       	push	r29
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <vListInsertEnd+0x6>
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <vListInsertEnd+0x8>
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	7e 83       	std	Y+6, r23	; 0x06
    1ed6:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	fc 01       	movw	r30, r24
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	92 81       	ldd	r25, Z+2	; 0x02
    1ee2:	9a 83       	std	Y+2, r25	; 0x02
    1ee4:	89 83       	std	Y+1, r24	; 0x01
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eea:	29 81       	ldd	r18, Y+1	; 0x01
    1eec:	3a 81       	ldd	r19, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	35 83       	std	Z+5, r19	; 0x05
    1ef2:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	fc 01       	movw	r30, r24
    1efa:	26 81       	ldd	r18, Z+6	; 0x06
    1efc:	37 81       	ldd	r19, Z+7	; 0x07
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	fc 01       	movw	r30, r24
    1f04:	37 83       	std	Z+7, r19	; 0x07
    1f06:	26 83       	std	Z+6, r18	; 0x06

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1f08:	89 81       	ldd	r24, Y+1	; 0x01
    1f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0c:	fc 01       	movw	r30, r24
    1f0e:	86 81       	ldd	r24, Z+6	; 0x06
    1f10:	97 81       	ldd	r25, Z+7	; 0x07
    1f12:	2d 81       	ldd	r18, Y+5	; 0x05
    1f14:	3e 81       	ldd	r19, Y+6	; 0x06
    1f16:	fc 01       	movw	r30, r24
    1f18:	35 83       	std	Z+5, r19	; 0x05
    1f1a:	24 83       	std	Z+4, r18	; 0x04
    pxIndex->pxPrevious = pxNewListItem;
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	2d 81       	ldd	r18, Y+5	; 0x05
    1f22:	3e 81       	ldd	r19, Y+6	; 0x06
    1f24:	fc 01       	movw	r30, r24
    1f26:	37 83       	std	Z+7, r19	; 0x07
    1f28:	26 83       	std	Z+6, r18	; 0x06

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f30:	3c 81       	ldd	r19, Y+4	; 0x04
    1f32:	fc 01       	movw	r30, r24
    1f34:	33 87       	std	Z+11, r19	; 0x0b
    1f36:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    1f38:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	80 81       	ld	r24, Z
    1f40:	21 e0       	ldi	r18, 0x01	; 1
    1f42:	28 0f       	add	r18, r24
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	fc 01       	movw	r30, r24
    1f4a:	20 83       	st	Z, r18
}
    1f4c:	00 00       	nop
    1f4e:	26 96       	adiw	r28, 0x06	; 6
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	08 95       	ret

00001f60 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    1f68:	2a 97       	sbiw	r28, 0x0a	; 10
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	98 87       	std	Y+8, r25	; 0x08
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	7a 87       	std	Y+10, r23	; 0x0a
    1f7a:	69 87       	std	Y+9, r22	; 0x09
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1f7c:	89 85       	ldd	r24, Y+9	; 0x09
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	fc 01       	movw	r30, r24
    1f82:	80 81       	ld	r24, Z
    1f84:	91 81       	ldd	r25, Z+1	; 0x01
    1f86:	a2 81       	ldd	r26, Z+2	; 0x02
    1f88:	b3 81       	ldd	r27, Z+3	; 0x03
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	ad 83       	std	Y+5, r26	; 0x05
    1f90:	be 83       	std	Y+6, r27	; 0x06
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	ad 81       	ldd	r26, Y+5	; 0x05
    1f98:	be 81       	ldd	r27, Y+6	; 0x06
    1f9a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9e:	af 4f       	sbci	r26, 0xFF	; 255
    1fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa2:	41 f4       	brne	.+16     	; 0x1fb4 <vListInsert+0x54>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1fa4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa6:	98 85       	ldd	r25, Y+8	; 0x08
    1fa8:	fc 01       	movw	r30, r24
    1faa:	81 85       	ldd	r24, Z+9	; 0x09
    1fac:	92 85       	ldd	r25, Z+10	; 0x0a
    1fae:	9a 83       	std	Y+2, r25	; 0x02
    1fb0:	89 83       	std	Y+1, r24	; 0x01
    1fb2:	20 c0       	rjmp	.+64     	; 0x1ff4 <vListInsert+0x94>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1fb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb6:	98 85       	ldd	r25, Y+8	; 0x08
    1fb8:	03 96       	adiw	r24, 0x03	; 3
    1fba:	9a 83       	std	Y+2, r25	; 0x02
    1fbc:	89 83       	std	Y+1, r24	; 0x01
    1fbe:	07 c0       	rjmp	.+14     	; 0x1fce <vListInsert+0x6e>
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	84 81       	ldd	r24, Z+4	; 0x04
    1fc8:	95 81       	ldd	r25, Z+5	; 0x05
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	84 81       	ldd	r24, Z+4	; 0x04
    1fd6:	95 81       	ldd	r25, Z+5	; 0x05
    1fd8:	fc 01       	movw	r30, r24
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	42 81       	ldd	r20, Z+2	; 0x02
    1fe0:	53 81       	ldd	r21, Z+3	; 0x03
    1fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe6:	ad 81       	ldd	r26, Y+5	; 0x05
    1fe8:	be 81       	ldd	r27, Y+6	; 0x06
    1fea:	82 17       	cp	r24, r18
    1fec:	93 07       	cpc	r25, r19
    1fee:	a4 07       	cpc	r26, r20
    1ff0:	b5 07       	cpc	r27, r21
    1ff2:	30 f7       	brcc	.-52     	; 0x1fc0 <vListInsert+0x60>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	24 81       	ldd	r18, Z+4	; 0x04
    1ffc:	35 81       	ldd	r19, Z+5	; 0x05
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	fc 01       	movw	r30, r24
    2004:	35 83       	std	Z+5, r19	; 0x05
    2006:	24 83       	std	Z+4, r18	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	fc 01       	movw	r30, r24
    200e:	84 81       	ldd	r24, Z+4	; 0x04
    2010:	95 81       	ldd	r25, Z+5	; 0x05
    2012:	29 85       	ldd	r18, Y+9	; 0x09
    2014:	3a 85       	ldd	r19, Y+10	; 0x0a
    2016:	fc 01       	movw	r30, r24
    2018:	37 83       	std	Z+7, r19	; 0x07
    201a:	26 83       	std	Z+6, r18	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
    201c:	89 85       	ldd	r24, Y+9	; 0x09
    201e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2020:	29 81       	ldd	r18, Y+1	; 0x01
    2022:	3a 81       	ldd	r19, Y+2	; 0x02
    2024:	fc 01       	movw	r30, r24
    2026:	37 83       	std	Z+7, r19	; 0x07
    2028:	26 83       	std	Z+6, r18	; 0x06
    pxIterator->pxNext = pxNewListItem;
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	29 85       	ldd	r18, Y+9	; 0x09
    2030:	3a 85       	ldd	r19, Y+10	; 0x0a
    2032:	fc 01       	movw	r30, r24
    2034:	35 83       	std	Z+5, r19	; 0x05
    2036:	24 83       	std	Z+4, r18	; 0x04

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    2038:	89 85       	ldd	r24, Y+9	; 0x09
    203a:	9a 85       	ldd	r25, Y+10	; 0x0a
    203c:	2f 81       	ldd	r18, Y+7	; 0x07
    203e:	38 85       	ldd	r19, Y+8	; 0x08
    2040:	fc 01       	movw	r30, r24
    2042:	33 87       	std	Z+11, r19	; 0x0b
    2044:	22 87       	std	Z+10, r18	; 0x0a

    ( pxList->uxNumberOfItems )++;
    2046:	8f 81       	ldd	r24, Y+7	; 0x07
    2048:	98 85       	ldd	r25, Y+8	; 0x08
    204a:	fc 01       	movw	r30, r24
    204c:	80 81       	ld	r24, Z
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	28 0f       	add	r18, r24
    2052:	8f 81       	ldd	r24, Y+7	; 0x07
    2054:	98 85       	ldd	r25, Y+8	; 0x08
    2056:	fc 01       	movw	r30, r24
    2058:	20 83       	st	Z, r18
}
    205a:	00 00       	nop
    205c:	2a 96       	adiw	r28, 0x0a	; 10
    205e:	0f b6       	in	r0, 0x3f	; 63
    2060:	f8 94       	cli
    2062:	de bf       	out	0x3e, r29	; 62
    2064:	0f be       	out	0x3f, r0	; 63
    2066:	cd bf       	out	0x3d, r28	; 61
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 d0       	rcall	.+0      	; 0x2074 <uxListRemove+0x6>
    2074:	1f 92       	push	r1
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	9c 83       	std	Y+4, r25	; 0x04
    207c:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	9c 81       	ldd	r25, Y+4	; 0x04
    2082:	fc 01       	movw	r30, r24
    2084:	82 85       	ldd	r24, Z+10	; 0x0a
    2086:	93 85       	ldd	r25, Z+11	; 0x0b
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	fc 01       	movw	r30, r24
    2092:	84 81       	ldd	r24, Z+4	; 0x04
    2094:	95 81       	ldd	r25, Z+5	; 0x05
    2096:	2b 81       	ldd	r18, Y+3	; 0x03
    2098:	3c 81       	ldd	r19, Y+4	; 0x04
    209a:	f9 01       	movw	r30, r18
    209c:	26 81       	ldd	r18, Z+6	; 0x06
    209e:	37 81       	ldd	r19, Z+7	; 0x07
    20a0:	fc 01       	movw	r30, r24
    20a2:	37 83       	std	Z+7, r19	; 0x07
    20a4:	26 83       	std	Z+6, r18	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	fc 01       	movw	r30, r24
    20ac:	86 81       	ldd	r24, Z+6	; 0x06
    20ae:	97 81       	ldd	r25, Z+7	; 0x07
    20b0:	2b 81       	ldd	r18, Y+3	; 0x03
    20b2:	3c 81       	ldd	r19, Y+4	; 0x04
    20b4:	f9 01       	movw	r30, r18
    20b6:	24 81       	ldd	r18, Z+4	; 0x04
    20b8:	35 81       	ldd	r19, Z+5	; 0x05
    20ba:	fc 01       	movw	r30, r24
    20bc:	35 83       	std	Z+5, r19	; 0x05
    20be:	24 83       	std	Z+4, r18	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	9a 81       	ldd	r25, Y+2	; 0x02
    20c4:	fc 01       	movw	r30, r24
    20c6:	21 81       	ldd	r18, Z+1	; 0x01
    20c8:	32 81       	ldd	r19, Z+2	; 0x02
    20ca:	8b 81       	ldd	r24, Y+3	; 0x03
    20cc:	9c 81       	ldd	r25, Y+4	; 0x04
    20ce:	28 17       	cp	r18, r24
    20d0:	39 07       	cpc	r19, r25
    20d2:	51 f4       	brne	.+20     	; 0x20e8 <uxListRemove+0x7a>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	9c 81       	ldd	r25, Y+4	; 0x04
    20d8:	fc 01       	movw	r30, r24
    20da:	26 81       	ldd	r18, Z+6	; 0x06
    20dc:	37 81       	ldd	r19, Z+7	; 0x07
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	9a 81       	ldd	r25, Y+2	; 0x02
    20e2:	fc 01       	movw	r30, r24
    20e4:	32 83       	std	Z+2, r19	; 0x02
    20e6:	21 83       	std	Z+1, r18	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	fc 01       	movw	r30, r24
    20ee:	13 86       	std	Z+11, r1	; 0x0b
    20f0:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	9a 81       	ldd	r25, Y+2	; 0x02
    20f6:	fc 01       	movw	r30, r24
    20f8:	80 81       	ld	r24, Z
    20fa:	2f ef       	ldi	r18, 0xFF	; 255
    20fc:	28 0f       	add	r18, r24
    20fe:	89 81       	ldd	r24, Y+1	; 0x01
    2100:	9a 81       	ldd	r25, Y+2	; 0x02
    2102:	fc 01       	movw	r30, r24
    2104:	20 83       	st	Z, r18

    return pxList->uxNumberOfItems;
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	fc 01       	movw	r30, r24
    210c:	80 81       	ld	r24, Z
}
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	df 91       	pop	r29
    2118:	cf 91       	pop	r28
    211a:	08 95       	ret

0000211c <pxPortInitialiseStack>:
{
    /* It is unlikely that the AVR port will get stopped.  If required simply
    disable the tick interrupt here. */

    wdt_disable();    // disable Watchdog Timer
}
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	28 97       	sbiw	r28, 0x08	; 8
    2126:	0f b6       	in	r0, 0x3f	; 63
    2128:	f8 94       	cli
    212a:	de bf       	out	0x3e, r29	; 62
    212c:	0f be       	out	0x3f, r0	; 63
    212e:	cd bf       	out	0x3d, r28	; 61
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03
    2134:	7e 83       	std	Y+6, r23	; 0x06
    2136:	6d 83       	std	Y+5, r22	; 0x05
    2138:	58 87       	std	Y+8, r21	; 0x08
    213a:	4f 83       	std	Y+7, r20	; 0x07
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	9c 81       	ldd	r25, Y+4	; 0x04
    2140:	21 e1       	ldi	r18, 0x11	; 17
    2142:	fc 01       	movw	r30, r24
    2144:	20 83       	st	Z, r18
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9c 83       	std	Y+4, r25	; 0x04
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	22 e2       	ldi	r18, 0x22	; 34
    2156:	fc 01       	movw	r30, r24
    2158:	20 83       	st	Z, r18
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	9c 83       	std	Y+4, r25	; 0x04
    2162:	8b 83       	std	Y+3, r24	; 0x03
    2164:	8b 81       	ldd	r24, Y+3	; 0x03
    2166:	9c 81       	ldd	r25, Y+4	; 0x04
    2168:	23 e3       	ldi	r18, 0x33	; 51
    216a:	fc 01       	movw	r30, r24
    216c:	20 83       	st	Z, r18
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	01 97       	sbiw	r24, 0x01	; 1
    2174:	9c 83       	std	Y+4, r25	; 0x04
    2176:	8b 83       	std	Y+3, r24	; 0x03
    2178:	8d 81       	ldd	r24, Y+5	; 0x05
    217a:	9e 81       	ldd	r25, Y+6	; 0x06
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	29 81       	ldd	r18, Y+1	; 0x01
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	fc 01       	movw	r30, r24
    2188:	20 83       	st	Z, r18
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	9c 81       	ldd	r25, Y+4	; 0x04
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	9c 83       	std	Y+4, r25	; 0x04
    2192:	8b 83       	std	Y+3, r24	; 0x03
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	89 2f       	mov	r24, r25
    219a:	99 27       	eor	r25, r25
    219c:	9a 83       	std	Y+2, r25	; 0x02
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	29 81       	ldd	r18, Y+1	; 0x01
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	9c 81       	ldd	r25, Y+4	; 0x04
    21a6:	fc 01       	movw	r30, r24
    21a8:	20 83       	st	Z, r18
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	9c 81       	ldd	r25, Y+4	; 0x04
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	9c 83       	std	Y+4, r25	; 0x04
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	8b 81       	ldd	r24, Y+3	; 0x03
    21b6:	9c 81       	ldd	r25, Y+4	; 0x04
    21b8:	fc 01       	movw	r30, r24
    21ba:	10 82       	st	Z, r1
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	9c 83       	std	Y+4, r25	; 0x04
    21c4:	8b 83       	std	Y+3, r24	; 0x03
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	fc 01       	movw	r30, r24
    21cc:	10 82       	st	Z, r1
    21ce:	8b 81       	ldd	r24, Y+3	; 0x03
    21d0:	9c 81       	ldd	r25, Y+4	; 0x04
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	20 e8       	ldi	r18, 0x80	; 128
    21de:	fc 01       	movw	r30, r24
    21e0:	20 83       	st	Z, r18
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	9c 83       	std	Y+4, r25	; 0x04
    21ea:	8b 83       	std	Y+3, r24	; 0x03
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	fc 01       	movw	r30, r24
    21f2:	10 82       	st	Z, r1
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	01 97       	sbiw	r24, 0x01	; 1
    21fa:	9c 83       	std	Y+4, r25	; 0x04
    21fc:	8b 83       	std	Y+3, r24	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	fc 01       	movw	r30, r24
    2204:	10 82       	st	Z, r1
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	8b 83       	std	Y+3, r24	; 0x03
    2210:	8b 81       	ldd	r24, Y+3	; 0x03
    2212:	9c 81       	ldd	r25, Y+4	; 0x04
    2214:	fc 01       	movw	r30, r24
    2216:	10 82       	st	Z, r1
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	9c 83       	std	Y+4, r25	; 0x04
    2220:	8b 83       	std	Y+3, r24	; 0x03
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	22 e0       	ldi	r18, 0x02	; 2
    2228:	fc 01       	movw	r30, r24
    222a:	20 83       	st	Z, r18
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	9c 81       	ldd	r25, Y+4	; 0x04
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	9c 83       	std	Y+4, r25	; 0x04
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	8b 81       	ldd	r24, Y+3	; 0x03
    2238:	9c 81       	ldd	r25, Y+4	; 0x04
    223a:	23 e0       	ldi	r18, 0x03	; 3
    223c:	fc 01       	movw	r30, r24
    223e:	20 83       	st	Z, r18
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	01 97       	sbiw	r24, 0x01	; 1
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	24 e0       	ldi	r18, 0x04	; 4
    2250:	fc 01       	movw	r30, r24
    2252:	20 83       	st	Z, r18
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	25 e0       	ldi	r18, 0x05	; 5
    2264:	fc 01       	movw	r30, r24
    2266:	20 83       	st	Z, r18
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	9c 81       	ldd	r25, Y+4	; 0x04
    2276:	26 e0       	ldi	r18, 0x06	; 6
    2278:	fc 01       	movw	r30, r24
    227a:	20 83       	st	Z, r18
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	8b 81       	ldd	r24, Y+3	; 0x03
    2288:	9c 81       	ldd	r25, Y+4	; 0x04
    228a:	27 e0       	ldi	r18, 0x07	; 7
    228c:	fc 01       	movw	r30, r24
    228e:	20 83       	st	Z, r18
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	28 e0       	ldi	r18, 0x08	; 8
    22a0:	fc 01       	movw	r30, r24
    22a2:	20 83       	st	Z, r18
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	9c 81       	ldd	r25, Y+4	; 0x04
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	9c 83       	std	Y+4, r25	; 0x04
    22ac:	8b 83       	std	Y+3, r24	; 0x03
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	9c 81       	ldd	r25, Y+4	; 0x04
    22b2:	29 e0       	ldi	r18, 0x09	; 9
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	9c 81       	ldd	r25, Y+4	; 0x04
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	9c 83       	std	Y+4, r25	; 0x04
    22c0:	8b 83       	std	Y+3, r24	; 0x03
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	20 e1       	ldi	r18, 0x10	; 16
    22c8:	fc 01       	movw	r30, r24
    22ca:	20 83       	st	Z, r18
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9c 81       	ldd	r25, Y+4	; 0x04
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9c 83       	std	Y+4, r25	; 0x04
    22d4:	8b 83       	std	Y+3, r24	; 0x03
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	9c 81       	ldd	r25, Y+4	; 0x04
    22da:	21 e1       	ldi	r18, 0x11	; 17
    22dc:	fc 01       	movw	r30, r24
    22de:	20 83       	st	Z, r18
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	9c 83       	std	Y+4, r25	; 0x04
    22e8:	8b 83       	std	Y+3, r24	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	22 e1       	ldi	r18, 0x12	; 18
    22f0:	fc 01       	movw	r30, r24
    22f2:	20 83       	st	Z, r18
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	9c 83       	std	Y+4, r25	; 0x04
    22fc:	8b 83       	std	Y+3, r24	; 0x03
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	23 e1       	ldi	r18, 0x13	; 19
    2304:	fc 01       	movw	r30, r24
    2306:	20 83       	st	Z, r18
    2308:	8b 81       	ldd	r24, Y+3	; 0x03
    230a:	9c 81       	ldd	r25, Y+4	; 0x04
    230c:	01 97       	sbiw	r24, 0x01	; 1
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	24 e1       	ldi	r18, 0x14	; 20
    2318:	fc 01       	movw	r30, r24
    231a:	20 83       	st	Z, r18
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9c 83       	std	Y+4, r25	; 0x04
    2324:	8b 83       	std	Y+3, r24	; 0x03
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	9c 81       	ldd	r25, Y+4	; 0x04
    232a:	25 e1       	ldi	r18, 0x15	; 21
    232c:	fc 01       	movw	r30, r24
    232e:	20 83       	st	Z, r18
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	9c 81       	ldd	r25, Y+4	; 0x04
    233e:	26 e1       	ldi	r18, 0x16	; 22
    2340:	fc 01       	movw	r30, r24
    2342:	20 83       	st	Z, r18
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	9c 83       	std	Y+4, r25	; 0x04
    234c:	8b 83       	std	Y+3, r24	; 0x03
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	27 e1       	ldi	r18, 0x17	; 23
    2354:	fc 01       	movw	r30, r24
    2356:	20 83       	st	Z, r18
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	9c 81       	ldd	r25, Y+4	; 0x04
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	28 e1       	ldi	r18, 0x18	; 24
    2368:	fc 01       	movw	r30, r24
    236a:	20 83       	st	Z, r18
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	9c 83       	std	Y+4, r25	; 0x04
    2374:	8b 83       	std	Y+3, r24	; 0x03
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	9c 81       	ldd	r25, Y+4	; 0x04
    237a:	29 e1       	ldi	r18, 0x19	; 25
    237c:	fc 01       	movw	r30, r24
    237e:	20 83       	st	Z, r18
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9c 83       	std	Y+4, r25	; 0x04
    2388:	8b 83       	std	Y+3, r24	; 0x03
    238a:	8b 81       	ldd	r24, Y+3	; 0x03
    238c:	9c 81       	ldd	r25, Y+4	; 0x04
    238e:	20 e2       	ldi	r18, 0x20	; 32
    2390:	fc 01       	movw	r30, r24
    2392:	20 83       	st	Z, r18
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	01 97       	sbiw	r24, 0x01	; 1
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	21 e2       	ldi	r18, 0x21	; 33
    23a4:	fc 01       	movw	r30, r24
    23a6:	20 83       	st	Z, r18
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	01 97       	sbiw	r24, 0x01	; 1
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	8b 83       	std	Y+3, r24	; 0x03
    23b2:	8b 81       	ldd	r24, Y+3	; 0x03
    23b4:	9c 81       	ldd	r25, Y+4	; 0x04
    23b6:	22 e2       	ldi	r18, 0x22	; 34
    23b8:	fc 01       	movw	r30, r24
    23ba:	20 83       	st	Z, r18
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	9c 83       	std	Y+4, r25	; 0x04
    23c4:	8b 83       	std	Y+3, r24	; 0x03
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	23 e2       	ldi	r18, 0x23	; 35
    23cc:	fc 01       	movw	r30, r24
    23ce:	20 83       	st	Z, r18
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	9c 83       	std	Y+4, r25	; 0x04
    23d8:	8b 83       	std	Y+3, r24	; 0x03
    23da:	8f 81       	ldd	r24, Y+7	; 0x07
    23dc:	98 85       	ldd	r25, Y+8	; 0x08
    23de:	9a 83       	std	Y+2, r25	; 0x02
    23e0:	89 83       	std	Y+1, r24	; 0x01
    23e2:	29 81       	ldd	r18, Y+1	; 0x01
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	fc 01       	movw	r30, r24
    23ea:	20 83       	st	Z, r18
    23ec:	8b 81       	ldd	r24, Y+3	; 0x03
    23ee:	9c 81       	ldd	r25, Y+4	; 0x04
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	9c 83       	std	Y+4, r25	; 0x04
    23f4:	8b 83       	std	Y+3, r24	; 0x03
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	9a 81       	ldd	r25, Y+2	; 0x02
    23fa:	89 2f       	mov	r24, r25
    23fc:	99 27       	eor	r25, r25
    23fe:	9a 83       	std	Y+2, r25	; 0x02
    2400:	89 83       	std	Y+1, r24	; 0x01
    2402:	29 81       	ldd	r18, Y+1	; 0x01
    2404:	8b 81       	ldd	r24, Y+3	; 0x03
    2406:	9c 81       	ldd	r25, Y+4	; 0x04
    2408:	fc 01       	movw	r30, r24
    240a:	20 83       	st	Z, r18
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	26 e2       	ldi	r18, 0x26	; 38
    241c:	fc 01       	movw	r30, r24
    241e:	20 83       	st	Z, r18
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	01 97       	sbiw	r24, 0x01	; 1
    2426:	9c 83       	std	Y+4, r25	; 0x04
    2428:	8b 83       	std	Y+3, r24	; 0x03
    242a:	8b 81       	ldd	r24, Y+3	; 0x03
    242c:	9c 81       	ldd	r25, Y+4	; 0x04
    242e:	27 e2       	ldi	r18, 0x27	; 39
    2430:	fc 01       	movw	r30, r24
    2432:	20 83       	st	Z, r18
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	9c 81       	ldd	r25, Y+4	; 0x04
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9c 83       	std	Y+4, r25	; 0x04
    243c:	8b 83       	std	Y+3, r24	; 0x03
    243e:	8b 81       	ldd	r24, Y+3	; 0x03
    2440:	9c 81       	ldd	r25, Y+4	; 0x04
    2442:	28 e2       	ldi	r18, 0x28	; 40
    2444:	fc 01       	movw	r30, r24
    2446:	20 83       	st	Z, r18
    2448:	8b 81       	ldd	r24, Y+3	; 0x03
    244a:	9c 81       	ldd	r25, Y+4	; 0x04
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	9c 83       	std	Y+4, r25	; 0x04
    2450:	8b 83       	std	Y+3, r24	; 0x03
    2452:	8b 81       	ldd	r24, Y+3	; 0x03
    2454:	9c 81       	ldd	r25, Y+4	; 0x04
    2456:	29 e2       	ldi	r18, 0x29	; 41
    2458:	fc 01       	movw	r30, r24
    245a:	20 83       	st	Z, r18
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	9c 83       	std	Y+4, r25	; 0x04
    2464:	8b 83       	std	Y+3, r24	; 0x03
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	9c 81       	ldd	r25, Y+4	; 0x04
    246a:	20 e3       	ldi	r18, 0x30	; 48
    246c:	fc 01       	movw	r30, r24
    246e:	20 83       	st	Z, r18
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9c 83       	std	Y+4, r25	; 0x04
    2478:	8b 83       	std	Y+3, r24	; 0x03
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	9c 81       	ldd	r25, Y+4	; 0x04
    247e:	21 e3       	ldi	r18, 0x31	; 49
    2480:	fc 01       	movw	r30, r24
    2482:	20 83       	st	Z, r18
    2484:	8b 81       	ldd	r24, Y+3	; 0x03
    2486:	9c 81       	ldd	r25, Y+4	; 0x04
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9c 83       	std	Y+4, r25	; 0x04
    248c:	8b 83       	std	Y+3, r24	; 0x03
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	28 96       	adiw	r28, 0x08	; 8
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	08 95       	ret

000024a4 <xPortStartScheduler>:
    24a4:	cf 93       	push	r28
    24a6:	df 93       	push	r29
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	ff d0       	rcall	.+510    	; 0x26ac <prvSetupTimerInterrupt>
    24ae:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <pxCurrentTCB>
    24b2:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    24b6:	cd 91       	ld	r28, X+
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	dd 91       	ld	r29, X+
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	ff 91       	pop	r31
    24c0:	ef 91       	pop	r30
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	bf 91       	pop	r27
    24c8:	af 91       	pop	r26
    24ca:	9f 91       	pop	r25
    24cc:	8f 91       	pop	r24
    24ce:	7f 91       	pop	r23
    24d0:	6f 91       	pop	r22
    24d2:	5f 91       	pop	r21
    24d4:	4f 91       	pop	r20
    24d6:	3f 91       	pop	r19
    24d8:	2f 91       	pop	r18
    24da:	1f 91       	pop	r17
    24dc:	0f 91       	pop	r16
    24de:	ff 90       	pop	r15
    24e0:	ef 90       	pop	r14
    24e2:	df 90       	pop	r13
    24e4:	cf 90       	pop	r12
    24e6:	bf 90       	pop	r11
    24e8:	af 90       	pop	r10
    24ea:	9f 90       	pop	r9
    24ec:	8f 90       	pop	r8
    24ee:	7f 90       	pop	r7
    24f0:	6f 90       	pop	r6
    24f2:	5f 90       	pop	r5
    24f4:	4f 90       	pop	r4
    24f6:	3f 90       	pop	r3
    24f8:	2f 90       	pop	r2
    24fa:	1f 90       	pop	r1
    24fc:	0f 90       	pop	r0
    24fe:	0c be       	out	0x3c, r0	; 60
    2500:	0f 90       	pop	r0
    2502:	0b be       	out	0x3b, r0	; 59
    2504:	0f 90       	pop	r0
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	0f 90       	pop	r0
    250a:	08 95       	ret
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	08 95       	ret

00002514 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
    2514:	0f 92       	push	r0
    2516:	0f b6       	in	r0, 0x3f	; 63
    2518:	f8 94       	cli
    251a:	0f 92       	push	r0
    251c:	0b b6       	in	r0, 0x3b	; 59
    251e:	0f 92       	push	r0
    2520:	0c b6       	in	r0, 0x3c	; 60
    2522:	0f 92       	push	r0
    2524:	1f 92       	push	r1
    2526:	11 24       	eor	r1, r1
    2528:	2f 92       	push	r2
    252a:	3f 92       	push	r3
    252c:	4f 92       	push	r4
    252e:	5f 92       	push	r5
    2530:	6f 92       	push	r6
    2532:	7f 92       	push	r7
    2534:	8f 92       	push	r8
    2536:	9f 92       	push	r9
    2538:	af 92       	push	r10
    253a:	bf 92       	push	r11
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	cf 93       	push	r28
    255e:	df 93       	push	r29
    2560:	ef 93       	push	r30
    2562:	ff 93       	push	r31
    2564:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <pxCurrentTCB>
    2568:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    256c:	0d b6       	in	r0, 0x3d	; 61
    256e:	0d 92       	st	X+, r0
    2570:	0e b6       	in	r0, 0x3e	; 62
    2572:	0d 92       	st	X+, r0
    vTaskSwitchContext();
    2574:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
    2578:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <pxCurrentTCB>
    257c:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    2580:	cd 91       	ld	r28, X+
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	dd 91       	ld	r29, X+
    2586:	de bf       	out	0x3e, r29	; 62
    2588:	ff 91       	pop	r31
    258a:	ef 91       	pop	r30
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	bf 91       	pop	r27
    2592:	af 91       	pop	r26
    2594:	9f 91       	pop	r25
    2596:	8f 91       	pop	r24
    2598:	7f 91       	pop	r23
    259a:	6f 91       	pop	r22
    259c:	5f 91       	pop	r21
    259e:	4f 91       	pop	r20
    25a0:	3f 91       	pop	r19
    25a2:	2f 91       	pop	r18
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	df 90       	pop	r13
    25ae:	cf 90       	pop	r12
    25b0:	bf 90       	pop	r11
    25b2:	af 90       	pop	r10
    25b4:	9f 90       	pop	r9
    25b6:	8f 90       	pop	r8
    25b8:	7f 90       	pop	r7
    25ba:	6f 90       	pop	r6
    25bc:	5f 90       	pop	r5
    25be:	4f 90       	pop	r4
    25c0:	3f 90       	pop	r3
    25c2:	2f 90       	pop	r2
    25c4:	1f 90       	pop	r1
    25c6:	0f 90       	pop	r0
    25c8:	0c be       	out	0x3c, r0	; 60
    25ca:	0f 90       	pop	r0
    25cc:	0b be       	out	0x3b, r0	; 59
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    25d4:	08 95       	ret
	...

000025d8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    25d8:	0f 92       	push	r0
    25da:	0f b6       	in	r0, 0x3f	; 63
    25dc:	f8 94       	cli
    25de:	0f 92       	push	r0
    25e0:	0b b6       	in	r0, 0x3b	; 59
    25e2:	0f 92       	push	r0
    25e4:	0c b6       	in	r0, 0x3c	; 60
    25e6:	0f 92       	push	r0
    25e8:	1f 92       	push	r1
    25ea:	11 24       	eor	r1, r1
    25ec:	2f 92       	push	r2
    25ee:	3f 92       	push	r3
    25f0:	4f 92       	push	r4
    25f2:	5f 92       	push	r5
    25f4:	6f 92       	push	r6
    25f6:	7f 92       	push	r7
    25f8:	8f 92       	push	r8
    25fa:	9f 92       	push	r9
    25fc:	af 92       	push	r10
    25fe:	bf 92       	push	r11
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	2f 93       	push	r18
    260e:	3f 93       	push	r19
    2610:	4f 93       	push	r20
    2612:	5f 93       	push	r21
    2614:	6f 93       	push	r22
    2616:	7f 93       	push	r23
    2618:	8f 93       	push	r24
    261a:	9f 93       	push	r25
    261c:	af 93       	push	r26
    261e:	bf 93       	push	r27
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	ef 93       	push	r30
    2626:	ff 93       	push	r31
    2628:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <pxCurrentTCB>
    262c:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    2630:	0d b6       	in	r0, 0x3d	; 61
    2632:	0d 92       	st	X+, r0
    2634:	0e b6       	in	r0, 0x3e	; 62
    2636:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
    2638:	83 e5       	ldi	r24, 0x53	; 83
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	fc 01       	movw	r30, r24
    263e:	10 82       	st	Z, r1

    if( xTaskIncrementTick() != pdFALSE )
    2640:	0e 94 67 22 	call	0x44ce	; 0x44ce <xTaskIncrementTick>
    2644:	88 23       	and	r24, r24
    2646:	11 f0       	breq	.+4      	; 0x264c <vPortYieldFromTick+0x74>
    {
        vTaskSwitchContext();
    2648:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
    264c:	a0 91 70 17 	lds	r26, 0x1770	; 0x801770 <pxCurrentTCB>
    2650:	b0 91 71 17 	lds	r27, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    2654:	cd 91       	ld	r28, X+
    2656:	cd bf       	out	0x3d, r28	; 61
    2658:	dd 91       	ld	r29, X+
    265a:	de bf       	out	0x3e, r29	; 62
    265c:	ff 91       	pop	r31
    265e:	ef 91       	pop	r30
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	bf 91       	pop	r27
    2666:	af 91       	pop	r26
    2668:	9f 91       	pop	r25
    266a:	8f 91       	pop	r24
    266c:	7f 91       	pop	r23
    266e:	6f 91       	pop	r22
    2670:	5f 91       	pop	r21
    2672:	4f 91       	pop	r20
    2674:	3f 91       	pop	r19
    2676:	2f 91       	pop	r18
    2678:	1f 91       	pop	r17
    267a:	0f 91       	pop	r16
    267c:	ff 90       	pop	r15
    267e:	ef 90       	pop	r14
    2680:	df 90       	pop	r13
    2682:	cf 90       	pop	r12
    2684:	bf 90       	pop	r11
    2686:	af 90       	pop	r10
    2688:	9f 90       	pop	r9
    268a:	8f 90       	pop	r8
    268c:	7f 90       	pop	r7
    268e:	6f 90       	pop	r6
    2690:	5f 90       	pop	r5
    2692:	4f 90       	pop	r4
    2694:	3f 90       	pop	r3
    2696:	2f 90       	pop	r2
    2698:	1f 90       	pop	r1
    269a:	0f 90       	pop	r0
    269c:	0c be       	out	0x3c, r0	; 60
    269e:	0f 90       	pop	r0
    26a0:	0b be       	out	0x3b, r0	; 59
    26a2:	0f 90       	pop	r0
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    26a8:	08 95       	ret
	...

000026ac <prvSetupTimerInterrupt>:
}
/*-----------------------------------------------------------*/

//initialize watchdog
void prvSetupTimerInterrupt( void )
{
    26ac:	cf 93       	push	r28
    26ae:	df 93       	push	r29
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    //reset watchdog
    wdt_reset();
    26b4:	a8 95       	wdr
                "out __SREG__,__tmp_reg__"  "\n\t"
                "sts %0, %2"                "\n\t"
                : /* no outputs */
                : "n" (_SFR_MEM_ADDR(_WD_CONTROL_REG)),
                "r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
                "r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	88 70       	andi	r24, 0x08	; 8
    26bc:	99 27       	eor	r25, r25
    26be:	89 2b       	or	r24, r25
    26c0:	11 f0       	breq	.+4      	; 0x26c6 <prvSetupTimerInterrupt+0x1a>
    26c2:	80 ee       	ldi	r24, 0xE0	; 224
    26c4:	01 c0       	rjmp	.+2      	; 0x26c8 <prvSetupTimerInterrupt+0x1c>
    26c6:	80 ec       	ldi	r24, 0xC0	; 192
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	97 70       	andi	r25, 0x07	; 7
    26cc:	89 2b       	or	r24, r25
    26ce:	98 2f       	mov	r25, r24
                : "r0"
        );
    }
    else
    {
        __asm__ __volatile__ (
    26d0:	88 e1       	ldi	r24, 0x18	; 24
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	a8 95       	wdr
    26d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>

    //set up WDT Interrupt (rather than the WDT Reset).
    wdt_interrupt_enable( portUSE_WDTO );
}
    26e2:	00 00       	nop
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	08 95       	ret

000026ea <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    26ea:	76 df       	rcall	.-276    	; 0x25d8 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    26ec:	18 95       	reti
	...

000026f0 <xQueueGenericReset>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <xQueueGenericReset+0x6>
    26f6:	1f 92       	push	r1
    26f8:	1f 92       	push	r1
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9c 83       	std	Y+4, r25	; 0x04
    2700:	8b 83       	std	Y+3, r24	; 0x03
    2702:	6d 83       	std	Y+5, r22	; 0x05
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	0f 92       	push	r0
    2712:	89 81       	ldd	r24, Y+1	; 0x01
    2714:	9a 81       	ldd	r25, Y+2	; 0x02
    2716:	fc 01       	movw	r30, r24
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	29 81       	ldd	r18, Y+1	; 0x01
    271e:	3a 81       	ldd	r19, Y+2	; 0x02
    2720:	f9 01       	movw	r30, r18
    2722:	27 8d       	ldd	r18, Z+31	; 0x1f
    2724:	42 2f       	mov	r20, r18
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	29 81       	ldd	r18, Y+1	; 0x01
    272a:	3a 81       	ldd	r19, Y+2	; 0x02
    272c:	f9 01       	movw	r30, r18
    272e:	20 a1       	ldd	r18, Z+32	; 0x20
    2730:	22 2f       	mov	r18, r18
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	42 9f       	mul	r20, r18
    2736:	b0 01       	movw	r22, r0
    2738:	43 9f       	mul	r20, r19
    273a:	70 0d       	add	r23, r0
    273c:	52 9f       	mul	r21, r18
    273e:	70 0d       	add	r23, r0
    2740:	11 24       	eor	r1, r1
    2742:	9b 01       	movw	r18, r22
    2744:	28 0f       	add	r18, r24
    2746:	39 1f       	adc	r19, r25
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	fc 01       	movw	r30, r24
    274e:	35 83       	std	Z+5, r19	; 0x05
    2750:	24 83       	std	Z+4, r18	; 0x04
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	9a 81       	ldd	r25, Y+2	; 0x02
    2756:	fc 01       	movw	r30, r24
    2758:	16 8e       	std	Z+30, r1	; 0x1e
    275a:	89 81       	ldd	r24, Y+1	; 0x01
    275c:	9a 81       	ldd	r25, Y+2	; 0x02
    275e:	fc 01       	movw	r30, r24
    2760:	20 81       	ld	r18, Z
    2762:	31 81       	ldd	r19, Z+1	; 0x01
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	fc 01       	movw	r30, r24
    276a:	33 83       	std	Z+3, r19	; 0x03
    276c:	22 83       	std	Z+2, r18	; 0x02
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	9a 81       	ldd	r25, Y+2	; 0x02
    2772:	fc 01       	movw	r30, r24
    2774:	20 81       	ld	r18, Z
    2776:	31 81       	ldd	r19, Z+1	; 0x01
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	fc 01       	movw	r30, r24
    277e:	87 8d       	ldd	r24, Z+31	; 0x1f
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	bc 01       	movw	r22, r24
    2786:	61 50       	subi	r22, 0x01	; 1
    2788:	71 09       	sbc	r23, r1
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	fc 01       	movw	r30, r24
    2790:	80 a1       	ldd	r24, Z+32	; 0x20
    2792:	48 2f       	mov	r20, r24
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	64 9f       	mul	r22, r20
    2798:	c0 01       	movw	r24, r0
    279a:	65 9f       	mul	r22, r21
    279c:	90 0d       	add	r25, r0
    279e:	74 9f       	mul	r23, r20
    27a0:	90 0d       	add	r25, r0
    27a2:	11 24       	eor	r1, r1
    27a4:	28 0f       	add	r18, r24
    27a6:	39 1f       	adc	r19, r25
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	fc 01       	movw	r30, r24
    27ae:	37 83       	std	Z+7, r19	; 0x07
    27b0:	26 83       	std	Z+6, r18	; 0x06
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	9a 81       	ldd	r25, Y+2	; 0x02
    27b6:	2f ef       	ldi	r18, 0xFF	; 255
    27b8:	fc 01       	movw	r30, r24
    27ba:	21 a3       	std	Z+33, r18	; 0x21
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	9a 81       	ldd	r25, Y+2	; 0x02
    27c0:	2f ef       	ldi	r18, 0xFF	; 255
    27c2:	fc 01       	movw	r30, r24
    27c4:	22 a3       	std	Z+34, r18	; 0x22
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	88 23       	and	r24, r24
    27ca:	79 f4       	brne	.+30     	; 0x27ea <xQueueGenericReset+0xfa>
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	fc 01       	movw	r30, r24
    27d2:	80 85       	ldd	r24, Z+8	; 0x08
    27d4:	88 23       	and	r24, r24
    27d6:	89 f0       	breq	.+34     	; 0x27fa <xQueueGenericReset+0x10a>
    27d8:	89 81       	ldd	r24, Y+1	; 0x01
    27da:	9a 81       	ldd	r25, Y+2	; 0x02
    27dc:	08 96       	adiw	r24, 0x08	; 8
    27de:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    27e2:	88 23       	and	r24, r24
    27e4:	51 f0       	breq	.+20     	; 0x27fa <xQueueGenericReset+0x10a>
    27e6:	96 de       	rcall	.-724    	; 0x2514 <vPortYield>
    27e8:	08 c0       	rjmp	.+16     	; 0x27fa <xQueueGenericReset+0x10a>
    27ea:	89 81       	ldd	r24, Y+1	; 0x01
    27ec:	9a 81       	ldd	r25, Y+2	; 0x02
    27ee:	08 96       	adiw	r24, 0x08	; 8
    27f0:	1c db       	rcall	.-2504   	; 0x1e2a <vListInitialise>
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	43 96       	adiw	r24, 0x13	; 19
    27f8:	18 db       	rcall	.-2512   	; 0x1e2a <vListInitialise>
    27fa:	0f 90       	pop	r0
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	df 91       	pop	r29
    280c:	cf 91       	pop	r28
    280e:	08 95       	ret

00002810 <xQueueGenericCreate>:
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	cf 93       	push	r28
    2816:	df 93       	push	r29
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	29 97       	sbiw	r28, 0x09	; 9
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	8f 83       	std	Y+7, r24	; 0x07
    282a:	68 87       	std	Y+8, r22	; 0x08
    282c:	49 87       	std	Y+9, r20	; 0x09
    282e:	88 85       	ldd	r24, Y+8	; 0x08
    2830:	88 23       	and	r24, r24
    2832:	19 f4       	brne	.+6      	; 0x283a <xQueueGenericCreate+0x2a>
    2834:	1a 82       	std	Y+2, r1	; 0x02
    2836:	19 82       	std	Y+1, r1	; 0x01
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <xQueueGenericCreate+0x48>
    283a:	8f 81       	ldd	r24, Y+7	; 0x07
    283c:	48 2f       	mov	r20, r24
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	88 85       	ldd	r24, Y+8	; 0x08
    2842:	28 2f       	mov	r18, r24
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	42 9f       	mul	r20, r18
    2848:	c0 01       	movw	r24, r0
    284a:	43 9f       	mul	r20, r19
    284c:	90 0d       	add	r25, r0
    284e:	52 9f       	mul	r21, r18
    2850:	90 0d       	add	r25, r0
    2852:	11 24       	eor	r1, r1
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	85 96       	adiw	r24, 0x25	; 37
    285e:	4c d8       	rcall	.-3944   	; 0x18f8 <pvPortMalloc>
    2860:	9c 83       	std	Y+4, r25	; 0x04
    2862:	8b 83       	std	Y+3, r24	; 0x03
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	89 2b       	or	r24, r25
    286a:	99 f0       	breq	.+38     	; 0x2892 <xQueueGenericCreate+0x82>
    286c:	8b 81       	ldd	r24, Y+3	; 0x03
    286e:	9c 81       	ldd	r25, Y+4	; 0x04
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	85 96       	adiw	r24, 0x25	; 37
    287a:	9e 83       	std	Y+6, r25	; 0x06
    287c:	8d 83       	std	Y+5, r24	; 0x05
    287e:	2b 81       	ldd	r18, Y+3	; 0x03
    2880:	3c 81       	ldd	r19, Y+4	; 0x04
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	89 01       	movw	r16, r18
    2888:	29 85       	ldd	r18, Y+9	; 0x09
    288a:	ac 01       	movw	r20, r24
    288c:	68 85       	ldd	r22, Y+8	; 0x08
    288e:	8f 81       	ldd	r24, Y+7	; 0x07
    2890:	0d d0       	rcall	.+26     	; 0x28ac <prvInitialiseNewQueue>
    2892:	8b 81       	ldd	r24, Y+3	; 0x03
    2894:	9c 81       	ldd	r25, Y+4	; 0x04
    2896:	29 96       	adiw	r28, 0x09	; 9
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	08 95       	ret

000028ac <prvInitialiseNewQueue>:
    28ac:	0f 93       	push	r16
    28ae:	1f 93       	push	r17
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	cd b7       	in	r28, 0x3d	; 61
    28b6:	de b7       	in	r29, 0x3e	; 62
    28b8:	27 97       	sbiw	r28, 0x07	; 7
    28ba:	0f b6       	in	r0, 0x3f	; 63
    28bc:	f8 94       	cli
    28be:	de bf       	out	0x3e, r29	; 62
    28c0:	0f be       	out	0x3f, r0	; 63
    28c2:	cd bf       	out	0x3d, r28	; 61
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	6a 83       	std	Y+2, r22	; 0x02
    28c8:	5c 83       	std	Y+4, r21	; 0x04
    28ca:	4b 83       	std	Y+3, r20	; 0x03
    28cc:	2d 83       	std	Y+5, r18	; 0x05
    28ce:	1f 83       	std	Y+7, r17	; 0x07
    28d0:	0e 83       	std	Y+6, r16	; 0x06
    28d2:	8a 81       	ldd	r24, Y+2	; 0x02
    28d4:	88 23       	and	r24, r24
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <prvInitialiseNewQueue+0x3c>
    28d8:	8e 81       	ldd	r24, Y+6	; 0x06
    28da:	9f 81       	ldd	r25, Y+7	; 0x07
    28dc:	2e 81       	ldd	r18, Y+6	; 0x06
    28de:	3f 81       	ldd	r19, Y+7	; 0x07
    28e0:	fc 01       	movw	r30, r24
    28e2:	31 83       	std	Z+1, r19	; 0x01
    28e4:	20 83       	st	Z, r18
    28e6:	07 c0       	rjmp	.+14     	; 0x28f6 <prvInitialiseNewQueue+0x4a>
    28e8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ea:	9f 81       	ldd	r25, Y+7	; 0x07
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	fc 01       	movw	r30, r24
    28f2:	31 83       	std	Z+1, r19	; 0x01
    28f4:	20 83       	st	Z, r18
    28f6:	8e 81       	ldd	r24, Y+6	; 0x06
    28f8:	9f 81       	ldd	r25, Y+7	; 0x07
    28fa:	29 81       	ldd	r18, Y+1	; 0x01
    28fc:	fc 01       	movw	r30, r24
    28fe:	27 8f       	std	Z+31, r18	; 0x1f
    2900:	8e 81       	ldd	r24, Y+6	; 0x06
    2902:	9f 81       	ldd	r25, Y+7	; 0x07
    2904:	2a 81       	ldd	r18, Y+2	; 0x02
    2906:	fc 01       	movw	r30, r24
    2908:	20 a3       	std	Z+32, r18	; 0x20
    290a:	8e 81       	ldd	r24, Y+6	; 0x06
    290c:	9f 81       	ldd	r25, Y+7	; 0x07
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	ef de       	rcall	.-546    	; 0x26f0 <xQueueGenericReset>
    2912:	8e 81       	ldd	r24, Y+6	; 0x06
    2914:	9f 81       	ldd	r25, Y+7	; 0x07
    2916:	2d 81       	ldd	r18, Y+5	; 0x05
    2918:	fc 01       	movw	r30, r24
    291a:	24 a3       	std	Z+36, r18	; 0x24
    291c:	00 00       	nop
    291e:	27 96       	adiw	r28, 0x07	; 7
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	de bf       	out	0x3e, r29	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	cd bf       	out	0x3d, r28	; 61
    292a:	df 91       	pop	r29
    292c:	cf 91       	pop	r28
    292e:	1f 91       	pop	r17
    2930:	0f 91       	pop	r16
    2932:	08 95       	ret

00002934 <prvInitialiseMutex>:
    2934:	0f 93       	push	r16
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	1f 92       	push	r1
    293c:	1f 92       	push	r1
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	9a 83       	std	Y+2, r25	; 0x02
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	89 81       	ldd	r24, Y+1	; 0x01
    2948:	9a 81       	ldd	r25, Y+2	; 0x02
    294a:	89 2b       	or	r24, r25
    294c:	b9 f0       	breq	.+46     	; 0x297c <prvInitialiseMutex+0x48>
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	fc 01       	movw	r30, r24
    2954:	15 82       	std	Z+5, r1	; 0x05
    2956:	14 82       	std	Z+4, r1	; 0x04
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	9a 81       	ldd	r25, Y+2	; 0x02
    295c:	fc 01       	movw	r30, r24
    295e:	11 82       	std	Z+1, r1	; 0x01
    2960:	10 82       	st	Z, r1
    2962:	89 81       	ldd	r24, Y+1	; 0x01
    2964:	9a 81       	ldd	r25, Y+2	; 0x02
    2966:	fc 01       	movw	r30, r24
    2968:	16 82       	std	Z+6, r1	; 0x06
    296a:	89 81       	ldd	r24, Y+1	; 0x01
    296c:	9a 81       	ldd	r25, Y+2	; 0x02
    296e:	00 e0       	ldi	r16, 0x00	; 0
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	a9 01       	movw	r20, r18
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	70 e0       	ldi	r23, 0x00	; 0
    297a:	25 d0       	rcall	.+74     	; 0x29c6 <xQueueGenericSend>
    297c:	00 00       	nop
    297e:	0f 90       	pop	r0
    2980:	0f 90       	pop	r0
    2982:	df 91       	pop	r29
    2984:	cf 91       	pop	r28
    2986:	0f 91       	pop	r16
    2988:	08 95       	ret

0000298a <xQueueCreateMutex>:
    298a:	cf 93       	push	r28
    298c:	df 93       	push	r29
    298e:	00 d0       	rcall	.+0      	; 0x2990 <xQueueCreateMutex+0x6>
    2990:	1f 92       	push	r1
    2992:	1f 92       	push	r1
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
    2998:	8d 83       	std	Y+5, r24	; 0x05
    299a:	81 e0       	ldi	r24, 0x01	; 1
    299c:	89 83       	std	Y+1, r24	; 0x01
    299e:	1a 82       	std	Y+2, r1	; 0x02
    29a0:	4d 81       	ldd	r20, Y+5	; 0x05
    29a2:	6a 81       	ldd	r22, Y+2	; 0x02
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	34 df       	rcall	.-408    	; 0x2810 <xQueueGenericCreate>
    29a8:	9c 83       	std	Y+4, r25	; 0x04
    29aa:	8b 83       	std	Y+3, r24	; 0x03
    29ac:	8b 81       	ldd	r24, Y+3	; 0x03
    29ae:	9c 81       	ldd	r25, Y+4	; 0x04
    29b0:	c1 df       	rcall	.-126    	; 0x2934 <prvInitialiseMutex>
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	9c 81       	ldd	r25, Y+4	; 0x04
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	08 95       	ret

000029c6 <xQueueGenericSend>:
    29c6:	0f 93       	push	r16
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	62 97       	sbiw	r28, 0x12	; 18
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	9b 87       	std	Y+11, r25	; 0x0b
    29de:	8a 87       	std	Y+10, r24	; 0x0a
    29e0:	7d 87       	std	Y+13, r23	; 0x0d
    29e2:	6c 87       	std	Y+12, r22	; 0x0c
    29e4:	2e 87       	std	Y+14, r18	; 0x0e
    29e6:	3f 87       	std	Y+15, r19	; 0x0f
    29e8:	48 8b       	std	Y+16, r20	; 0x10
    29ea:	59 8b       	std	Y+17, r21	; 0x11
    29ec:	0a 8b       	std	Y+18, r16	; 0x12
    29ee:	19 82       	std	Y+1, r1	; 0x01
    29f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    29f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    29f4:	9b 83       	std	Y+3, r25	; 0x03
    29f6:	8a 83       	std	Y+2, r24	; 0x02
    29f8:	0f b6       	in	r0, 0x3f	; 63
    29fa:	f8 94       	cli
    29fc:	0f 92       	push	r0
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	9b 81       	ldd	r25, Y+3	; 0x03
    2a02:	fc 01       	movw	r30, r24
    2a04:	26 8d       	ldd	r18, Z+30	; 0x1e
    2a06:	8a 81       	ldd	r24, Y+2	; 0x02
    2a08:	9b 81       	ldd	r25, Y+3	; 0x03
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	87 8d       	ldd	r24, Z+31	; 0x1f
    2a0e:	28 17       	cp	r18, r24
    2a10:	18 f0       	brcs	.+6      	; 0x2a18 <xQueueGenericSend+0x52>
    2a12:	8a 89       	ldd	r24, Y+18	; 0x12
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	f9 f4       	brne	.+62     	; 0x2a56 <xQueueGenericSend+0x90>
    2a18:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a1a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a20:	4a 89       	ldd	r20, Y+18	; 0x12
    2a22:	b9 01       	movw	r22, r18
    2a24:	a1 d2       	rcall	.+1346   	; 0x2f68 <prvCopyDataToQueue>
    2a26:	8c 83       	std	Y+4, r24	; 0x04
    2a28:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	83 89       	ldd	r24, Z+19	; 0x13
    2a30:	88 23       	and	r24, r24
    2a32:	49 f0       	breq	.+18     	; 0x2a46 <xQueueGenericSend+0x80>
    2a34:	8a 81       	ldd	r24, Y+2	; 0x02
    2a36:	9b 81       	ldd	r25, Y+3	; 0x03
    2a38:	43 96       	adiw	r24, 0x13	; 19
    2a3a:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    2a3e:	88 23       	and	r24, r24
    2a40:	31 f0       	breq	.+12     	; 0x2a4e <xQueueGenericSend+0x88>
    2a42:	68 dd       	rcall	.-1328   	; 0x2514 <vPortYield>
    2a44:	04 c0       	rjmp	.+8      	; 0x2a4e <xQueueGenericSend+0x88>
    2a46:	8c 81       	ldd	r24, Y+4	; 0x04
    2a48:	88 23       	and	r24, r24
    2a4a:	09 f0       	breq	.+2      	; 0x2a4e <xQueueGenericSend+0x88>
    2a4c:	63 dd       	rcall	.-1338   	; 0x2514 <vPortYield>
    2a4e:	0f 90       	pop	r0
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	64 c0       	rjmp	.+200    	; 0x2b1e <xQueueGenericSend+0x158>
    2a56:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a58:	9f 85       	ldd	r25, Y+15	; 0x0f
    2a5a:	a8 89       	ldd	r26, Y+16	; 0x10
    2a5c:	b9 89       	ldd	r27, Y+17	; 0x11
    2a5e:	89 2b       	or	r24, r25
    2a60:	8a 2b       	or	r24, r26
    2a62:	8b 2b       	or	r24, r27
    2a64:	21 f4       	brne	.+8      	; 0x2a6e <xQueueGenericSend+0xa8>
    2a66:	0f 90       	pop	r0
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	80 e0       	ldi	r24, 0x00	; 0
    2a6c:	58 c0       	rjmp	.+176    	; 0x2b1e <xQueueGenericSend+0x158>
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	88 23       	and	r24, r24
    2a72:	31 f4       	brne	.+12     	; 0x2a80 <xQueueGenericSend+0xba>
    2a74:	ce 01       	movw	r24, r28
    2a76:	05 96       	adiw	r24, 0x05	; 5
    2a78:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <vTaskInternalSetTimeOutState>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	89 83       	std	Y+1, r24	; 0x01
    2a80:	0f 90       	pop	r0
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    2a88:	0f b6       	in	r0, 0x3f	; 63
    2a8a:	f8 94       	cli
    2a8c:	0f 92       	push	r0
    2a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a90:	9b 81       	ldd	r25, Y+3	; 0x03
    2a92:	fc 01       	movw	r30, r24
    2a94:	81 a1       	ldd	r24, Z+33	; 0x21
    2a96:	8f 3f       	cpi	r24, 0xFF	; 255
    2a98:	21 f4       	brne	.+8      	; 0x2aa2 <xQueueGenericSend+0xdc>
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	11 a2       	std	Z+33, r1	; 0x21
    2aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa6:	fc 01       	movw	r30, r24
    2aa8:	82 a1       	ldd	r24, Z+34	; 0x22
    2aaa:	8f 3f       	cpi	r24, 0xFF	; 255
    2aac:	21 f4       	brne	.+8      	; 0x2ab6 <xQueueGenericSend+0xf0>
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab2:	fc 01       	movw	r30, r24
    2ab4:	12 a2       	std	Z+34, r1	; 0x22
    2ab6:	0f 90       	pop	r0
    2ab8:	0f be       	out	0x3f, r0	; 63
    2aba:	9e 01       	movw	r18, r28
    2abc:	22 5f       	subi	r18, 0xF2	; 242
    2abe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac0:	ce 01       	movw	r24, r28
    2ac2:	05 96       	adiw	r24, 0x05	; 5
    2ac4:	b9 01       	movw	r22, r18
    2ac6:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <xTaskCheckForTimeOut>
    2aca:	88 23       	and	r24, r24
    2acc:	11 f5       	brne	.+68     	; 0x2b12 <xQueueGenericSend+0x14c>
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad2:	e6 d3       	rcall	.+1996   	; 0x32a0 <prvIsQueueFull>
    2ad4:	88 23       	and	r24, r24
    2ad6:	b9 f0       	breq	.+46     	; 0x2b06 <xQueueGenericSend+0x140>
    2ad8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ada:	9f 85       	ldd	r25, Y+15	; 0x0f
    2adc:	a8 89       	ldd	r26, Y+16	; 0x10
    2ade:	b9 89       	ldd	r27, Y+17	; 0x11
    2ae0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ae2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ae4:	28 5f       	subi	r18, 0xF8	; 248
    2ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae8:	ac 01       	movw	r20, r24
    2aea:	bd 01       	movw	r22, r26
    2aec:	c9 01       	movw	r24, r18
    2aee:	0e 94 1a 24 	call	0x4834	; 0x4834 <vTaskPlaceOnEventList>
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	9b 81       	ldd	r25, Y+3	; 0x03
    2af6:	59 d3       	rcall	.+1714   	; 0x31aa <prvUnlockQueue>
    2af8:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2afc:	88 23       	and	r24, r24
    2afe:	09 f0       	breq	.+2      	; 0x2b02 <xQueueGenericSend+0x13c>
    2b00:	7b cf       	rjmp	.-266    	; 0x29f8 <xQueueGenericSend+0x32>
    2b02:	08 dd       	rcall	.-1520   	; 0x2514 <vPortYield>
    2b04:	79 cf       	rjmp	.-270    	; 0x29f8 <xQueueGenericSend+0x32>
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0a:	4f d3       	rcall	.+1694   	; 0x31aa <prvUnlockQueue>
    2b0c:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2b10:	73 cf       	rjmp	.-282    	; 0x29f8 <xQueueGenericSend+0x32>
    2b12:	8a 81       	ldd	r24, Y+2	; 0x02
    2b14:	9b 81       	ldd	r25, Y+3	; 0x03
    2b16:	49 d3       	rcall	.+1682   	; 0x31aa <prvUnlockQueue>
    2b18:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2b1c:	80 e0       	ldi	r24, 0x00	; 0
    2b1e:	62 96       	adiw	r28, 0x12	; 18
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	0f 91       	pop	r16
    2b30:	08 95       	ret

00002b32 <xQueueGenericSendFromISR>:
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	2c 97       	sbiw	r28, 0x0c	; 12
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	9f 83       	std	Y+7, r25	; 0x07
    2b48:	8e 83       	std	Y+6, r24	; 0x06
    2b4a:	79 87       	std	Y+9, r23	; 0x09
    2b4c:	68 87       	std	Y+8, r22	; 0x08
    2b4e:	5b 87       	std	Y+11, r21	; 0x0b
    2b50:	4a 87       	std	Y+10, r20	; 0x0a
    2b52:	2c 87       	std	Y+12, r18	; 0x0c
    2b54:	8e 81       	ldd	r24, Y+6	; 0x06
    2b56:	9f 81       	ldd	r25, Y+7	; 0x07
    2b58:	9b 83       	std	Y+3, r25	; 0x03
    2b5a:	8a 83       	std	Y+2, r24	; 0x02
    2b5c:	1c 82       	std	Y+4, r1	; 0x04
    2b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b60:	9b 81       	ldd	r25, Y+3	; 0x03
    2b62:	fc 01       	movw	r30, r24
    2b64:	26 8d       	ldd	r18, Z+30	; 0x1e
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	9b 81       	ldd	r25, Y+3	; 0x03
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	87 8d       	ldd	r24, Z+31	; 0x1f
    2b6e:	28 17       	cp	r18, r24
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <xQueueGenericSendFromISR+0x46>
    2b72:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b74:	82 30       	cpi	r24, 0x02	; 2
    2b76:	81 f5       	brne	.+96     	; 0x2bd8 <xQueueGenericSendFromISR+0xa6>
    2b78:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7c:	fc 01       	movw	r30, r24
    2b7e:	82 a1       	ldd	r24, Z+34	; 0x22
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	28 85       	ldd	r18, Y+8	; 0x08
    2b84:	39 85       	ldd	r19, Y+9	; 0x09
    2b86:	8a 81       	ldd	r24, Y+2	; 0x02
    2b88:	9b 81       	ldd	r25, Y+3	; 0x03
    2b8a:	4c 85       	ldd	r20, Y+12	; 0x0c
    2b8c:	b9 01       	movw	r22, r18
    2b8e:	ec d1       	rcall	.+984    	; 0x2f68 <prvCopyDataToQueue>
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	8f 3f       	cpi	r24, 0xFF	; 255
    2b94:	b9 f4       	brne	.+46     	; 0x2bc4 <xQueueGenericSendFromISR+0x92>
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	83 89       	ldd	r24, Z+19	; 0x13
    2b9e:	88 23       	and	r24, r24
    2ba0:	c1 f0       	breq	.+48     	; 0x2bd2 <xQueueGenericSendFromISR+0xa0>
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	43 96       	adiw	r24, 0x13	; 19
    2ba8:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    2bac:	88 23       	and	r24, r24
    2bae:	89 f0       	breq	.+34     	; 0x2bd2 <xQueueGenericSendFromISR+0xa0>
    2bb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb4:	89 2b       	or	r24, r25
    2bb6:	69 f0       	breq	.+26     	; 0x2bd2 <xQueueGenericSendFromISR+0xa0>
    2bb8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bba:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bbc:	21 e0       	ldi	r18, 0x01	; 1
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	20 83       	st	Z, r18
    2bc2:	07 c0       	rjmp	.+14     	; 0x2bd2 <xQueueGenericSendFromISR+0xa0>
    2bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc6:	8f 5f       	subi	r24, 0xFF	; 255
    2bc8:	28 2f       	mov	r18, r24
    2bca:	8a 81       	ldd	r24, Y+2	; 0x02
    2bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bce:	fc 01       	movw	r30, r24
    2bd0:	22 a3       	std	Z+34, r18	; 0x22
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	89 83       	std	Y+1, r24	; 0x01
    2bd6:	01 c0       	rjmp	.+2      	; 0x2bda <xQueueGenericSendFromISR+0xa8>
    2bd8:	19 82       	std	Y+1, r1	; 0x01
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	2c 96       	adiw	r28, 0x0c	; 12
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	08 95       	ret

00002bee <xQueueReceive>:
    2bee:	cf 93       	push	r28
    2bf0:	df 93       	push	r29
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
    2bf6:	61 97       	sbiw	r28, 0x11	; 17
    2bf8:	0f b6       	in	r0, 0x3f	; 63
    2bfa:	f8 94       	cli
    2bfc:	de bf       	out	0x3e, r29	; 62
    2bfe:	0f be       	out	0x3f, r0	; 63
    2c00:	cd bf       	out	0x3d, r28	; 61
    2c02:	9b 87       	std	Y+11, r25	; 0x0b
    2c04:	8a 87       	std	Y+10, r24	; 0x0a
    2c06:	7d 87       	std	Y+13, r23	; 0x0d
    2c08:	6c 87       	std	Y+12, r22	; 0x0c
    2c0a:	2e 87       	std	Y+14, r18	; 0x0e
    2c0c:	3f 87       	std	Y+15, r19	; 0x0f
    2c0e:	48 8b       	std	Y+16, r20	; 0x10
    2c10:	59 8b       	std	Y+17, r21	; 0x11
    2c12:	19 82       	std	Y+1, r1	; 0x01
    2c14:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c16:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c18:	9b 83       	std	Y+3, r25	; 0x03
    2c1a:	8a 83       	std	Y+2, r24	; 0x02
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	0f 92       	push	r0
    2c22:	8a 81       	ldd	r24, Y+2	; 0x02
    2c24:	9b 81       	ldd	r25, Y+3	; 0x03
    2c26:	fc 01       	movw	r30, r24
    2c28:	86 8d       	ldd	r24, Z+30	; 0x1e
    2c2a:	8c 83       	std	Y+4, r24	; 0x04
    2c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2e:	88 23       	and	r24, r24
    2c30:	f9 f0       	breq	.+62     	; 0x2c70 <xQueueReceive+0x82>
    2c32:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c34:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	b9 01       	movw	r22, r18
    2c3c:	65 d2       	rcall	.+1226   	; 0x3108 <prvCopyDataFromQueue>
    2c3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c40:	2f ef       	ldi	r18, 0xFF	; 255
    2c42:	28 0f       	add	r18, r24
    2c44:	8a 81       	ldd	r24, Y+2	; 0x02
    2c46:	9b 81       	ldd	r25, Y+3	; 0x03
    2c48:	fc 01       	movw	r30, r24
    2c4a:	26 8f       	std	Z+30, r18	; 0x1e
    2c4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c50:	fc 01       	movw	r30, r24
    2c52:	80 85       	ldd	r24, Z+8	; 0x08
    2c54:	88 23       	and	r24, r24
    2c56:	41 f0       	breq	.+16     	; 0x2c68 <xQueueReceive+0x7a>
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5c:	08 96       	adiw	r24, 0x08	; 8
    2c5e:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    2c62:	88 23       	and	r24, r24
    2c64:	09 f0       	breq	.+2      	; 0x2c68 <xQueueReceive+0x7a>
    2c66:	56 dc       	rcall	.-1876   	; 0x2514 <vPortYield>
    2c68:	0f 90       	pop	r0
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	6a c0       	rjmp	.+212    	; 0x2d44 <xQueueReceive+0x156>
    2c70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c74:	a8 89       	ldd	r26, Y+16	; 0x10
    2c76:	b9 89       	ldd	r27, Y+17	; 0x11
    2c78:	89 2b       	or	r24, r25
    2c7a:	8a 2b       	or	r24, r26
    2c7c:	8b 2b       	or	r24, r27
    2c7e:	21 f4       	brne	.+8      	; 0x2c88 <xQueueReceive+0x9a>
    2c80:	0f 90       	pop	r0
    2c82:	0f be       	out	0x3f, r0	; 63
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	5e c0       	rjmp	.+188    	; 0x2d44 <xQueueReceive+0x156>
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	88 23       	and	r24, r24
    2c8c:	31 f4       	brne	.+12     	; 0x2c9a <xQueueReceive+0xac>
    2c8e:	ce 01       	movw	r24, r28
    2c90:	05 96       	adiw	r24, 0x05	; 5
    2c92:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <vTaskInternalSetTimeOutState>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	89 83       	std	Y+1, r24	; 0x01
    2c9a:	0f 90       	pop	r0
    2c9c:	0f be       	out	0x3f, r0	; 63
    2c9e:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	0f 92       	push	r0
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cac:	fc 01       	movw	r30, r24
    2cae:	81 a1       	ldd	r24, Z+33	; 0x21
    2cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb2:	21 f4       	brne	.+8      	; 0x2cbc <xQueueReceive+0xce>
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	fc 01       	movw	r30, r24
    2cba:	11 a2       	std	Z+33, r1	; 0x21
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	fc 01       	movw	r30, r24
    2cc2:	82 a1       	ldd	r24, Z+34	; 0x22
    2cc4:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <xQueueReceive+0xe2>
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	fc 01       	movw	r30, r24
    2cce:	12 a2       	std	Z+34, r1	; 0x22
    2cd0:	0f 90       	pop	r0
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	9e 01       	movw	r18, r28
    2cd6:	22 5f       	subi	r18, 0xF2	; 242
    2cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cda:	ce 01       	movw	r24, r28
    2cdc:	05 96       	adiw	r24, 0x05	; 5
    2cde:	b9 01       	movw	r22, r18
    2ce0:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <xTaskCheckForTimeOut>
    2ce4:	88 23       	and	r24, r24
    2ce6:	11 f5       	brne	.+68     	; 0x2d2c <xQueueReceive+0x13e>
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	bc d2       	rcall	.+1400   	; 0x3266 <prvIsQueueEmpty>
    2cee:	88 23       	and	r24, r24
    2cf0:	b9 f0       	breq	.+46     	; 0x2d20 <xQueueReceive+0x132>
    2cf2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2cf6:	a8 89       	ldd	r26, Y+16	; 0x10
    2cf8:	b9 89       	ldd	r27, Y+17	; 0x11
    2cfa:	2a 81       	ldd	r18, Y+2	; 0x02
    2cfc:	3b 81       	ldd	r19, Y+3	; 0x03
    2cfe:	2d 5e       	subi	r18, 0xED	; 237
    2d00:	3f 4f       	sbci	r19, 0xFF	; 255
    2d02:	ac 01       	movw	r20, r24
    2d04:	bd 01       	movw	r22, r26
    2d06:	c9 01       	movw	r24, r18
    2d08:	0e 94 1a 24 	call	0x4834	; 0x4834 <vTaskPlaceOnEventList>
    2d0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d10:	4c d2       	rcall	.+1176   	; 0x31aa <prvUnlockQueue>
    2d12:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2d16:	88 23       	and	r24, r24
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <xQueueReceive+0x12e>
    2d1a:	80 cf       	rjmp	.-256    	; 0x2c1c <xQueueReceive+0x2e>
    2d1c:	fb db       	rcall	.-2058   	; 0x2514 <vPortYield>
    2d1e:	7e cf       	rjmp	.-260    	; 0x2c1c <xQueueReceive+0x2e>
    2d20:	8a 81       	ldd	r24, Y+2	; 0x02
    2d22:	9b 81       	ldd	r25, Y+3	; 0x03
    2d24:	42 d2       	rcall	.+1156   	; 0x31aa <prvUnlockQueue>
    2d26:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2d2a:	78 cf       	rjmp	.-272    	; 0x2c1c <xQueueReceive+0x2e>
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d30:	3c d2       	rcall	.+1144   	; 0x31aa <prvUnlockQueue>
    2d32:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2d36:	8a 81       	ldd	r24, Y+2	; 0x02
    2d38:	9b 81       	ldd	r25, Y+3	; 0x03
    2d3a:	95 d2       	rcall	.+1322   	; 0x3266 <prvIsQueueEmpty>
    2d3c:	88 23       	and	r24, r24
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <xQueueReceive+0x154>
    2d40:	6d cf       	rjmp	.-294    	; 0x2c1c <xQueueReceive+0x2e>
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	61 96       	adiw	r28, 0x11	; 17
    2d46:	0f b6       	in	r0, 0x3f	; 63
    2d48:	f8 94       	cli
    2d4a:	de bf       	out	0x3e, r29	; 62
    2d4c:	0f be       	out	0x3f, r0	; 63
    2d4e:	cd bf       	out	0x3d, r28	; 61
    2d50:	df 91       	pop	r29
    2d52:	cf 91       	pop	r28
    2d54:	08 95       	ret

00002d56 <xQueueSemaphoreTake>:
    2d56:	cf 93       	push	r28
    2d58:	df 93       	push	r29
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
    2d5e:	61 97       	sbiw	r28, 0x11	; 17
    2d60:	0f b6       	in	r0, 0x3f	; 63
    2d62:	f8 94       	cli
    2d64:	de bf       	out	0x3e, r29	; 62
    2d66:	0f be       	out	0x3f, r0	; 63
    2d68:	cd bf       	out	0x3d, r28	; 61
    2d6a:	9d 87       	std	Y+13, r25	; 0x0d
    2d6c:	8c 87       	std	Y+12, r24	; 0x0c
    2d6e:	4e 87       	std	Y+14, r20	; 0x0e
    2d70:	5f 87       	std	Y+15, r21	; 0x0f
    2d72:	68 8b       	std	Y+16, r22	; 0x10
    2d74:	79 8b       	std	Y+17, r23	; 0x11
    2d76:	19 82       	std	Y+1, r1	; 0x01
    2d78:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d7a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d7c:	9c 83       	std	Y+4, r25	; 0x04
    2d7e:	8b 83       	std	Y+3, r24	; 0x03
    2d80:	1a 82       	std	Y+2, r1	; 0x02
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	0f 92       	push	r0
    2d88:	8b 81       	ldd	r24, Y+3	; 0x03
    2d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2d90:	8d 83       	std	Y+5, r24	; 0x05
    2d92:	8d 81       	ldd	r24, Y+5	; 0x05
    2d94:	88 23       	and	r24, r24
    2d96:	41 f1       	breq	.+80     	; 0x2de8 <xQueueSemaphoreTake+0x92>
    2d98:	8d 81       	ldd	r24, Y+5	; 0x05
    2d9a:	2f ef       	ldi	r18, 0xFF	; 255
    2d9c:	28 0f       	add	r18, r24
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	9c 81       	ldd	r25, Y+4	; 0x04
    2da2:	fc 01       	movw	r30, r24
    2da4:	26 8f       	std	Z+30, r18	; 0x1e
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	fc 01       	movw	r30, r24
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	89 2b       	or	r24, r25
    2db2:	41 f4       	brne	.+16     	; 0x2dc4 <xQueueSemaphoreTake+0x6e>
    2db4:	0e 94 c6 29 	call	0x538c	; 0x538c <pvTaskIncrementMutexHeldCount>
    2db8:	9c 01       	movw	r18, r24
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	35 83       	std	Z+5, r19	; 0x05
    2dc2:	24 83       	std	Z+4, r18	; 0x04
    2dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2dc8:	fc 01       	movw	r30, r24
    2dca:	80 85       	ldd	r24, Z+8	; 0x08
    2dcc:	88 23       	and	r24, r24
    2dce:	41 f0       	breq	.+16     	; 0x2de0 <xQueueSemaphoreTake+0x8a>
    2dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd4:	08 96       	adiw	r24, 0x08	; 8
    2dd6:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    2dda:	88 23       	and	r24, r24
    2ddc:	09 f0       	breq	.+2      	; 0x2de0 <xQueueSemaphoreTake+0x8a>
    2dde:	9a db       	rcall	.-2252   	; 0x2514 <vPortYield>
    2de0:	0f 90       	pop	r0
    2de2:	0f be       	out	0x3f, r0	; 63
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	93 c0       	rjmp	.+294    	; 0x2f0e <xQueueSemaphoreTake+0x1b8>
    2de8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dea:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dec:	a8 89       	ldd	r26, Y+16	; 0x10
    2dee:	b9 89       	ldd	r27, Y+17	; 0x11
    2df0:	89 2b       	or	r24, r25
    2df2:	8a 2b       	or	r24, r26
    2df4:	8b 2b       	or	r24, r27
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <xQueueSemaphoreTake+0xaa>
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	87 c0       	rjmp	.+270    	; 0x2f0e <xQueueSemaphoreTake+0x1b8>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	88 23       	and	r24, r24
    2e04:	31 f4       	brne	.+12     	; 0x2e12 <xQueueSemaphoreTake+0xbc>
    2e06:	ce 01       	movw	r24, r28
    2e08:	07 96       	adiw	r24, 0x07	; 7
    2e0a:	0e 94 be 25 	call	0x4b7c	; 0x4b7c <vTaskInternalSetTimeOutState>
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	89 83       	std	Y+1, r24	; 0x01
    2e12:	0f 90       	pop	r0
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	0f 92       	push	r0
    2e20:	8b 81       	ldd	r24, Y+3	; 0x03
    2e22:	9c 81       	ldd	r25, Y+4	; 0x04
    2e24:	fc 01       	movw	r30, r24
    2e26:	81 a1       	ldd	r24, Z+33	; 0x21
    2e28:	8f 3f       	cpi	r24, 0xFF	; 255
    2e2a:	21 f4       	brne	.+8      	; 0x2e34 <xQueueSemaphoreTake+0xde>
    2e2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e30:	fc 01       	movw	r30, r24
    2e32:	11 a2       	std	Z+33, r1	; 0x21
    2e34:	8b 81       	ldd	r24, Y+3	; 0x03
    2e36:	9c 81       	ldd	r25, Y+4	; 0x04
    2e38:	fc 01       	movw	r30, r24
    2e3a:	82 a1       	ldd	r24, Z+34	; 0x22
    2e3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2e3e:	21 f4       	brne	.+8      	; 0x2e48 <xQueueSemaphoreTake+0xf2>
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	fc 01       	movw	r30, r24
    2e46:	12 a2       	std	Z+34, r1	; 0x22
    2e48:	0f 90       	pop	r0
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	9e 01       	movw	r18, r28
    2e4e:	22 5f       	subi	r18, 0xF2	; 242
    2e50:	3f 4f       	sbci	r19, 0xFF	; 255
    2e52:	ce 01       	movw	r24, r28
    2e54:	07 96       	adiw	r24, 0x07	; 7
    2e56:	b9 01       	movw	r22, r18
    2e58:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <xTaskCheckForTimeOut>
    2e5c:	88 23       	and	r24, r24
    2e5e:	09 f0       	breq	.+2      	; 0x2e62 <xQueueSemaphoreTake+0x10c>
    2e60:	36 c0       	rjmp	.+108    	; 0x2ece <xQueueSemaphoreTake+0x178>
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	9c 81       	ldd	r25, Y+4	; 0x04
    2e66:	ff d1       	rcall	.+1022   	; 0x3266 <prvIsQueueEmpty>
    2e68:	88 23       	and	r24, r24
    2e6a:	59 f1       	breq	.+86     	; 0x2ec2 <xQueueSemaphoreTake+0x16c>
    2e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e70:	fc 01       	movw	r30, r24
    2e72:	80 81       	ld	r24, Z
    2e74:	91 81       	ldd	r25, Z+1	; 0x01
    2e76:	89 2b       	or	r24, r25
    2e78:	69 f4       	brne	.+26     	; 0x2e94 <xQueueSemaphoreTake+0x13e>
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	f8 94       	cli
    2e7e:	0f 92       	push	r0
    2e80:	8b 81       	ldd	r24, Y+3	; 0x03
    2e82:	9c 81       	ldd	r25, Y+4	; 0x04
    2e84:	fc 01       	movw	r30, r24
    2e86:	84 81       	ldd	r24, Z+4	; 0x04
    2e88:	95 81       	ldd	r25, Z+5	; 0x05
    2e8a:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <xTaskPriorityInherit>
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
    2e90:	0f 90       	pop	r0
    2e92:	0f be       	out	0x3f, r0	; 63
    2e94:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e96:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e98:	a8 89       	ldd	r26, Y+16	; 0x10
    2e9a:	b9 89       	ldd	r27, Y+17	; 0x11
    2e9c:	2b 81       	ldd	r18, Y+3	; 0x03
    2e9e:	3c 81       	ldd	r19, Y+4	; 0x04
    2ea0:	2d 5e       	subi	r18, 0xED	; 237
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	ac 01       	movw	r20, r24
    2ea6:	bd 01       	movw	r22, r26
    2ea8:	c9 01       	movw	r24, r18
    2eaa:	0e 94 1a 24 	call	0x4834	; 0x4834 <vTaskPlaceOnEventList>
    2eae:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb2:	7b d1       	rcall	.+758    	; 0x31aa <prvUnlockQueue>
    2eb4:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2eb8:	88 23       	and	r24, r24
    2eba:	09 f0       	breq	.+2      	; 0x2ebe <xQueueSemaphoreTake+0x168>
    2ebc:	62 cf       	rjmp	.-316    	; 0x2d82 <xQueueSemaphoreTake+0x2c>
    2ebe:	2a db       	rcall	.-2476   	; 0x2514 <vPortYield>
    2ec0:	60 cf       	rjmp	.-320    	; 0x2d82 <xQueueSemaphoreTake+0x2c>
    2ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec6:	71 d1       	rcall	.+738    	; 0x31aa <prvUnlockQueue>
    2ec8:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2ecc:	5a cf       	rjmp	.-332    	; 0x2d82 <xQueueSemaphoreTake+0x2c>
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	6b d1       	rcall	.+726    	; 0x31aa <prvUnlockQueue>
    2ed4:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    2ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eda:	9c 81       	ldd	r25, Y+4	; 0x04
    2edc:	c4 d1       	rcall	.+904    	; 0x3266 <prvIsQueueEmpty>
    2ede:	88 23       	and	r24, r24
    2ee0:	09 f4       	brne	.+2      	; 0x2ee4 <xQueueSemaphoreTake+0x18e>
    2ee2:	4f cf       	rjmp	.-354    	; 0x2d82 <xQueueSemaphoreTake+0x2c>
    2ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee6:	88 23       	and	r24, r24
    2ee8:	89 f0       	breq	.+34     	; 0x2f0c <xQueueSemaphoreTake+0x1b6>
    2eea:	0f b6       	in	r0, 0x3f	; 63
    2eec:	f8 94       	cli
    2eee:	0f 92       	push	r0
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef4:	15 d0       	rcall	.+42     	; 0x2f20 <prvGetDisinheritPriorityAfterTimeout>
    2ef6:	8e 83       	std	Y+6, r24	; 0x06
    2ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    2efa:	9c 81       	ldd	r25, Y+4	; 0x04
    2efc:	fc 01       	movw	r30, r24
    2efe:	84 81       	ldd	r24, Z+4	; 0x04
    2f00:	95 81       	ldd	r25, Z+5	; 0x05
    2f02:	6e 81       	ldd	r22, Y+6	; 0x06
    2f04:	0e 94 cf 28 	call	0x519e	; 0x519e <vTaskPriorityDisinheritAfterTimeout>
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	61 96       	adiw	r28, 0x11	; 17
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	08 95       	ret

00002f20 <prvGetDisinheritPriorityAfterTimeout>:
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	00 d0       	rcall	.+0      	; 0x2f26 <prvGetDisinheritPriorityAfterTimeout+0x6>
    2f26:	cd b7       	in	r28, 0x3d	; 61
    2f28:	de b7       	in	r29, 0x3e	; 62
    2f2a:	9b 83       	std	Y+3, r25	; 0x03
    2f2c:	8a 83       	std	Y+2, r24	; 0x02
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	9b 81       	ldd	r25, Y+3	; 0x03
    2f32:	fc 01       	movw	r30, r24
    2f34:	83 89       	ldd	r24, Z+19	; 0x13
    2f36:	88 23       	and	r24, r24
    2f38:	79 f0       	breq	.+30     	; 0x2f58 <prvGetDisinheritPriorityAfterTimeout+0x38>
    2f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f3e:	fc 01       	movw	r30, r24
    2f40:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f42:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f44:	fc 01       	movw	r30, r24
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	a2 81       	ldd	r26, Z+2	; 0x02
    2f4c:	b3 81       	ldd	r27, Z+3	; 0x03
    2f4e:	98 2f       	mov	r25, r24
    2f50:	84 e0       	ldi	r24, 0x04	; 4
    2f52:	89 1b       	sub	r24, r25
    2f54:	89 83       	std	Y+1, r24	; 0x01
    2f56:	01 c0       	rjmp	.+2      	; 0x2f5a <prvGetDisinheritPriorityAfterTimeout+0x3a>
    2f58:	19 82       	std	Y+1, r1	; 0x01
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	df 91       	pop	r29
    2f64:	cf 91       	pop	r28
    2f66:	08 95       	ret

00002f68 <prvCopyDataToQueue>:
    2f68:	cf 93       	push	r28
    2f6a:	df 93       	push	r29
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	27 97       	sbiw	r28, 0x07	; 7
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	de bf       	out	0x3e, r29	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	cd bf       	out	0x3d, r28	; 61
    2f7c:	9c 83       	std	Y+4, r25	; 0x04
    2f7e:	8b 83       	std	Y+3, r24	; 0x03
    2f80:	7e 83       	std	Y+6, r23	; 0x06
    2f82:	6d 83       	std	Y+5, r22	; 0x05
    2f84:	4f 83       	std	Y+7, r20	; 0x07
    2f86:	19 82       	std	Y+1, r1	; 0x01
    2f88:	8b 81       	ldd	r24, Y+3	; 0x03
    2f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f90:	8a 83       	std	Y+2, r24	; 0x02
    2f92:	8b 81       	ldd	r24, Y+3	; 0x03
    2f94:	9c 81       	ldd	r25, Y+4	; 0x04
    2f96:	fc 01       	movw	r30, r24
    2f98:	80 a1       	ldd	r24, Z+32	; 0x20
    2f9a:	88 23       	and	r24, r24
    2f9c:	b1 f4       	brne	.+44     	; 0x2fca <prvCopyDataToQueue+0x62>
    2f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa2:	fc 01       	movw	r30, r24
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	89 2b       	or	r24, r25
    2faa:	09 f0       	breq	.+2      	; 0x2fae <prvCopyDataToQueue+0x46>
    2fac:	9c c0       	rjmp	.+312    	; 0x30e6 <prvCopyDataToQueue+0x17e>
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	84 81       	ldd	r24, Z+4	; 0x04
    2fb6:	95 81       	ldd	r25, Z+5	; 0x05
    2fb8:	0e 94 41 28 	call	0x5082	; 0x5082 <xTaskPriorityDisinherit>
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	15 82       	std	Z+5, r1	; 0x05
    2fc6:	14 82       	std	Z+4, r1	; 0x04
    2fc8:	8e c0       	rjmp	.+284    	; 0x30e6 <prvCopyDataToQueue+0x17e>
    2fca:	8f 81       	ldd	r24, Y+7	; 0x07
    2fcc:	88 23       	and	r24, r24
    2fce:	d9 f5       	brne	.+118    	; 0x3046 <prvCopyDataToQueue+0xde>
    2fd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	80 a1       	ldd	r24, Z+32	; 0x20
    2fd8:	48 2f       	mov	r20, r24
    2fda:	50 e0       	ldi	r21, 0x00	; 0
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	82 81       	ldd	r24, Z+2	; 0x02
    2fe4:	93 81       	ldd	r25, Z+3	; 0x03
    2fe6:	2d 81       	ldd	r18, Y+5	; 0x05
    2fe8:	3e 81       	ldd	r19, Y+6	; 0x06
    2fea:	b9 01       	movw	r22, r18
    2fec:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>
    2ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff4:	fc 01       	movw	r30, r24
    2ff6:	22 81       	ldd	r18, Z+2	; 0x02
    2ff8:	33 81       	ldd	r19, Z+3	; 0x03
    2ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffe:	fc 01       	movw	r30, r24
    3000:	80 a1       	ldd	r24, Z+32	; 0x20
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	28 0f       	add	r18, r24
    3008:	39 1f       	adc	r19, r25
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	fc 01       	movw	r30, r24
    3010:	33 83       	std	Z+3, r19	; 0x03
    3012:	22 83       	std	Z+2, r18	; 0x02
    3014:	8b 81       	ldd	r24, Y+3	; 0x03
    3016:	9c 81       	ldd	r25, Y+4	; 0x04
    3018:	fc 01       	movw	r30, r24
    301a:	22 81       	ldd	r18, Z+2	; 0x02
    301c:	33 81       	ldd	r19, Z+3	; 0x03
    301e:	8b 81       	ldd	r24, Y+3	; 0x03
    3020:	9c 81       	ldd	r25, Y+4	; 0x04
    3022:	fc 01       	movw	r30, r24
    3024:	84 81       	ldd	r24, Z+4	; 0x04
    3026:	95 81       	ldd	r25, Z+5	; 0x05
    3028:	28 17       	cp	r18, r24
    302a:	39 07       	cpc	r19, r25
    302c:	08 f4       	brcc	.+2      	; 0x3030 <prvCopyDataToQueue+0xc8>
    302e:	5b c0       	rjmp	.+182    	; 0x30e6 <prvCopyDataToQueue+0x17e>
    3030:	8b 81       	ldd	r24, Y+3	; 0x03
    3032:	9c 81       	ldd	r25, Y+4	; 0x04
    3034:	fc 01       	movw	r30, r24
    3036:	20 81       	ld	r18, Z
    3038:	31 81       	ldd	r19, Z+1	; 0x01
    303a:	8b 81       	ldd	r24, Y+3	; 0x03
    303c:	9c 81       	ldd	r25, Y+4	; 0x04
    303e:	fc 01       	movw	r30, r24
    3040:	33 83       	std	Z+3, r19	; 0x03
    3042:	22 83       	std	Z+2, r18	; 0x02
    3044:	50 c0       	rjmp	.+160    	; 0x30e6 <prvCopyDataToQueue+0x17e>
    3046:	8b 81       	ldd	r24, Y+3	; 0x03
    3048:	9c 81       	ldd	r25, Y+4	; 0x04
    304a:	fc 01       	movw	r30, r24
    304c:	80 a1       	ldd	r24, Z+32	; 0x20
    304e:	48 2f       	mov	r20, r24
    3050:	50 e0       	ldi	r21, 0x00	; 0
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	9c 81       	ldd	r25, Y+4	; 0x04
    3056:	fc 01       	movw	r30, r24
    3058:	86 81       	ldd	r24, Z+6	; 0x06
    305a:	97 81       	ldd	r25, Z+7	; 0x07
    305c:	2d 81       	ldd	r18, Y+5	; 0x05
    305e:	3e 81       	ldd	r19, Y+6	; 0x06
    3060:	b9 01       	movw	r22, r18
    3062:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>
    3066:	8b 81       	ldd	r24, Y+3	; 0x03
    3068:	9c 81       	ldd	r25, Y+4	; 0x04
    306a:	fc 01       	movw	r30, r24
    306c:	26 81       	ldd	r18, Z+6	; 0x06
    306e:	37 81       	ldd	r19, Z+7	; 0x07
    3070:	8b 81       	ldd	r24, Y+3	; 0x03
    3072:	9c 81       	ldd	r25, Y+4	; 0x04
    3074:	fc 01       	movw	r30, r24
    3076:	80 a1       	ldd	r24, Z+32	; 0x20
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	91 95       	neg	r25
    307e:	81 95       	neg	r24
    3080:	91 09       	sbc	r25, r1
    3082:	28 0f       	add	r18, r24
    3084:	39 1f       	adc	r19, r25
    3086:	8b 81       	ldd	r24, Y+3	; 0x03
    3088:	9c 81       	ldd	r25, Y+4	; 0x04
    308a:	fc 01       	movw	r30, r24
    308c:	37 83       	std	Z+7, r19	; 0x07
    308e:	26 83       	std	Z+6, r18	; 0x06
    3090:	8b 81       	ldd	r24, Y+3	; 0x03
    3092:	9c 81       	ldd	r25, Y+4	; 0x04
    3094:	fc 01       	movw	r30, r24
    3096:	26 81       	ldd	r18, Z+6	; 0x06
    3098:	37 81       	ldd	r19, Z+7	; 0x07
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	fc 01       	movw	r30, r24
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	28 17       	cp	r18, r24
    30a6:	39 07       	cpc	r19, r25
    30a8:	a8 f4       	brcc	.+42     	; 0x30d4 <prvCopyDataToQueue+0x16c>
    30aa:	8b 81       	ldd	r24, Y+3	; 0x03
    30ac:	9c 81       	ldd	r25, Y+4	; 0x04
    30ae:	fc 01       	movw	r30, r24
    30b0:	24 81       	ldd	r18, Z+4	; 0x04
    30b2:	35 81       	ldd	r19, Z+5	; 0x05
    30b4:	8b 81       	ldd	r24, Y+3	; 0x03
    30b6:	9c 81       	ldd	r25, Y+4	; 0x04
    30b8:	fc 01       	movw	r30, r24
    30ba:	80 a1       	ldd	r24, Z+32	; 0x20
    30bc:	88 2f       	mov	r24, r24
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	91 95       	neg	r25
    30c2:	81 95       	neg	r24
    30c4:	91 09       	sbc	r25, r1
    30c6:	28 0f       	add	r18, r24
    30c8:	39 1f       	adc	r19, r25
    30ca:	8b 81       	ldd	r24, Y+3	; 0x03
    30cc:	9c 81       	ldd	r25, Y+4	; 0x04
    30ce:	fc 01       	movw	r30, r24
    30d0:	37 83       	std	Z+7, r19	; 0x07
    30d2:	26 83       	std	Z+6, r18	; 0x06
    30d4:	8f 81       	ldd	r24, Y+7	; 0x07
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	31 f4       	brne	.+12     	; 0x30e6 <prvCopyDataToQueue+0x17e>
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	88 23       	and	r24, r24
    30de:	19 f0       	breq	.+6      	; 0x30e6 <prvCopyDataToQueue+0x17e>
    30e0:	8a 81       	ldd	r24, Y+2	; 0x02
    30e2:	81 50       	subi	r24, 0x01	; 1
    30e4:	8a 83       	std	Y+2, r24	; 0x02
    30e6:	8a 81       	ldd	r24, Y+2	; 0x02
    30e8:	21 e0       	ldi	r18, 0x01	; 1
    30ea:	28 0f       	add	r18, r24
    30ec:	8b 81       	ldd	r24, Y+3	; 0x03
    30ee:	9c 81       	ldd	r25, Y+4	; 0x04
    30f0:	fc 01       	movw	r30, r24
    30f2:	26 8f       	std	Z+30, r18	; 0x1e
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	27 96       	adiw	r28, 0x07	; 7
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	08 95       	ret

00003108 <prvCopyDataFromQueue>:
    3108:	cf 93       	push	r28
    310a:	df 93       	push	r29
    310c:	00 d0       	rcall	.+0      	; 0x310e <prvCopyDataFromQueue+0x6>
    310e:	1f 92       	push	r1
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	7c 83       	std	Y+4, r23	; 0x04
    311a:	6b 83       	std	Y+3, r22	; 0x03
    311c:	89 81       	ldd	r24, Y+1	; 0x01
    311e:	9a 81       	ldd	r25, Y+2	; 0x02
    3120:	fc 01       	movw	r30, r24
    3122:	80 a1       	ldd	r24, Z+32	; 0x20
    3124:	88 23       	and	r24, r24
    3126:	c9 f1       	breq	.+114    	; 0x319a <prvCopyDataFromQueue+0x92>
    3128:	89 81       	ldd	r24, Y+1	; 0x01
    312a:	9a 81       	ldd	r25, Y+2	; 0x02
    312c:	fc 01       	movw	r30, r24
    312e:	26 81       	ldd	r18, Z+6	; 0x06
    3130:	37 81       	ldd	r19, Z+7	; 0x07
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	fc 01       	movw	r30, r24
    3138:	80 a1       	ldd	r24, Z+32	; 0x20
    313a:	88 2f       	mov	r24, r24
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	28 0f       	add	r18, r24
    3140:	39 1f       	adc	r19, r25
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	fc 01       	movw	r30, r24
    3148:	37 83       	std	Z+7, r19	; 0x07
    314a:	26 83       	std	Z+6, r18	; 0x06
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	fc 01       	movw	r30, r24
    3152:	26 81       	ldd	r18, Z+6	; 0x06
    3154:	37 81       	ldd	r19, Z+7	; 0x07
    3156:	89 81       	ldd	r24, Y+1	; 0x01
    3158:	9a 81       	ldd	r25, Y+2	; 0x02
    315a:	fc 01       	movw	r30, r24
    315c:	84 81       	ldd	r24, Z+4	; 0x04
    315e:	95 81       	ldd	r25, Z+5	; 0x05
    3160:	28 17       	cp	r18, r24
    3162:	39 07       	cpc	r19, r25
    3164:	50 f0       	brcs	.+20     	; 0x317a <prvCopyDataFromQueue+0x72>
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	fc 01       	movw	r30, r24
    316c:	20 81       	ld	r18, Z
    316e:	31 81       	ldd	r19, Z+1	; 0x01
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	9a 81       	ldd	r25, Y+2	; 0x02
    3174:	fc 01       	movw	r30, r24
    3176:	37 83       	std	Z+7, r19	; 0x07
    3178:	26 83       	std	Z+6, r18	; 0x06
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	fc 01       	movw	r30, r24
    3180:	80 a1       	ldd	r24, Z+32	; 0x20
    3182:	48 2f       	mov	r20, r24
    3184:	50 e0       	ldi	r21, 0x00	; 0
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	fc 01       	movw	r30, r24
    318c:	26 81       	ldd	r18, Z+6	; 0x06
    318e:	37 81       	ldd	r19, Z+7	; 0x07
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	9c 81       	ldd	r25, Y+4	; 0x04
    3194:	b9 01       	movw	r22, r18
    3196:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>
    319a:	00 00       	nop
    319c:	0f 90       	pop	r0
    319e:	0f 90       	pop	r0
    31a0:	0f 90       	pop	r0
    31a2:	0f 90       	pop	r0
    31a4:	df 91       	pop	r29
    31a6:	cf 91       	pop	r28
    31a8:	08 95       	ret

000031aa <prvUnlockQueue>:
    31aa:	cf 93       	push	r28
    31ac:	df 93       	push	r29
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <prvUnlockQueue+0x6>
    31b0:	1f 92       	push	r1
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	9c 83       	std	Y+4, r25	; 0x04
    31b8:	8b 83       	std	Y+3, r24	; 0x03
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	0f 92       	push	r0
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	fc 01       	movw	r30, r24
    31c6:	82 a1       	ldd	r24, Z+34	; 0x22
    31c8:	89 83       	std	Y+1, r24	; 0x01
    31ca:	12 c0       	rjmp	.+36     	; 0x31f0 <prvUnlockQueue+0x46>
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	fc 01       	movw	r30, r24
    31d2:	83 89       	ldd	r24, Z+19	; 0x13
    31d4:	88 23       	and	r24, r24
    31d6:	81 f0       	breq	.+32     	; 0x31f8 <prvUnlockQueue+0x4e>
    31d8:	8b 81       	ldd	r24, Y+3	; 0x03
    31da:	9c 81       	ldd	r25, Y+4	; 0x04
    31dc:	43 96       	adiw	r24, 0x13	; 19
    31de:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    31e2:	88 23       	and	r24, r24
    31e4:	11 f0       	breq	.+4      	; 0x31ea <prvUnlockQueue+0x40>
    31e6:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <vTaskMissedYield>
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	81 50       	subi	r24, 0x01	; 1
    31ee:	89 83       	std	Y+1, r24	; 0x01
    31f0:	89 81       	ldd	r24, Y+1	; 0x01
    31f2:	18 16       	cp	r1, r24
    31f4:	5c f3       	brlt	.-42     	; 0x31cc <prvUnlockQueue+0x22>
    31f6:	01 c0       	rjmp	.+2      	; 0x31fa <prvUnlockQueue+0x50>
    31f8:	00 00       	nop
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	2f ef       	ldi	r18, 0xFF	; 255
    3200:	fc 01       	movw	r30, r24
    3202:	22 a3       	std	Z+34, r18	; 0x22
    3204:	0f 90       	pop	r0
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	0f b6       	in	r0, 0x3f	; 63
    320a:	f8 94       	cli
    320c:	0f 92       	push	r0
    320e:	8b 81       	ldd	r24, Y+3	; 0x03
    3210:	9c 81       	ldd	r25, Y+4	; 0x04
    3212:	fc 01       	movw	r30, r24
    3214:	81 a1       	ldd	r24, Z+33	; 0x21
    3216:	8a 83       	std	Y+2, r24	; 0x02
    3218:	12 c0       	rjmp	.+36     	; 0x323e <prvUnlockQueue+0x94>
    321a:	8b 81       	ldd	r24, Y+3	; 0x03
    321c:	9c 81       	ldd	r25, Y+4	; 0x04
    321e:	fc 01       	movw	r30, r24
    3220:	80 85       	ldd	r24, Z+8	; 0x08
    3222:	88 23       	and	r24, r24
    3224:	81 f0       	breq	.+32     	; 0x3246 <prvUnlockQueue+0x9c>
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	08 96       	adiw	r24, 0x08	; 8
    322c:	0e 94 c3 24 	call	0x4986	; 0x4986 <xTaskRemoveFromEventList>
    3230:	88 23       	and	r24, r24
    3232:	11 f0       	breq	.+4      	; 0x3238 <prvUnlockQueue+0x8e>
    3234:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <vTaskMissedYield>
    3238:	8a 81       	ldd	r24, Y+2	; 0x02
    323a:	81 50       	subi	r24, 0x01	; 1
    323c:	8a 83       	std	Y+2, r24	; 0x02
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	18 16       	cp	r1, r24
    3242:	5c f3       	brlt	.-42     	; 0x321a <prvUnlockQueue+0x70>
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <prvUnlockQueue+0x9e>
    3246:	00 00       	nop
    3248:	8b 81       	ldd	r24, Y+3	; 0x03
    324a:	9c 81       	ldd	r25, Y+4	; 0x04
    324c:	2f ef       	ldi	r18, 0xFF	; 255
    324e:	fc 01       	movw	r30, r24
    3250:	21 a3       	std	Z+33, r18	; 0x21
    3252:	0f 90       	pop	r0
    3254:	0f be       	out	0x3f, r0	; 63
    3256:	00 00       	nop
    3258:	0f 90       	pop	r0
    325a:	0f 90       	pop	r0
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <prvIsQueueEmpty>:
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	00 d0       	rcall	.+0      	; 0x326c <prvIsQueueEmpty+0x6>
    326c:	cd b7       	in	r28, 0x3d	; 61
    326e:	de b7       	in	r29, 0x3e	; 62
    3270:	9b 83       	std	Y+3, r25	; 0x03
    3272:	8a 83       	std	Y+2, r24	; 0x02
    3274:	0f b6       	in	r0, 0x3f	; 63
    3276:	f8 94       	cli
    3278:	0f 92       	push	r0
    327a:	8a 81       	ldd	r24, Y+2	; 0x02
    327c:	9b 81       	ldd	r25, Y+3	; 0x03
    327e:	fc 01       	movw	r30, r24
    3280:	86 8d       	ldd	r24, Z+30	; 0x1e
    3282:	88 23       	and	r24, r24
    3284:	19 f4       	brne	.+6      	; 0x328c <prvIsQueueEmpty+0x26>
    3286:	81 e0       	ldi	r24, 0x01	; 1
    3288:	89 83       	std	Y+1, r24	; 0x01
    328a:	01 c0       	rjmp	.+2      	; 0x328e <prvIsQueueEmpty+0x28>
    328c:	19 82       	std	Y+1, r1	; 0x01
    328e:	0f 90       	pop	r0
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	89 81       	ldd	r24, Y+1	; 0x01
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	df 91       	pop	r29
    329c:	cf 91       	pop	r28
    329e:	08 95       	ret

000032a0 <prvIsQueueFull>:
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <prvIsQueueFull+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
    32aa:	9b 83       	std	Y+3, r25	; 0x03
    32ac:	8a 83       	std	Y+2, r24	; 0x02
    32ae:	0f b6       	in	r0, 0x3f	; 63
    32b0:	f8 94       	cli
    32b2:	0f 92       	push	r0
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	9b 81       	ldd	r25, Y+3	; 0x03
    32b8:	fc 01       	movw	r30, r24
    32ba:	26 8d       	ldd	r18, Z+30	; 0x1e
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	9b 81       	ldd	r25, Y+3	; 0x03
    32c0:	fc 01       	movw	r30, r24
    32c2:	87 8d       	ldd	r24, Z+31	; 0x1f
    32c4:	28 17       	cp	r18, r24
    32c6:	19 f4       	brne	.+6      	; 0x32ce <prvIsQueueFull+0x2e>
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	89 83       	std	Y+1, r24	; 0x01
    32cc:	01 c0       	rjmp	.+2      	; 0x32d0 <prvIsQueueFull+0x30>
    32ce:	19 82       	std	Y+1, r1	; 0x01
    32d0:	0f 90       	pop	r0
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	0f 90       	pop	r0
    32d8:	0f 90       	pop	r0
    32da:	0f 90       	pop	r0
    32dc:	df 91       	pop	r29
    32de:	cf 91       	pop	r28
    32e0:	08 95       	ret

000032e2 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    32e2:	cf 93       	push	r28
    32e4:	df 93       	push	r29
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	29 97       	sbiw	r28, 0x09	; 9
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	f8 94       	cli
    32f0:	de bf       	out	0x3e, r29	; 62
    32f2:	0f be       	out	0x3f, r0	; 63
    32f4:	cd bf       	out	0x3d, r28	; 61
    32f6:	9c 83       	std	Y+4, r25	; 0x04
    32f8:	8b 83       	std	Y+3, r24	; 0x03
    32fa:	4d 83       	std	Y+5, r20	; 0x05
    32fc:	5e 83       	std	Y+6, r21	; 0x06
    32fe:	6f 83       	std	Y+7, r22	; 0x07
    3300:	78 87       	std	Y+8, r23	; 0x08
    3302:	29 87       	std	Y+9, r18	; 0x09
    Queue_t * const pxQueue = xQueue;
    3304:	8b 81       	ldd	r24, Y+3	; 0x03
    3306:	9c 81       	ldd	r25, Y+4	; 0x04
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	89 83       	std	Y+1, r24	; 0x01
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	0f 92       	push	r0
    3312:	89 81       	ldd	r24, Y+1	; 0x01
    3314:	9a 81       	ldd	r25, Y+2	; 0x02
    3316:	fc 01       	movw	r30, r24
    3318:	81 a1       	ldd	r24, Z+33	; 0x21
    331a:	8f 3f       	cpi	r24, 0xFF	; 255
    331c:	21 f4       	brne	.+8      	; 0x3326 <vQueueWaitForMessageRestricted+0x44>
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	fc 01       	movw	r30, r24
    3324:	11 a2       	std	Z+33, r1	; 0x21
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	9a 81       	ldd	r25, Y+2	; 0x02
    332a:	fc 01       	movw	r30, r24
    332c:	82 a1       	ldd	r24, Z+34	; 0x22
    332e:	8f 3f       	cpi	r24, 0xFF	; 255
    3330:	21 f4       	brne	.+8      	; 0x333a <vQueueWaitForMessageRestricted+0x58>
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	9a 81       	ldd	r25, Y+2	; 0x02
    3336:	fc 01       	movw	r30, r24
    3338:	12 a2       	std	Z+34, r1	; 0x22
    333a:	0f 90       	pop	r0
    333c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	9a 81       	ldd	r25, Y+2	; 0x02
    3342:	fc 01       	movw	r30, r24
    3344:	86 8d       	ldd	r24, Z+30	; 0x1e
    3346:	88 23       	and	r24, r24
    3348:	71 f4       	brne	.+28     	; 0x3366 <vQueueWaitForMessageRestricted+0x84>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	fc 01       	movw	r30, r24
    3350:	73 96       	adiw	r30, 0x13	; 19
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	af 81       	ldd	r26, Y+7	; 0x07
    3358:	b8 85       	ldd	r27, Y+8	; 0x08
    335a:	29 85       	ldd	r18, Y+9	; 0x09
    335c:	ac 01       	movw	r20, r24
    335e:	bd 01       	movw	r22, r26
    3360:	cf 01       	movw	r24, r30
    3362:	0e 94 8a 24 	call	0x4914	; 0x4914 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	9a 81       	ldd	r25, Y+2	; 0x02
    336a:	1f df       	rcall	.-450    	; 0x31aa <prvUnlockQueue>
    }
    336c:	00 00       	nop
    336e:	29 96       	adiw	r28, 0x09	; 9
    3370:	0f b6       	in	r0, 0x3f	; 63
    3372:	f8 94       	cli
    3374:	de bf       	out	0x3e, r29	; 62
    3376:	0f be       	out	0x3f, r0	; 63
    3378:	cd bf       	out	0x3d, r28	; 61
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	08 95       	ret

00003380 <xStreamBufferGenericCreate>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
    3380:	0f 93       	push	r16
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	28 97       	sbiw	r28, 0x08	; 8
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	de bf       	out	0x3e, r29	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	cd bf       	out	0x3d, r28	; 61
    3396:	9d 83       	std	Y+5, r25	; 0x05
    3398:	8c 83       	std	Y+4, r24	; 0x04
    339a:	7f 83       	std	Y+7, r23	; 0x07
    339c:	6e 83       	std	Y+6, r22	; 0x06
    339e:	48 87       	std	Y+8, r20	; 0x08
    33a0:	88 85       	ldd	r24, Y+8	; 0x08
    33a2:	81 30       	cpi	r24, 0x01	; 1
    33a4:	19 f4       	brne	.+6      	; 0x33ac <xStreamBufferGenericCreate+0x2c>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <xStreamBufferGenericCreate+0x2e>
    33ac:	19 82       	std	Y+1, r1	; 0x01
    33ae:	8e 81       	ldd	r24, Y+6	; 0x06
    33b0:	9f 81       	ldd	r25, Y+7	; 0x07
    33b2:	89 2b       	or	r24, r25
    33b4:	21 f4       	brne	.+8      	; 0x33be <xStreamBufferGenericCreate+0x3e>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	9f 83       	std	Y+7, r25	; 0x07
    33bc:	8e 83       	std	Y+6, r24	; 0x06
    33be:	8c 81       	ldd	r24, Y+4	; 0x04
    33c0:	9d 81       	ldd	r25, Y+5	; 0x05
    33c2:	01 96       	adiw	r24, 0x01	; 1
    33c4:	9d 83       	std	Y+5, r25	; 0x05
    33c6:	8c 83       	std	Y+4, r24	; 0x04
    33c8:	8c 81       	ldd	r24, Y+4	; 0x04
    33ca:	9d 81       	ldd	r25, Y+5	; 0x05
    33cc:	40 96       	adiw	r24, 0x10	; 16
    33ce:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <pvPortMalloc>
    33d2:	9b 83       	std	Y+3, r25	; 0x03
    33d4:	8a 83       	std	Y+2, r24	; 0x02
    33d6:	8a 81       	ldd	r24, Y+2	; 0x02
    33d8:	9b 81       	ldd	r25, Y+3	; 0x03
    33da:	89 2b       	or	r24, r25
    33dc:	69 f0       	breq	.+26     	; 0x33f8 <xStreamBufferGenericCreate+0x78>
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	9b 81       	ldd	r25, Y+3	; 0x03
    33e2:	bc 01       	movw	r22, r24
    33e4:	60 5f       	subi	r22, 0xF0	; 240
    33e6:	7f 4f       	sbci	r23, 0xFF	; 255
    33e8:	2e 81       	ldd	r18, Y+6	; 0x06
    33ea:	3f 81       	ldd	r19, Y+7	; 0x07
    33ec:	4c 81       	ldd	r20, Y+4	; 0x04
    33ee:	5d 81       	ldd	r21, Y+5	; 0x05
    33f0:	8a 81       	ldd	r24, Y+2	; 0x02
    33f2:	9b 81       	ldd	r25, Y+3	; 0x03
    33f4:	09 81       	ldd	r16, Y+1	; 0x01
    33f6:	11 d5       	rcall	.+2594   	; 0x3e1a <prvInitialiseNewStreamBuffer>
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	9b 81       	ldd	r25, Y+3	; 0x03
    33fc:	28 96       	adiw	r28, 0x08	; 8
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	df 91       	pop	r29
    340a:	cf 91       	pop	r28
    340c:	0f 91       	pop	r16
    340e:	08 95       	ret

00003410 <xStreamBufferReset>:
    3410:	0f 93       	push	r16
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	00 d0       	rcall	.+0      	; 0x3418 <xStreamBufferReset+0x8>
    3418:	00 d0       	rcall	.+0      	; 0x341a <xStreamBufferReset+0xa>
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    341e:	9e 83       	std	Y+6, r25	; 0x06
    3420:	8d 83       	std	Y+5, r24	; 0x05
    3422:	8d 81       	ldd	r24, Y+5	; 0x05
    3424:	9e 81       	ldd	r25, Y+6	; 0x06
    3426:	9b 83       	std	Y+3, r25	; 0x03
    3428:	8a 83       	std	Y+2, r24	; 0x02
    342a:	19 82       	std	Y+1, r1	; 0x01
    342c:	8a 81       	ldd	r24, Y+2	; 0x02
    342e:	9b 81       	ldd	r25, Y+3	; 0x03
    3430:	dc 01       	movw	r26, r24
    3432:	1f 96       	adiw	r26, 0x0f	; 15
    3434:	8c 91       	ld	r24, X
    3436:	8c 83       	std	Y+4, r24	; 0x04
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	0f 92       	push	r0
    343e:	8a 81       	ldd	r24, Y+2	; 0x02
    3440:	9b 81       	ldd	r25, Y+3	; 0x03
    3442:	fc 01       	movw	r30, r24
    3444:	80 85       	ldd	r24, Z+8	; 0x08
    3446:	91 85       	ldd	r25, Z+9	; 0x09
    3448:	89 2b       	or	r24, r25
    344a:	71 f5       	brne	.+92     	; 0x34a8 <xStreamBufferReset+0x98>
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
    344e:	9b 81       	ldd	r25, Y+3	; 0x03
    3450:	dc 01       	movw	r26, r24
    3452:	1a 96       	adiw	r26, 0x0a	; 10
    3454:	8d 91       	ld	r24, X+
    3456:	9c 91       	ld	r25, X
    3458:	1b 97       	sbiw	r26, 0x0b	; 11
    345a:	89 2b       	or	r24, r25
    345c:	29 f5       	brne	.+74     	; 0x34a8 <xStreamBufferReset+0x98>
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	dc 01       	movw	r26, r24
    3464:	1e 96       	adiw	r26, 0x0e	; 14
    3466:	ec 91       	ld	r30, X
    3468:	8a 81       	ldd	r24, Y+2	; 0x02
    346a:	9b 81       	ldd	r25, Y+3	; 0x03
    346c:	dc 01       	movw	r26, r24
    346e:	16 96       	adiw	r26, 0x06	; 6
    3470:	2d 91       	ld	r18, X+
    3472:	3c 91       	ld	r19, X
    3474:	17 97       	sbiw	r26, 0x07	; 7
    3476:	8a 81       	ldd	r24, Y+2	; 0x02
    3478:	9b 81       	ldd	r25, Y+3	; 0x03
    347a:	dc 01       	movw	r26, r24
    347c:	14 96       	adiw	r26, 0x04	; 4
    347e:	4d 91       	ld	r20, X+
    3480:	5c 91       	ld	r21, X
    3482:	15 97       	sbiw	r26, 0x05	; 5
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	9b 81       	ldd	r25, Y+3	; 0x03
    3488:	dc 01       	movw	r26, r24
    348a:	1c 96       	adiw	r26, 0x0c	; 12
    348c:	6d 91       	ld	r22, X+
    348e:	7c 91       	ld	r23, X
    3490:	1d 97       	sbiw	r26, 0x0d	; 13
    3492:	8a 81       	ldd	r24, Y+2	; 0x02
    3494:	9b 81       	ldd	r25, Y+3	; 0x03
    3496:	0e 2f       	mov	r16, r30
    3498:	c0 d4       	rcall	.+2432   	; 0x3e1a <prvInitialiseNewStreamBuffer>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	89 83       	std	Y+1, r24	; 0x01
    349e:	8a 81       	ldd	r24, Y+2	; 0x02
    34a0:	9b 81       	ldd	r25, Y+3	; 0x03
    34a2:	2c 81       	ldd	r18, Y+4	; 0x04
    34a4:	fc 01       	movw	r30, r24
    34a6:	27 87       	std	Z+15, r18	; 0x0f
    34a8:	0f 90       	pop	r0
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	26 96       	adiw	r28, 0x06	; 6
    34b0:	0f b6       	in	r0, 0x3f	; 63
    34b2:	f8 94       	cli
    34b4:	de bf       	out	0x3e, r29	; 62
    34b6:	0f be       	out	0x3f, r0	; 63
    34b8:	cd bf       	out	0x3d, r28	; 61
    34ba:	df 91       	pop	r29
    34bc:	cf 91       	pop	r28
    34be:	0f 91       	pop	r16
    34c0:	08 95       	ret

000034c2 <xStreamBufferSpacesAvailable>:
    34c2:	cf 93       	push	r28
    34c4:	df 93       	push	r29
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <xStreamBufferSpacesAvailable+0x6>
    34c8:	00 d0       	rcall	.+0      	; 0x34ca <xStreamBufferSpacesAvailable+0x8>
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	9e 83       	std	Y+6, r25	; 0x06
    34d0:	8d 83       	std	Y+5, r24	; 0x05
    34d2:	8d 81       	ldd	r24, Y+5	; 0x05
    34d4:	9e 81       	ldd	r25, Y+6	; 0x06
    34d6:	9c 83       	std	Y+4, r25	; 0x04
    34d8:	8b 83       	std	Y+3, r24	; 0x03
    34da:	8b 81       	ldd	r24, Y+3	; 0x03
    34dc:	9c 81       	ldd	r25, Y+4	; 0x04
    34de:	fc 01       	movw	r30, r24
    34e0:	24 81       	ldd	r18, Z+4	; 0x04
    34e2:	35 81       	ldd	r19, Z+5	; 0x05
    34e4:	8b 81       	ldd	r24, Y+3	; 0x03
    34e6:	9c 81       	ldd	r25, Y+4	; 0x04
    34e8:	fc 01       	movw	r30, r24
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	82 0f       	add	r24, r18
    34f0:	93 1f       	adc	r25, r19
    34f2:	9a 83       	std	Y+2, r25	; 0x02
    34f4:	89 83       	std	Y+1, r24	; 0x01
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	9c 81       	ldd	r25, Y+4	; 0x04
    34fa:	fc 01       	movw	r30, r24
    34fc:	82 81       	ldd	r24, Z+2	; 0x02
    34fe:	93 81       	ldd	r25, Z+3	; 0x03
    3500:	29 81       	ldd	r18, Y+1	; 0x01
    3502:	3a 81       	ldd	r19, Y+2	; 0x02
    3504:	a9 01       	movw	r20, r18
    3506:	48 1b       	sub	r20, r24
    3508:	59 0b       	sbc	r21, r25
    350a:	ca 01       	movw	r24, r20
    350c:	9a 83       	std	Y+2, r25	; 0x02
    350e:	89 83       	std	Y+1, r24	; 0x01
    3510:	89 81       	ldd	r24, Y+1	; 0x01
    3512:	9a 81       	ldd	r25, Y+2	; 0x02
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	9a 83       	std	Y+2, r25	; 0x02
    3518:	89 83       	std	Y+1, r24	; 0x01
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	9c 81       	ldd	r25, Y+4	; 0x04
    351e:	fc 01       	movw	r30, r24
    3520:	24 81       	ldd	r18, Z+4	; 0x04
    3522:	35 81       	ldd	r19, Z+5	; 0x05
    3524:	89 81       	ldd	r24, Y+1	; 0x01
    3526:	9a 81       	ldd	r25, Y+2	; 0x02
    3528:	82 17       	cp	r24, r18
    352a:	93 07       	cpc	r25, r19
    352c:	68 f0       	brcs	.+26     	; 0x3548 <xStreamBufferSpacesAvailable+0x86>
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	fc 01       	movw	r30, r24
    3534:	84 81       	ldd	r24, Z+4	; 0x04
    3536:	95 81       	ldd	r25, Z+5	; 0x05
    3538:	29 81       	ldd	r18, Y+1	; 0x01
    353a:	3a 81       	ldd	r19, Y+2	; 0x02
    353c:	a9 01       	movw	r20, r18
    353e:	48 1b       	sub	r20, r24
    3540:	59 0b       	sbc	r21, r25
    3542:	ca 01       	movw	r24, r20
    3544:	9a 83       	std	Y+2, r25	; 0x02
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	26 96       	adiw	r28, 0x06	; 6
    354e:	0f b6       	in	r0, 0x3f	; 63
    3550:	f8 94       	cli
    3552:	de bf       	out	0x3e, r29	; 62
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	cd bf       	out	0x3d, r28	; 61
    3558:	df 91       	pop	r29
    355a:	cf 91       	pop	r28
    355c:	08 95       	ret

0000355e <xStreamBufferSend>:
    355e:	cf 92       	push	r12
    3560:	df 92       	push	r13
    3562:	ef 92       	push	r14
    3564:	ff 92       	push	r15
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	67 97       	sbiw	r28, 0x17	; 23
    3574:	0f b6       	in	r0, 0x3f	; 63
    3576:	f8 94       	cli
    3578:	de bf       	out	0x3e, r29	; 62
    357a:	0f be       	out	0x3f, r0	; 63
    357c:	cd bf       	out	0x3d, r28	; 61
    357e:	9f 87       	std	Y+15, r25	; 0x0f
    3580:	8e 87       	std	Y+14, r24	; 0x0e
    3582:	79 8b       	std	Y+17, r23	; 0x11
    3584:	68 8b       	std	Y+16, r22	; 0x10
    3586:	5b 8b       	std	Y+19, r21	; 0x13
    3588:	4a 8b       	std	Y+18, r20	; 0x12
    358a:	0c 8b       	std	Y+20, r16	; 0x14
    358c:	1d 8b       	std	Y+21, r17	; 0x15
    358e:	2e 8b       	std	Y+22, r18	; 0x16
    3590:	3f 8b       	std	Y+23, r19	; 0x17
    3592:	8e 85       	ldd	r24, Y+14	; 0x0e
    3594:	9f 85       	ldd	r25, Y+15	; 0x0f
    3596:	9e 83       	std	Y+6, r25	; 0x06
    3598:	8d 83       	std	Y+5, r24	; 0x05
    359a:	1a 82       	std	Y+2, r1	; 0x02
    359c:	19 82       	std	Y+1, r1	; 0x01
    359e:	8a 89       	ldd	r24, Y+18	; 0x12
    35a0:	9b 89       	ldd	r25, Y+19	; 0x13
    35a2:	9c 83       	std	Y+4, r25	; 0x04
    35a4:	8b 83       	std	Y+3, r24	; 0x03
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	fc 01       	movw	r30, r24
    35ac:	86 85       	ldd	r24, Z+14	; 0x0e
    35ae:	88 2f       	mov	r24, r24
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	81 70       	andi	r24, 0x01	; 1
    35b4:	99 27       	eor	r25, r25
    35b6:	89 2b       	or	r24, r25
    35b8:	29 f0       	breq	.+10     	; 0x35c4 <xStreamBufferSend+0x66>
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	9c 81       	ldd	r25, Y+4	; 0x04
    35be:	02 96       	adiw	r24, 0x02	; 2
    35c0:	9c 83       	std	Y+4, r25	; 0x04
    35c2:	8b 83       	std	Y+3, r24	; 0x03
    35c4:	8c 89       	ldd	r24, Y+20	; 0x14
    35c6:	9d 89       	ldd	r25, Y+21	; 0x15
    35c8:	ae 89       	ldd	r26, Y+22	; 0x16
    35ca:	bf 89       	ldd	r27, Y+23	; 0x17
    35cc:	89 2b       	or	r24, r25
    35ce:	8a 2b       	or	r24, r26
    35d0:	8b 2b       	or	r24, r27
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <xStreamBufferSend+0x78>
    35d4:	45 c0       	rjmp	.+138    	; 0x3660 <xStreamBufferSend+0x102>
    35d6:	ce 01       	movw	r24, r28
    35d8:	09 96       	adiw	r24, 0x09	; 9
    35da:	0e 94 96 25 	call	0x4b2c	; 0x4b2c <vTaskSetTimeOutState>
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	0f 92       	push	r0
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	9e 81       	ldd	r25, Y+6	; 0x06
    35e8:	6c df       	rcall	.-296    	; 0x34c2 <xStreamBufferSpacesAvailable>
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	29 81       	ldd	r18, Y+1	; 0x01
    35f0:	3a 81       	ldd	r19, Y+2	; 0x02
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	28 17       	cp	r18, r24
    35f8:	39 07       	cpc	r19, r25
    35fa:	68 f4       	brcc	.+26     	; 0x3616 <xStreamBufferSend+0xb8>
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <xTaskNotifyStateClear>
    3604:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <xTaskGetCurrentTaskHandle>
    3608:	9c 01       	movw	r18, r24
    360a:	8d 81       	ldd	r24, Y+5	; 0x05
    360c:	9e 81       	ldd	r25, Y+6	; 0x06
    360e:	fc 01       	movw	r30, r24
    3610:	33 87       	std	Z+11, r19	; 0x0b
    3612:	22 87       	std	Z+10, r18	; 0x0a
    3614:	03 c0       	rjmp	.+6      	; 0x361c <xStreamBufferSend+0xbe>
    3616:	0f 90       	pop	r0
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	22 c0       	rjmp	.+68     	; 0x3660 <xStreamBufferSend+0x102>
    361c:	0f 90       	pop	r0
    361e:	0f be       	out	0x3f, r0	; 63
    3620:	8c 89       	ldd	r24, Y+20	; 0x14
    3622:	9d 89       	ldd	r25, Y+21	; 0x15
    3624:	ae 89       	ldd	r26, Y+22	; 0x16
    3626:	bf 89       	ldd	r27, Y+23	; 0x17
    3628:	6c 01       	movw	r12, r24
    362a:	7d 01       	movw	r14, r26
    362c:	00 e0       	ldi	r16, 0x00	; 0
    362e:	10 e0       	ldi	r17, 0x00	; 0
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	a9 01       	movw	r20, r18
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	70 e0       	ldi	r23, 0x00	; 0
    363a:	cb 01       	movw	r24, r22
    363c:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <xTaskNotifyWait>
    3640:	8d 81       	ldd	r24, Y+5	; 0x05
    3642:	9e 81       	ldd	r25, Y+6	; 0x06
    3644:	fc 01       	movw	r30, r24
    3646:	13 86       	std	Z+11, r1	; 0x0b
    3648:	12 86       	std	Z+10, r1	; 0x0a
    364a:	9e 01       	movw	r18, r28
    364c:	2c 5e       	subi	r18, 0xEC	; 236
    364e:	3f 4f       	sbci	r19, 0xFF	; 255
    3650:	ce 01       	movw	r24, r28
    3652:	09 96       	adiw	r24, 0x09	; 9
    3654:	b9 01       	movw	r22, r18
    3656:	0e 94 e1 25 	call	0x4bc2	; 0x4bc2 <xTaskCheckForTimeOut>
    365a:	88 23       	and	r24, r24
    365c:	09 f4       	brne	.+2      	; 0x3660 <xStreamBufferSend+0x102>
    365e:	bf cf       	rjmp	.-130    	; 0x35de <xStreamBufferSend+0x80>
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	89 2b       	or	r24, r25
    3666:	29 f4       	brne	.+10     	; 0x3672 <xStreamBufferSend+0x114>
    3668:	8d 81       	ldd	r24, Y+5	; 0x05
    366a:	9e 81       	ldd	r25, Y+6	; 0x06
    366c:	2a df       	rcall	.-428    	; 0x34c2 <xStreamBufferSpacesAvailable>
    366e:	9a 83       	std	Y+2, r25	; 0x02
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	eb 81       	ldd	r30, Y+3	; 0x03
    3674:	fc 81       	ldd	r31, Y+4	; 0x04
    3676:	29 81       	ldd	r18, Y+1	; 0x01
    3678:	3a 81       	ldd	r19, Y+2	; 0x02
    367a:	4a 89       	ldd	r20, Y+18	; 0x12
    367c:	5b 89       	ldd	r21, Y+19	; 0x13
    367e:	68 89       	ldd	r22, Y+16	; 0x10
    3680:	79 89       	ldd	r23, Y+17	; 0x11
    3682:	8d 81       	ldd	r24, Y+5	; 0x05
    3684:	9e 81       	ldd	r25, Y+6	; 0x06
    3686:	8f 01       	movw	r16, r30
    3688:	ba d0       	rcall	.+372    	; 0x37fe <prvWriteMessageToBuffer>
    368a:	98 87       	std	Y+8, r25	; 0x08
    368c:	8f 83       	std	Y+7, r24	; 0x07
    368e:	8f 81       	ldd	r24, Y+7	; 0x07
    3690:	98 85       	ldd	r25, Y+8	; 0x08
    3692:	89 2b       	or	r24, r25
    3694:	39 f1       	breq	.+78     	; 0x36e4 <xStreamBufferSend+0x186>
    3696:	8d 81       	ldd	r24, Y+5	; 0x05
    3698:	9e 81       	ldd	r25, Y+6	; 0x06
    369a:	7c d3       	rcall	.+1784   	; 0x3d94 <prvBytesInBuffer>
    369c:	9c 01       	movw	r18, r24
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
    36a0:	9e 81       	ldd	r25, Y+6	; 0x06
    36a2:	fc 01       	movw	r30, r24
    36a4:	86 81       	ldd	r24, Z+6	; 0x06
    36a6:	97 81       	ldd	r25, Z+7	; 0x07
    36a8:	28 17       	cp	r18, r24
    36aa:	39 07       	cpc	r19, r25
    36ac:	d8 f0       	brcs	.+54     	; 0x36e4 <xStreamBufferSend+0x186>
    36ae:	4c d6       	rcall	.+3224   	; 0x4348 <vTaskSuspendAll>
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	fc 01       	movw	r30, r24
    36b6:	80 85       	ldd	r24, Z+8	; 0x08
    36b8:	91 85       	ldd	r25, Z+9	; 0x09
    36ba:	89 2b       	or	r24, r25
    36bc:	91 f0       	breq	.+36     	; 0x36e2 <xStreamBufferSend+0x184>
    36be:	8d 81       	ldd	r24, Y+5	; 0x05
    36c0:	9e 81       	ldd	r25, Y+6	; 0x06
    36c2:	fc 01       	movw	r30, r24
    36c4:	80 85       	ldd	r24, Z+8	; 0x08
    36c6:	91 85       	ldd	r25, Z+9	; 0x09
    36c8:	00 e0       	ldi	r16, 0x00	; 0
    36ca:	10 e0       	ldi	r17, 0x00	; 0
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	ba 01       	movw	r22, r20
    36d4:	0e 94 93 2a 	call	0x5526	; 0x5526 <xTaskGenericNotify>
    36d8:	8d 81       	ldd	r24, Y+5	; 0x05
    36da:	9e 81       	ldd	r25, Y+6	; 0x06
    36dc:	fc 01       	movw	r30, r24
    36de:	11 86       	std	Z+9, r1	; 0x09
    36e0:	10 86       	std	Z+8, r1	; 0x08
    36e2:	3f d6       	rcall	.+3198   	; 0x4362 <xTaskResumeAll>
    36e4:	8f 81       	ldd	r24, Y+7	; 0x07
    36e6:	98 85       	ldd	r25, Y+8	; 0x08
    36e8:	67 96       	adiw	r28, 0x17	; 23
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	df 91       	pop	r29
    36f6:	cf 91       	pop	r28
    36f8:	1f 91       	pop	r17
    36fa:	0f 91       	pop	r16
    36fc:	ff 90       	pop	r15
    36fe:	ef 90       	pop	r14
    3700:	df 90       	pop	r13
    3702:	cf 90       	pop	r12
    3704:	08 95       	ret

00003706 <xStreamBufferSendFromISR>:
    3706:	ef 92       	push	r14
    3708:	ff 92       	push	r15
    370a:	0f 93       	push	r16
    370c:	1f 93       	push	r17
    370e:	cf 93       	push	r28
    3710:	df 93       	push	r29
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	61 97       	sbiw	r28, 0x11	; 17
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	9b 87       	std	Y+11, r25	; 0x0b
    3724:	8a 87       	std	Y+10, r24	; 0x0a
    3726:	7d 87       	std	Y+13, r23	; 0x0d
    3728:	6c 87       	std	Y+12, r22	; 0x0c
    372a:	5f 87       	std	Y+15, r21	; 0x0f
    372c:	4e 87       	std	Y+14, r20	; 0x0e
    372e:	39 8b       	std	Y+17, r19	; 0x11
    3730:	28 8b       	std	Y+16, r18	; 0x10
    3732:	8a 85       	ldd	r24, Y+10	; 0x0a
    3734:	9b 85       	ldd	r25, Y+11	; 0x0b
    3736:	9c 83       	std	Y+4, r25	; 0x04
    3738:	8b 83       	std	Y+3, r24	; 0x03
    373a:	8e 85       	ldd	r24, Y+14	; 0x0e
    373c:	9f 85       	ldd	r25, Y+15	; 0x0f
    373e:	9a 83       	std	Y+2, r25	; 0x02
    3740:	89 83       	std	Y+1, r24	; 0x01
    3742:	8b 81       	ldd	r24, Y+3	; 0x03
    3744:	9c 81       	ldd	r25, Y+4	; 0x04
    3746:	fc 01       	movw	r30, r24
    3748:	86 85       	ldd	r24, Z+14	; 0x0e
    374a:	88 2f       	mov	r24, r24
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	81 70       	andi	r24, 0x01	; 1
    3750:	99 27       	eor	r25, r25
    3752:	89 2b       	or	r24, r25
    3754:	29 f0       	breq	.+10     	; 0x3760 <xStreamBufferSendFromISR+0x5a>
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	9a 81       	ldd	r25, Y+2	; 0x02
    375a:	02 96       	adiw	r24, 0x02	; 2
    375c:	9a 83       	std	Y+2, r25	; 0x02
    375e:	89 83       	std	Y+1, r24	; 0x01
    3760:	8b 81       	ldd	r24, Y+3	; 0x03
    3762:	9c 81       	ldd	r25, Y+4	; 0x04
    3764:	ae de       	rcall	.-676    	; 0x34c2 <xStreamBufferSpacesAvailable>
    3766:	9e 83       	std	Y+6, r25	; 0x06
    3768:	8d 83       	std	Y+5, r24	; 0x05
    376a:	e9 81       	ldd	r30, Y+1	; 0x01
    376c:	fa 81       	ldd	r31, Y+2	; 0x02
    376e:	2d 81       	ldd	r18, Y+5	; 0x05
    3770:	3e 81       	ldd	r19, Y+6	; 0x06
    3772:	4e 85       	ldd	r20, Y+14	; 0x0e
    3774:	5f 85       	ldd	r21, Y+15	; 0x0f
    3776:	6c 85       	ldd	r22, Y+12	; 0x0c
    3778:	7d 85       	ldd	r23, Y+13	; 0x0d
    377a:	8b 81       	ldd	r24, Y+3	; 0x03
    377c:	9c 81       	ldd	r25, Y+4	; 0x04
    377e:	8f 01       	movw	r16, r30
    3780:	3e d0       	rcall	.+124    	; 0x37fe <prvWriteMessageToBuffer>
    3782:	98 87       	std	Y+8, r25	; 0x08
    3784:	8f 83       	std	Y+7, r24	; 0x07
    3786:	8f 81       	ldd	r24, Y+7	; 0x07
    3788:	98 85       	ldd	r25, Y+8	; 0x08
    378a:	89 2b       	or	r24, r25
    378c:	49 f1       	breq	.+82     	; 0x37e0 <xStreamBufferSendFromISR+0xda>
    378e:	8b 81       	ldd	r24, Y+3	; 0x03
    3790:	9c 81       	ldd	r25, Y+4	; 0x04
    3792:	00 d3       	rcall	.+1536   	; 0x3d94 <prvBytesInBuffer>
    3794:	9c 01       	movw	r18, r24
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	fc 01       	movw	r30, r24
    379c:	86 81       	ldd	r24, Z+6	; 0x06
    379e:	97 81       	ldd	r25, Z+7	; 0x07
    37a0:	28 17       	cp	r18, r24
    37a2:	39 07       	cpc	r19, r25
    37a4:	e8 f0       	brcs	.+58     	; 0x37e0 <xStreamBufferSendFromISR+0xda>
    37a6:	19 86       	std	Y+9, r1	; 0x09
    37a8:	8b 81       	ldd	r24, Y+3	; 0x03
    37aa:	9c 81       	ldd	r25, Y+4	; 0x04
    37ac:	fc 01       	movw	r30, r24
    37ae:	80 85       	ldd	r24, Z+8	; 0x08
    37b0:	91 85       	ldd	r25, Z+9	; 0x09
    37b2:	89 2b       	or	r24, r25
    37b4:	a9 f0       	breq	.+42     	; 0x37e0 <xStreamBufferSendFromISR+0xda>
    37b6:	8b 81       	ldd	r24, Y+3	; 0x03
    37b8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ba:	fc 01       	movw	r30, r24
    37bc:	80 85       	ldd	r24, Z+8	; 0x08
    37be:	91 85       	ldd	r25, Z+9	; 0x09
    37c0:	28 89       	ldd	r18, Y+16	; 0x10
    37c2:	39 89       	ldd	r19, Y+17	; 0x11
    37c4:	79 01       	movw	r14, r18
    37c6:	00 e0       	ldi	r16, 0x00	; 0
    37c8:	10 e0       	ldi	r17, 0x00	; 0
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	40 e0       	ldi	r20, 0x00	; 0
    37ce:	50 e0       	ldi	r21, 0x00	; 0
    37d0:	ba 01       	movw	r22, r20
    37d2:	0e 94 71 2b 	call	0x56e2	; 0x56e2 <xTaskGenericNotifyFromISR>
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	9c 81       	ldd	r25, Y+4	; 0x04
    37da:	fc 01       	movw	r30, r24
    37dc:	11 86       	std	Z+9, r1	; 0x09
    37de:	10 86       	std	Z+8, r1	; 0x08
    37e0:	8f 81       	ldd	r24, Y+7	; 0x07
    37e2:	98 85       	ldd	r25, Y+8	; 0x08
    37e4:	61 96       	adiw	r28, 0x11	; 17
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	df 91       	pop	r29
    37f2:	cf 91       	pop	r28
    37f4:	1f 91       	pop	r17
    37f6:	0f 91       	pop	r16
    37f8:	ff 90       	pop	r15
    37fa:	ef 90       	pop	r14
    37fc:	08 95       	ret

000037fe <prvWriteMessageToBuffer>:
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	61 97       	sbiw	r28, 0x11	; 17
    380c:	0f b6       	in	r0, 0x3f	; 63
    380e:	f8 94       	cli
    3810:	de bf       	out	0x3e, r29	; 62
    3812:	0f be       	out	0x3f, r0	; 63
    3814:	cd bf       	out	0x3d, r28	; 61
    3816:	99 87       	std	Y+9, r25	; 0x09
    3818:	88 87       	std	Y+8, r24	; 0x08
    381a:	7b 87       	std	Y+11, r23	; 0x0b
    381c:	6a 87       	std	Y+10, r22	; 0x0a
    381e:	5d 87       	std	Y+13, r21	; 0x0d
    3820:	4c 87       	std	Y+12, r20	; 0x0c
    3822:	3f 87       	std	Y+15, r19	; 0x0f
    3824:	2e 87       	std	Y+14, r18	; 0x0e
    3826:	19 8b       	std	Y+17, r17	; 0x11
    3828:	08 8b       	std	Y+16, r16	; 0x10
    382a:	8e 85       	ldd	r24, Y+14	; 0x0e
    382c:	9f 85       	ldd	r25, Y+15	; 0x0f
    382e:	89 2b       	or	r24, r25
    3830:	11 f4       	brne	.+4      	; 0x3836 <prvWriteMessageToBuffer+0x38>
    3832:	19 82       	std	Y+1, r1	; 0x01
    3834:	33 c0       	rjmp	.+102    	; 0x389c <prvWriteMessageToBuffer+0x9e>
    3836:	88 85       	ldd	r24, Y+8	; 0x08
    3838:	99 85       	ldd	r25, Y+9	; 0x09
    383a:	fc 01       	movw	r30, r24
    383c:	86 85       	ldd	r24, Z+14	; 0x0e
    383e:	88 2f       	mov	r24, r24
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	81 70       	andi	r24, 0x01	; 1
    3844:	99 27       	eor	r25, r25
    3846:	89 2b       	or	r24, r25
    3848:	a9 f4       	brne	.+42     	; 0x3874 <prvWriteMessageToBuffer+0x76>
    384a:	81 e0       	ldi	r24, 0x01	; 1
    384c:	89 83       	std	Y+1, r24	; 0x01
    384e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3850:	9d 85       	ldd	r25, Y+13	; 0x0d
    3852:	9d 83       	std	Y+5, r25	; 0x05
    3854:	8c 83       	std	Y+4, r24	; 0x04
    3856:	8e 85       	ldd	r24, Y+14	; 0x0e
    3858:	9f 85       	ldd	r25, Y+15	; 0x0f
    385a:	9f 83       	std	Y+7, r25	; 0x07
    385c:	8e 83       	std	Y+6, r24	; 0x06
    385e:	2c 81       	ldd	r18, Y+4	; 0x04
    3860:	3d 81       	ldd	r19, Y+5	; 0x05
    3862:	8e 81       	ldd	r24, Y+6	; 0x06
    3864:	9f 81       	ldd	r25, Y+7	; 0x07
    3866:	28 17       	cp	r18, r24
    3868:	39 07       	cpc	r19, r25
    386a:	08 f4       	brcc	.+2      	; 0x386e <prvWriteMessageToBuffer+0x70>
    386c:	c9 01       	movw	r24, r18
    386e:	9d 87       	std	Y+13, r25	; 0x0d
    3870:	8c 87       	std	Y+12, r24	; 0x0c
    3872:	14 c0       	rjmp	.+40     	; 0x389c <prvWriteMessageToBuffer+0x9e>
    3874:	2e 85       	ldd	r18, Y+14	; 0x0e
    3876:	3f 85       	ldd	r19, Y+15	; 0x0f
    3878:	88 89       	ldd	r24, Y+16	; 0x10
    387a:	99 89       	ldd	r25, Y+17	; 0x11
    387c:	28 17       	cp	r18, r24
    387e:	39 07       	cpc	r19, r25
    3880:	60 f0       	brcs	.+24     	; 0x389a <prvWriteMessageToBuffer+0x9c>
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	89 83       	std	Y+1, r24	; 0x01
    3886:	9e 01       	movw	r18, r28
    3888:	24 5f       	subi	r18, 0xF4	; 244
    388a:	3f 4f       	sbci	r19, 0xFF	; 255
    388c:	88 85       	ldd	r24, Y+8	; 0x08
    388e:	99 85       	ldd	r25, Y+9	; 0x09
    3890:	42 e0       	ldi	r20, 0x02	; 2
    3892:	50 e0       	ldi	r21, 0x00	; 0
    3894:	b9 01       	movw	r22, r18
    3896:	48 d1       	rcall	.+656    	; 0x3b28 <prvWriteBytesToBuffer>
    3898:	01 c0       	rjmp	.+2      	; 0x389c <prvWriteMessageToBuffer+0x9e>
    389a:	19 82       	std	Y+1, r1	; 0x01
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	88 23       	and	r24, r24
    38a0:	59 f0       	breq	.+22     	; 0x38b8 <prvWriteMessageToBuffer+0xba>
    38a2:	4c 85       	ldd	r20, Y+12	; 0x0c
    38a4:	5d 85       	ldd	r21, Y+13	; 0x0d
    38a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    38a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    38aa:	88 85       	ldd	r24, Y+8	; 0x08
    38ac:	99 85       	ldd	r25, Y+9	; 0x09
    38ae:	b9 01       	movw	r22, r18
    38b0:	3b d1       	rcall	.+630    	; 0x3b28 <prvWriteBytesToBuffer>
    38b2:	9b 83       	std	Y+3, r25	; 0x03
    38b4:	8a 83       	std	Y+2, r24	; 0x02
    38b6:	02 c0       	rjmp	.+4      	; 0x38bc <prvWriteMessageToBuffer+0xbe>
    38b8:	1b 82       	std	Y+3, r1	; 0x03
    38ba:	1a 82       	std	Y+2, r1	; 0x02
    38bc:	8a 81       	ldd	r24, Y+2	; 0x02
    38be:	9b 81       	ldd	r25, Y+3	; 0x03
    38c0:	61 96       	adiw	r28, 0x11	; 17
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	df 91       	pop	r29
    38ce:	cf 91       	pop	r28
    38d0:	1f 91       	pop	r17
    38d2:	0f 91       	pop	r16
    38d4:	08 95       	ret

000038d6 <xStreamBufferReceive>:
    38d6:	cf 92       	push	r12
    38d8:	df 92       	push	r13
    38da:	ef 92       	push	r14
    38dc:	ff 92       	push	r15
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
    38e6:	cd b7       	in	r28, 0x3d	; 61
    38e8:	de b7       	in	r29, 0x3e	; 62
    38ea:	62 97       	sbiw	r28, 0x12	; 18
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	9a 87       	std	Y+10, r25	; 0x0a
    38f8:	89 87       	std	Y+9, r24	; 0x09
    38fa:	7c 87       	std	Y+12, r23	; 0x0c
    38fc:	6b 87       	std	Y+11, r22	; 0x0b
    38fe:	5e 87       	std	Y+14, r21	; 0x0e
    3900:	4d 87       	std	Y+13, r20	; 0x0d
    3902:	0f 87       	std	Y+15, r16	; 0x0f
    3904:	18 8b       	std	Y+16, r17	; 0x10
    3906:	29 8b       	std	Y+17, r18	; 0x11
    3908:	3a 8b       	std	Y+18, r19	; 0x12
    390a:	89 85       	ldd	r24, Y+9	; 0x09
    390c:	9a 85       	ldd	r25, Y+10	; 0x0a
    390e:	98 87       	std	Y+8, r25	; 0x08
    3910:	8f 83       	std	Y+7, r24	; 0x07
    3912:	1a 82       	std	Y+2, r1	; 0x02
    3914:	19 82       	std	Y+1, r1	; 0x01
    3916:	8f 81       	ldd	r24, Y+7	; 0x07
    3918:	98 85       	ldd	r25, Y+8	; 0x08
    391a:	fc 01       	movw	r30, r24
    391c:	86 85       	ldd	r24, Z+14	; 0x0e
    391e:	88 2f       	mov	r24, r24
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	81 70       	andi	r24, 0x01	; 1
    3924:	99 27       	eor	r25, r25
    3926:	89 2b       	or	r24, r25
    3928:	29 f0       	breq	.+10     	; 0x3934 <xStreamBufferReceive+0x5e>
    392a:	82 e0       	ldi	r24, 0x02	; 2
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	9e 83       	std	Y+6, r25	; 0x06
    3930:	8d 83       	std	Y+5, r24	; 0x05
    3932:	02 c0       	rjmp	.+4      	; 0x3938 <xStreamBufferReceive+0x62>
    3934:	1e 82       	std	Y+6, r1	; 0x06
    3936:	1d 82       	std	Y+5, r1	; 0x05
    3938:	8f 85       	ldd	r24, Y+15	; 0x0f
    393a:	98 89       	ldd	r25, Y+16	; 0x10
    393c:	a9 89       	ldd	r26, Y+17	; 0x11
    393e:	ba 89       	ldd	r27, Y+18	; 0x12
    3940:	89 2b       	or	r24, r25
    3942:	8a 2b       	or	r24, r26
    3944:	8b 2b       	or	r24, r27
    3946:	09 f4       	brne	.+2      	; 0x394a <xStreamBufferReceive+0x74>
    3948:	3f c0       	rjmp	.+126    	; 0x39c8 <xStreamBufferReceive+0xf2>
    394a:	0f b6       	in	r0, 0x3f	; 63
    394c:	f8 94       	cli
    394e:	0f 92       	push	r0
    3950:	8f 81       	ldd	r24, Y+7	; 0x07
    3952:	98 85       	ldd	r25, Y+8	; 0x08
    3954:	1f d2       	rcall	.+1086   	; 0x3d94 <prvBytesInBuffer>
    3956:	9c 83       	std	Y+4, r25	; 0x04
    3958:	8b 83       	std	Y+3, r24	; 0x03
    395a:	2b 81       	ldd	r18, Y+3	; 0x03
    395c:	3c 81       	ldd	r19, Y+4	; 0x04
    395e:	8d 81       	ldd	r24, Y+5	; 0x05
    3960:	9e 81       	ldd	r25, Y+6	; 0x06
    3962:	82 17       	cp	r24, r18
    3964:	93 07       	cpc	r25, r19
    3966:	60 f0       	brcs	.+24     	; 0x3980 <xStreamBufferReceive+0xaa>
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	90 e0       	ldi	r25, 0x00	; 0
    396c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <xTaskNotifyStateClear>
    3970:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <xTaskGetCurrentTaskHandle>
    3974:	9c 01       	movw	r18, r24
    3976:	8f 81       	ldd	r24, Y+7	; 0x07
    3978:	98 85       	ldd	r25, Y+8	; 0x08
    397a:	fc 01       	movw	r30, r24
    397c:	31 87       	std	Z+9, r19	; 0x09
    397e:	20 87       	std	Z+8, r18	; 0x08
    3980:	0f 90       	pop	r0
    3982:	0f be       	out	0x3f, r0	; 63
    3984:	2b 81       	ldd	r18, Y+3	; 0x03
    3986:	3c 81       	ldd	r19, Y+4	; 0x04
    3988:	8d 81       	ldd	r24, Y+5	; 0x05
    398a:	9e 81       	ldd	r25, Y+6	; 0x06
    398c:	82 17       	cp	r24, r18
    398e:	93 07       	cpc	r25, r19
    3990:	00 f1       	brcs	.+64     	; 0x39d2 <xStreamBufferReceive+0xfc>
    3992:	8f 85       	ldd	r24, Y+15	; 0x0f
    3994:	98 89       	ldd	r25, Y+16	; 0x10
    3996:	a9 89       	ldd	r26, Y+17	; 0x11
    3998:	ba 89       	ldd	r27, Y+18	; 0x12
    399a:	6c 01       	movw	r12, r24
    399c:	7d 01       	movw	r14, r26
    399e:	00 e0       	ldi	r16, 0x00	; 0
    39a0:	10 e0       	ldi	r17, 0x00	; 0
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	a9 01       	movw	r20, r18
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	70 e0       	ldi	r23, 0x00	; 0
    39ac:	cb 01       	movw	r24, r22
    39ae:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <xTaskNotifyWait>
    39b2:	8f 81       	ldd	r24, Y+7	; 0x07
    39b4:	98 85       	ldd	r25, Y+8	; 0x08
    39b6:	fc 01       	movw	r30, r24
    39b8:	11 86       	std	Z+9, r1	; 0x09
    39ba:	10 86       	std	Z+8, r1	; 0x08
    39bc:	8f 81       	ldd	r24, Y+7	; 0x07
    39be:	98 85       	ldd	r25, Y+8	; 0x08
    39c0:	e9 d1       	rcall	.+978    	; 0x3d94 <prvBytesInBuffer>
    39c2:	9c 83       	std	Y+4, r25	; 0x04
    39c4:	8b 83       	std	Y+3, r24	; 0x03
    39c6:	05 c0       	rjmp	.+10     	; 0x39d2 <xStreamBufferReceive+0xfc>
    39c8:	8f 81       	ldd	r24, Y+7	; 0x07
    39ca:	98 85       	ldd	r25, Y+8	; 0x08
    39cc:	e3 d1       	rcall	.+966    	; 0x3d94 <prvBytesInBuffer>
    39ce:	9c 83       	std	Y+4, r25	; 0x04
    39d0:	8b 83       	std	Y+3, r24	; 0x03
    39d2:	2b 81       	ldd	r18, Y+3	; 0x03
    39d4:	3c 81       	ldd	r19, Y+4	; 0x04
    39d6:	8d 81       	ldd	r24, Y+5	; 0x05
    39d8:	9e 81       	ldd	r25, Y+6	; 0x06
    39da:	82 17       	cp	r24, r18
    39dc:	93 07       	cpc	r25, r19
    39de:	68 f5       	brcc	.+90     	; 0x3a3a <xStreamBufferReceive+0x164>
    39e0:	ed 81       	ldd	r30, Y+5	; 0x05
    39e2:	fe 81       	ldd	r31, Y+6	; 0x06
    39e4:	2b 81       	ldd	r18, Y+3	; 0x03
    39e6:	3c 81       	ldd	r19, Y+4	; 0x04
    39e8:	4d 85       	ldd	r20, Y+13	; 0x0d
    39ea:	5e 85       	ldd	r21, Y+14	; 0x0e
    39ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    39ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    39f0:	8f 81       	ldd	r24, Y+7	; 0x07
    39f2:	98 85       	ldd	r25, Y+8	; 0x08
    39f4:	8f 01       	movw	r16, r30
    39f6:	32 d0       	rcall	.+100    	; 0x3a5c <prvReadMessageFromBuffer>
    39f8:	9a 83       	std	Y+2, r25	; 0x02
    39fa:	89 83       	std	Y+1, r24	; 0x01
    39fc:	89 81       	ldd	r24, Y+1	; 0x01
    39fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3a00:	89 2b       	or	r24, r25
    3a02:	d9 f0       	breq	.+54     	; 0x3a3a <xStreamBufferReceive+0x164>
    3a04:	a1 d4       	rcall	.+2370   	; 0x4348 <vTaskSuspendAll>
    3a06:	8f 81       	ldd	r24, Y+7	; 0x07
    3a08:	98 85       	ldd	r25, Y+8	; 0x08
    3a0a:	fc 01       	movw	r30, r24
    3a0c:	82 85       	ldd	r24, Z+10	; 0x0a
    3a0e:	93 85       	ldd	r25, Z+11	; 0x0b
    3a10:	89 2b       	or	r24, r25
    3a12:	91 f0       	breq	.+36     	; 0x3a38 <xStreamBufferReceive+0x162>
    3a14:	8f 81       	ldd	r24, Y+7	; 0x07
    3a16:	98 85       	ldd	r25, Y+8	; 0x08
    3a18:	fc 01       	movw	r30, r24
    3a1a:	82 85       	ldd	r24, Z+10	; 0x0a
    3a1c:	93 85       	ldd	r25, Z+11	; 0x0b
    3a1e:	00 e0       	ldi	r16, 0x00	; 0
    3a20:	10 e0       	ldi	r17, 0x00	; 0
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	ba 01       	movw	r22, r20
    3a2a:	0e 94 93 2a 	call	0x5526	; 0x5526 <xTaskGenericNotify>
    3a2e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a30:	98 85       	ldd	r25, Y+8	; 0x08
    3a32:	fc 01       	movw	r30, r24
    3a34:	13 86       	std	Z+11, r1	; 0x0b
    3a36:	12 86       	std	Z+10, r1	; 0x0a
    3a38:	94 d4       	rcall	.+2344   	; 0x4362 <xTaskResumeAll>
    3a3a:	89 81       	ldd	r24, Y+1	; 0x01
    3a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a3e:	62 96       	adiw	r28, 0x12	; 18
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	de bf       	out	0x3e, r29	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	cd bf       	out	0x3d, r28	; 61
    3a4a:	df 91       	pop	r29
    3a4c:	cf 91       	pop	r28
    3a4e:	1f 91       	pop	r17
    3a50:	0f 91       	pop	r16
    3a52:	ff 90       	pop	r15
    3a54:	ef 90       	pop	r14
    3a56:	df 90       	pop	r13
    3a58:	cf 90       	pop	r12
    3a5a:	08 95       	ret

00003a5c <prvReadMessageFromBuffer>:
    3a5c:	0f 93       	push	r16
    3a5e:	1f 93       	push	r17
    3a60:	cf 93       	push	r28
    3a62:	df 93       	push	r29
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	62 97       	sbiw	r28, 0x12	; 18
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	9a 87       	std	Y+10, r25	; 0x0a
    3a76:	89 87       	std	Y+9, r24	; 0x09
    3a78:	7c 87       	std	Y+12, r23	; 0x0c
    3a7a:	6b 87       	std	Y+11, r22	; 0x0b
    3a7c:	5e 87       	std	Y+14, r21	; 0x0e
    3a7e:	4d 87       	std	Y+13, r20	; 0x0d
    3a80:	38 8b       	std	Y+16, r19	; 0x10
    3a82:	2f 87       	std	Y+15, r18	; 0x0f
    3a84:	1a 8b       	std	Y+18, r17	; 0x12
    3a86:	09 8b       	std	Y+17, r16	; 0x11
    3a88:	89 89       	ldd	r24, Y+17	; 0x11
    3a8a:	9a 89       	ldd	r25, Y+18	; 0x12
    3a8c:	89 2b       	or	r24, r25
    3a8e:	81 f1       	breq	.+96     	; 0x3af0 <prvReadMessageFromBuffer+0x94>
    3a90:	89 85       	ldd	r24, Y+9	; 0x09
    3a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a94:	fc 01       	movw	r30, r24
    3a96:	80 81       	ld	r24, Z
    3a98:	91 81       	ldd	r25, Z+1	; 0x01
    3a9a:	9c 83       	std	Y+4, r25	; 0x04
    3a9c:	8b 83       	std	Y+3, r24	; 0x03
    3a9e:	2f 85       	ldd	r18, Y+15	; 0x0f
    3aa0:	38 89       	ldd	r19, Y+16	; 0x10
    3aa2:	49 89       	ldd	r20, Y+17	; 0x11
    3aa4:	5a 89       	ldd	r21, Y+18	; 0x12
    3aa6:	be 01       	movw	r22, r28
    3aa8:	69 5f       	subi	r22, 0xF9	; 249
    3aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    3aac:	89 85       	ldd	r24, Y+9	; 0x09
    3aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab0:	ca d0       	rcall	.+404    	; 0x3c46 <prvReadBytesFromBuffer>
    3ab2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab4:	98 85       	ldd	r25, Y+8	; 0x08
    3ab6:	9a 83       	std	Y+2, r25	; 0x02
    3ab8:	89 83       	std	Y+1, r24	; 0x01
    3aba:	2f 85       	ldd	r18, Y+15	; 0x0f
    3abc:	38 89       	ldd	r19, Y+16	; 0x10
    3abe:	89 89       	ldd	r24, Y+17	; 0x11
    3ac0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ac2:	a9 01       	movw	r20, r18
    3ac4:	48 1b       	sub	r20, r24
    3ac6:	59 0b       	sbc	r21, r25
    3ac8:	ca 01       	movw	r24, r20
    3aca:	98 8b       	std	Y+16, r25	; 0x10
    3acc:	8f 87       	std	Y+15, r24	; 0x0f
    3ace:	29 81       	ldd	r18, Y+1	; 0x01
    3ad0:	3a 81       	ldd	r19, Y+2	; 0x02
    3ad2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ad4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ad6:	82 17       	cp	r24, r18
    3ad8:	93 07       	cpc	r25, r19
    3ada:	70 f4       	brcc	.+28     	; 0x3af8 <prvReadMessageFromBuffer+0x9c>
    3adc:	89 85       	ldd	r24, Y+9	; 0x09
    3ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ae2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ae4:	fc 01       	movw	r30, r24
    3ae6:	31 83       	std	Z+1, r19	; 0x01
    3ae8:	20 83       	st	Z, r18
    3aea:	1a 82       	std	Y+2, r1	; 0x02
    3aec:	19 82       	std	Y+1, r1	; 0x01
    3aee:	04 c0       	rjmp	.+8      	; 0x3af8 <prvReadMessageFromBuffer+0x9c>
    3af0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3af2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3af4:	9a 83       	std	Y+2, r25	; 0x02
    3af6:	89 83       	std	Y+1, r24	; 0x01
    3af8:	2f 85       	ldd	r18, Y+15	; 0x0f
    3afa:	38 89       	ldd	r19, Y+16	; 0x10
    3afc:	49 81       	ldd	r20, Y+1	; 0x01
    3afe:	5a 81       	ldd	r21, Y+2	; 0x02
    3b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b04:	89 85       	ldd	r24, Y+9	; 0x09
    3b06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b08:	9e d0       	rcall	.+316    	; 0x3c46 <prvReadBytesFromBuffer>
    3b0a:	9e 83       	std	Y+6, r25	; 0x06
    3b0c:	8d 83       	std	Y+5, r24	; 0x05
    3b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3b10:	9e 81       	ldd	r25, Y+6	; 0x06
    3b12:	62 96       	adiw	r28, 0x12	; 18
    3b14:	0f b6       	in	r0, 0x3f	; 63
    3b16:	f8 94       	cli
    3b18:	de bf       	out	0x3e, r29	; 62
    3b1a:	0f be       	out	0x3f, r0	; 63
    3b1c:	cd bf       	out	0x3d, r28	; 61
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	08 95       	ret

00003b28 <prvWriteBytesToBuffer>:
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	cd b7       	in	r28, 0x3d	; 61
    3b2e:	de b7       	in	r29, 0x3e	; 62
    3b30:	2e 97       	sbiw	r28, 0x0e	; 14
    3b32:	0f b6       	in	r0, 0x3f	; 63
    3b34:	f8 94       	cli
    3b36:	de bf       	out	0x3e, r29	; 62
    3b38:	0f be       	out	0x3f, r0	; 63
    3b3a:	cd bf       	out	0x3d, r28	; 61
    3b3c:	9a 87       	std	Y+10, r25	; 0x0a
    3b3e:	89 87       	std	Y+9, r24	; 0x09
    3b40:	7c 87       	std	Y+12, r23	; 0x0c
    3b42:	6b 87       	std	Y+11, r22	; 0x0b
    3b44:	5e 87       	std	Y+14, r21	; 0x0e
    3b46:	4d 87       	std	Y+13, r20	; 0x0d
size_t xNextHead, xFirstLength;

    configASSERT( xCount > ( size_t ) 0 );

    xNextHead = pxStreamBuffer->xHead;
    3b48:	89 85       	ldd	r24, Y+9	; 0x09
    3b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4c:	fc 01       	movw	r30, r24
    3b4e:	82 81       	ldd	r24, Z+2	; 0x02
    3b50:	93 81       	ldd	r25, Z+3	; 0x03
    3b52:	9a 83       	std	Y+2, r25	; 0x02
    3b54:	89 83       	std	Y+1, r24	; 0x01

    /* Calculate the number of bytes that can be added in the first write -
    which may be less than the total number of bytes that need to be added if
    the buffer will wrap back to the beginning. */
    xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
    3b56:	89 85       	ldd	r24, Y+9	; 0x09
    3b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	24 81       	ldd	r18, Z+4	; 0x04
    3b5e:	35 81       	ldd	r19, Z+5	; 0x05
    3b60:	89 81       	ldd	r24, Y+1	; 0x01
    3b62:	9a 81       	ldd	r25, Y+2	; 0x02
    3b64:	a9 01       	movw	r20, r18
    3b66:	48 1b       	sub	r20, r24
    3b68:	59 0b       	sbc	r21, r25
    3b6a:	ca 01       	movw	r24, r20
    3b6c:	9c 83       	std	Y+4, r25	; 0x04
    3b6e:	8b 83       	std	Y+3, r24	; 0x03
    3b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b74:	9e 83       	std	Y+6, r25	; 0x06
    3b76:	8d 83       	std	Y+5, r24	; 0x05
    3b78:	2b 81       	ldd	r18, Y+3	; 0x03
    3b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b7c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b80:	28 17       	cp	r18, r24
    3b82:	39 07       	cpc	r19, r25
    3b84:	08 f4       	brcc	.+2      	; 0x3b88 <prvWriteBytesToBuffer+0x60>
    3b86:	c9 01       	movw	r24, r18
    3b88:	98 87       	std	Y+8, r25	; 0x08
    3b8a:	8f 83       	std	Y+7, r24	; 0x07

    /* Write as many bytes as can be written in the first write. */
    configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
    ( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3b8c:	89 85       	ldd	r24, Y+9	; 0x09
    3b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b90:	fc 01       	movw	r30, r24
    3b92:	24 85       	ldd	r18, Z+12	; 0x0c
    3b94:	35 85       	ldd	r19, Z+13	; 0x0d
    3b96:	89 81       	ldd	r24, Y+1	; 0x01
    3b98:	9a 81       	ldd	r25, Y+2	; 0x02
    3b9a:	82 0f       	add	r24, r18
    3b9c:	93 1f       	adc	r25, r19
    3b9e:	4f 81       	ldd	r20, Y+7	; 0x07
    3ba0:	58 85       	ldd	r21, Y+8	; 0x08
    3ba2:	2b 85       	ldd	r18, Y+11	; 0x0b
    3ba4:	3c 85       	ldd	r19, Y+12	; 0x0c
    3ba6:	b9 01       	movw	r22, r18
    3ba8:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>

    /* If the number of bytes written was less than the number that could be
    written in the first write... */
    if( xCount > xFirstLength )
    3bac:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bae:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bb0:	8f 81       	ldd	r24, Y+7	; 0x07
    3bb2:	98 85       	ldd	r25, Y+8	; 0x08
    3bb4:	82 17       	cp	r24, r18
    3bb6:	93 07       	cpc	r25, r19
    3bb8:	a8 f4       	brcc	.+42     	; 0x3be4 <prvWriteBytesToBuffer+0xbc>
    {
        /* ...then write the remaining bytes to the start of the buffer. */
        configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3bba:	2d 85       	ldd	r18, Y+13	; 0x0d
    3bbc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3bbe:	8f 81       	ldd	r24, Y+7	; 0x07
    3bc0:	98 85       	ldd	r25, Y+8	; 0x08
    3bc2:	a9 01       	movw	r20, r18
    3bc4:	48 1b       	sub	r20, r24
    3bc6:	59 0b       	sbc	r21, r25
    3bc8:	2b 85       	ldd	r18, Y+11	; 0x0b
    3bca:	3c 85       	ldd	r19, Y+12	; 0x0c
    3bcc:	8f 81       	ldd	r24, Y+7	; 0x07
    3bce:	98 85       	ldd	r25, Y+8	; 0x08
    3bd0:	28 0f       	add	r18, r24
    3bd2:	39 1f       	adc	r19, r25
    3bd4:	89 85       	ldd	r24, Y+9	; 0x09
    3bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bd8:	fc 01       	movw	r30, r24
    3bda:	84 85       	ldd	r24, Z+12	; 0x0c
    3bdc:	95 85       	ldd	r25, Z+13	; 0x0d
    3bde:	b9 01       	movw	r22, r18
    3be0:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xNextHead += xCount;
    3be4:	29 81       	ldd	r18, Y+1	; 0x01
    3be6:	3a 81       	ldd	r19, Y+2	; 0x02
    3be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bec:	82 0f       	add	r24, r18
    3bee:	93 1f       	adc	r25, r19
    3bf0:	9a 83       	std	Y+2, r25	; 0x02
    3bf2:	89 83       	std	Y+1, r24	; 0x01
    if( xNextHead >= pxStreamBuffer->xLength )
    3bf4:	89 85       	ldd	r24, Y+9	; 0x09
    3bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bf8:	fc 01       	movw	r30, r24
    3bfa:	24 81       	ldd	r18, Z+4	; 0x04
    3bfc:	35 81       	ldd	r19, Z+5	; 0x05
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	9a 81       	ldd	r25, Y+2	; 0x02
    3c02:	82 17       	cp	r24, r18
    3c04:	93 07       	cpc	r25, r19
    3c06:	68 f0       	brcs	.+26     	; 0x3c22 <prvWriteBytesToBuffer+0xfa>
    {
        xNextHead -= pxStreamBuffer->xLength;
    3c08:	89 85       	ldd	r24, Y+9	; 0x09
    3c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	84 81       	ldd	r24, Z+4	; 0x04
    3c10:	95 81       	ldd	r25, Z+5	; 0x05
    3c12:	29 81       	ldd	r18, Y+1	; 0x01
    3c14:	3a 81       	ldd	r19, Y+2	; 0x02
    3c16:	a9 01       	movw	r20, r18
    3c18:	48 1b       	sub	r20, r24
    3c1a:	59 0b       	sbc	r21, r25
    3c1c:	ca 01       	movw	r24, r20
    3c1e:	9a 83       	std	Y+2, r25	; 0x02
    3c20:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxStreamBuffer->xHead = xNextHead;
    3c22:	89 85       	ldd	r24, Y+9	; 0x09
    3c24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c26:	29 81       	ldd	r18, Y+1	; 0x01
    3c28:	3a 81       	ldd	r19, Y+2	; 0x02
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	33 83       	std	Z+3, r19	; 0x03
    3c2e:	22 83       	std	Z+2, r18	; 0x02

    return xCount;
    3c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c32:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    3c34:	2e 96       	adiw	r28, 0x0e	; 14
    3c36:	0f b6       	in	r0, 0x3f	; 63
    3c38:	f8 94       	cli
    3c3a:	de bf       	out	0x3e, r29	; 62
    3c3c:	0f be       	out	0x3f, r0	; 63
    3c3e:	cd bf       	out	0x3d, r28	; 61
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	08 95       	ret

00003c46 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
    3c46:	cf 93       	push	r28
    3c48:	df 93       	push	r29
    3c4a:	cd b7       	in	r28, 0x3d	; 61
    3c4c:	de b7       	in	r29, 0x3e	; 62
    3c4e:	66 97       	sbiw	r28, 0x16	; 22
    3c50:	0f b6       	in	r0, 0x3f	; 63
    3c52:	f8 94       	cli
    3c54:	de bf       	out	0x3e, r29	; 62
    3c56:	0f be       	out	0x3f, r0	; 63
    3c58:	cd bf       	out	0x3d, r28	; 61
    3c5a:	98 8b       	std	Y+16, r25	; 0x10
    3c5c:	8f 87       	std	Y+15, r24	; 0x0f
    3c5e:	7a 8b       	std	Y+18, r23	; 0x12
    3c60:	69 8b       	std	Y+17, r22	; 0x11
    3c62:	5c 8b       	std	Y+20, r21	; 0x14
    3c64:	4b 8b       	std	Y+19, r20	; 0x13
    3c66:	3e 8b       	std	Y+22, r19	; 0x16
    3c68:	2d 8b       	std	Y+21, r18	; 0x15
size_t xCount, xFirstLength, xNextTail;

    /* Use the minimum of the wanted bytes and the available bytes. */
    xCount = configMIN( xBytesAvailable, xMaxCount );
    3c6a:	8d 89       	ldd	r24, Y+21	; 0x15
    3c6c:	9e 89       	ldd	r25, Y+22	; 0x16
    3c6e:	9c 83       	std	Y+4, r25	; 0x04
    3c70:	8b 83       	std	Y+3, r24	; 0x03
    3c72:	8b 89       	ldd	r24, Y+19	; 0x13
    3c74:	9c 89       	ldd	r25, Y+20	; 0x14
    3c76:	9e 83       	std	Y+6, r25	; 0x06
    3c78:	8d 83       	std	Y+5, r24	; 0x05
    3c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	28 17       	cp	r18, r24
    3c84:	39 07       	cpc	r19, r25
    3c86:	08 f4       	brcc	.+2      	; 0x3c8a <prvReadBytesFromBuffer+0x44>
    3c88:	c9 01       	movw	r24, r18
    3c8a:	98 87       	std	Y+8, r25	; 0x08
    3c8c:	8f 83       	std	Y+7, r24	; 0x07

    if( xCount > ( size_t ) 0 )
    3c8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c90:	98 85       	ldd	r25, Y+8	; 0x08
    3c92:	89 2b       	or	r24, r25
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <prvReadBytesFromBuffer+0x52>
    3c96:	73 c0       	rjmp	.+230    	; 0x3d7e <prvReadBytesFromBuffer+0x138>
    {
        xNextTail = pxStreamBuffer->xTail;
    3c98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c9a:	98 89       	ldd	r25, Y+16	; 0x10
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	80 81       	ld	r24, Z
    3ca0:	91 81       	ldd	r25, Z+1	; 0x01
    3ca2:	9a 83       	std	Y+2, r25	; 0x02
    3ca4:	89 83       	std	Y+1, r24	; 0x01

        /* Calculate the number of bytes that can be read - which may be
        less than the number wanted if the data wraps around to the start of
        the buffer. */
        xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
    3ca6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ca8:	98 89       	ldd	r25, Y+16	; 0x10
    3caa:	fc 01       	movw	r30, r24
    3cac:	24 81       	ldd	r18, Z+4	; 0x04
    3cae:	35 81       	ldd	r19, Z+5	; 0x05
    3cb0:	89 81       	ldd	r24, Y+1	; 0x01
    3cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    3cb4:	a9 01       	movw	r20, r18
    3cb6:	48 1b       	sub	r20, r24
    3cb8:	59 0b       	sbc	r21, r25
    3cba:	ca 01       	movw	r24, r20
    3cbc:	9a 87       	std	Y+10, r25	; 0x0a
    3cbe:	89 87       	std	Y+9, r24	; 0x09
    3cc0:	8f 81       	ldd	r24, Y+7	; 0x07
    3cc2:	98 85       	ldd	r25, Y+8	; 0x08
    3cc4:	9c 87       	std	Y+12, r25	; 0x0c
    3cc6:	8b 87       	std	Y+11, r24	; 0x0b
    3cc8:	29 85       	ldd	r18, Y+9	; 0x09
    3cca:	3a 85       	ldd	r19, Y+10	; 0x0a
    3ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    3cd0:	28 17       	cp	r18, r24
    3cd2:	39 07       	cpc	r19, r25
    3cd4:	08 f4       	brcc	.+2      	; 0x3cd8 <prvReadBytesFromBuffer+0x92>
    3cd6:	c9 01       	movw	r24, r18
    3cd8:	9e 87       	std	Y+14, r25	; 0x0e
    3cda:	8d 87       	std	Y+13, r24	; 0x0d

        /* Obtain the number of bytes it is possible to obtain in the first
        read.  Asserts check bounds of read and write. */
        configASSERT( xFirstLength <= xMaxCount );
        configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
        ( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cde:	98 89       	ldd	r25, Y+16	; 0x10
    3ce0:	fc 01       	movw	r30, r24
    3ce2:	24 85       	ldd	r18, Z+12	; 0x0c
    3ce4:	35 85       	ldd	r19, Z+13	; 0x0d
    3ce6:	89 81       	ldd	r24, Y+1	; 0x01
    3ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cea:	28 0f       	add	r18, r24
    3cec:	39 1f       	adc	r19, r25
    3cee:	4d 85       	ldd	r20, Y+13	; 0x0d
    3cf0:	5e 85       	ldd	r21, Y+14	; 0x0e
    3cf2:	89 89       	ldd	r24, Y+17	; 0x11
    3cf4:	9a 89       	ldd	r25, Y+18	; 0x12
    3cf6:	b9 01       	movw	r22, r18
    3cf8:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>

        /* If the total number of wanted bytes is greater than the number
        that could be read in the first read... */
        if( xCount > xFirstLength )
    3cfc:	2f 81       	ldd	r18, Y+7	; 0x07
    3cfe:	38 85       	ldd	r19, Y+8	; 0x08
    3d00:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d02:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d04:	82 17       	cp	r24, r18
    3d06:	93 07       	cpc	r25, r19
    3d08:	a0 f4       	brcc	.+40     	; 0x3d32 <prvReadBytesFromBuffer+0xec>
        {
            /*...then read the remaining bytes from the start of the buffer. */
            configASSERT( xCount <= xMaxCount );
            ( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
    3d0a:	2f 81       	ldd	r18, Y+7	; 0x07
    3d0c:	38 85       	ldd	r19, Y+8	; 0x08
    3d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d12:	a9 01       	movw	r20, r18
    3d14:	48 1b       	sub	r20, r24
    3d16:	59 0b       	sbc	r21, r25
    3d18:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d1a:	98 89       	ldd	r25, Y+16	; 0x10
    3d1c:	fc 01       	movw	r30, r24
    3d1e:	64 85       	ldd	r22, Z+12	; 0x0c
    3d20:	75 85       	ldd	r23, Z+13	; 0x0d
    3d22:	29 89       	ldd	r18, Y+17	; 0x11
    3d24:	3a 89       	ldd	r19, Y+18	; 0x12
    3d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d2a:	82 0f       	add	r24, r18
    3d2c:	93 1f       	adc	r25, r19
    3d2e:	0e 94 55 4a 	call	0x94aa	; 0x94aa <memcpy>
            mtCOVERAGE_TEST_MARKER();
        }

        /* Move the tail pointer to effectively remove the data read from
        the buffer. */
        xNextTail += xCount;
    3d32:	29 81       	ldd	r18, Y+1	; 0x01
    3d34:	3a 81       	ldd	r19, Y+2	; 0x02
    3d36:	8f 81       	ldd	r24, Y+7	; 0x07
    3d38:	98 85       	ldd	r25, Y+8	; 0x08
    3d3a:	82 0f       	add	r24, r18
    3d3c:	93 1f       	adc	r25, r19
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01

        if( xNextTail >= pxStreamBuffer->xLength )
    3d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d44:	98 89       	ldd	r25, Y+16	; 0x10
    3d46:	fc 01       	movw	r30, r24
    3d48:	24 81       	ldd	r18, Z+4	; 0x04
    3d4a:	35 81       	ldd	r19, Z+5	; 0x05
    3d4c:	89 81       	ldd	r24, Y+1	; 0x01
    3d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    3d50:	82 17       	cp	r24, r18
    3d52:	93 07       	cpc	r25, r19
    3d54:	68 f0       	brcs	.+26     	; 0x3d70 <prvReadBytesFromBuffer+0x12a>
        {
            xNextTail -= pxStreamBuffer->xLength;
    3d56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d58:	98 89       	ldd	r25, Y+16	; 0x10
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	84 81       	ldd	r24, Z+4	; 0x04
    3d5e:	95 81       	ldd	r25, Z+5	; 0x05
    3d60:	29 81       	ldd	r18, Y+1	; 0x01
    3d62:	3a 81       	ldd	r19, Y+2	; 0x02
    3d64:	a9 01       	movw	r20, r18
    3d66:	48 1b       	sub	r20, r24
    3d68:	59 0b       	sbc	r21, r25
    3d6a:	ca 01       	movw	r24, r20
    3d6c:	9a 83       	std	Y+2, r25	; 0x02
    3d6e:	89 83       	std	Y+1, r24	; 0x01
        }

        pxStreamBuffer->xTail = xNextTail;
    3d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d72:	98 89       	ldd	r25, Y+16	; 0x10
    3d74:	29 81       	ldd	r18, Y+1	; 0x01
    3d76:	3a 81       	ldd	r19, Y+2	; 0x02
    3d78:	fc 01       	movw	r30, r24
    3d7a:	31 83       	std	Z+1, r19	; 0x01
    3d7c:	20 83       	st	Z, r18
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    3d7e:	8f 81       	ldd	r24, Y+7	; 0x07
    3d80:	98 85       	ldd	r25, Y+8	; 0x08
}
    3d82:	66 96       	adiw	r28, 0x16	; 22
    3d84:	0f b6       	in	r0, 0x3f	; 63
    3d86:	f8 94       	cli
    3d88:	de bf       	out	0x3e, r29	; 62
    3d8a:	0f be       	out	0x3f, r0	; 63
    3d8c:	cd bf       	out	0x3d, r28	; 61
    3d8e:	df 91       	pop	r29
    3d90:	cf 91       	pop	r28
    3d92:	08 95       	ret

00003d94 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
    3d94:	cf 93       	push	r28
    3d96:	df 93       	push	r29
    3d98:	00 d0       	rcall	.+0      	; 0x3d9a <prvBytesInBuffer+0x6>
    3d9a:	1f 92       	push	r1
    3d9c:	cd b7       	in	r28, 0x3d	; 61
    3d9e:	de b7       	in	r29, 0x3e	; 62
    3da0:	9c 83       	std	Y+4, r25	; 0x04
    3da2:	8b 83       	std	Y+3, r24	; 0x03
/* Returns the distance between xTail and xHead. */
size_t xCount;

    xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
    3da4:	8b 81       	ldd	r24, Y+3	; 0x03
    3da6:	9c 81       	ldd	r25, Y+4	; 0x04
    3da8:	fc 01       	movw	r30, r24
    3daa:	24 81       	ldd	r18, Z+4	; 0x04
    3dac:	35 81       	ldd	r19, Z+5	; 0x05
    3dae:	8b 81       	ldd	r24, Y+3	; 0x03
    3db0:	9c 81       	ldd	r25, Y+4	; 0x04
    3db2:	fc 01       	movw	r30, r24
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
    3db6:	93 81       	ldd	r25, Z+3	; 0x03
    3db8:	82 0f       	add	r24, r18
    3dba:	93 1f       	adc	r25, r19
    3dbc:	9a 83       	std	Y+2, r25	; 0x02
    3dbe:	89 83       	std	Y+1, r24	; 0x01
    xCount -= pxStreamBuffer->xTail;
    3dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    3dc4:	fc 01       	movw	r30, r24
    3dc6:	80 81       	ld	r24, Z
    3dc8:	91 81       	ldd	r25, Z+1	; 0x01
    3dca:	29 81       	ldd	r18, Y+1	; 0x01
    3dcc:	3a 81       	ldd	r19, Y+2	; 0x02
    3dce:	a9 01       	movw	r20, r18
    3dd0:	48 1b       	sub	r20, r24
    3dd2:	59 0b       	sbc	r21, r25
    3dd4:	ca 01       	movw	r24, r20
    3dd6:	9a 83       	std	Y+2, r25	; 0x02
    3dd8:	89 83       	std	Y+1, r24	; 0x01
    if ( xCount >= pxStreamBuffer->xLength )
    3dda:	8b 81       	ldd	r24, Y+3	; 0x03
    3ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dde:	fc 01       	movw	r30, r24
    3de0:	24 81       	ldd	r18, Z+4	; 0x04
    3de2:	35 81       	ldd	r19, Z+5	; 0x05
    3de4:	89 81       	ldd	r24, Y+1	; 0x01
    3de6:	9a 81       	ldd	r25, Y+2	; 0x02
    3de8:	82 17       	cp	r24, r18
    3dea:	93 07       	cpc	r25, r19
    3dec:	68 f0       	brcs	.+26     	; 0x3e08 <prvBytesInBuffer+0x74>
    {
        xCount -= pxStreamBuffer->xLength;
    3dee:	8b 81       	ldd	r24, Y+3	; 0x03
    3df0:	9c 81       	ldd	r25, Y+4	; 0x04
    3df2:	fc 01       	movw	r30, r24
    3df4:	84 81       	ldd	r24, Z+4	; 0x04
    3df6:	95 81       	ldd	r25, Z+5	; 0x05
    3df8:	29 81       	ldd	r18, Y+1	; 0x01
    3dfa:	3a 81       	ldd	r19, Y+2	; 0x02
    3dfc:	a9 01       	movw	r20, r18
    3dfe:	48 1b       	sub	r20, r24
    3e00:	59 0b       	sbc	r21, r25
    3e02:	ca 01       	movw	r24, r20
    3e04:	9a 83       	std	Y+2, r25	; 0x02
    3e06:	89 83       	std	Y+1, r24	; 0x01
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xCount;
    3e08:	89 81       	ldd	r24, Y+1	; 0x01
    3e0a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	0f 90       	pop	r0
    3e14:	df 91       	pop	r29
    3e16:	cf 91       	pop	r28
    3e18:	08 95       	ret

00003e1a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
                                          uint8_t * const pucBuffer,
                                          size_t xBufferSizeBytes,
                                          size_t xTriggerLevelBytes,
                                          uint8_t ucFlags )
{
    3e1a:	0f 93       	push	r16
    3e1c:	cf 93       	push	r28
    3e1e:	df 93       	push	r29
    3e20:	cd b7       	in	r28, 0x3d	; 61
    3e22:	de b7       	in	r29, 0x3e	; 62
    3e24:	29 97       	sbiw	r28, 0x09	; 9
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	9a 83       	std	Y+2, r25	; 0x02
    3e32:	89 83       	std	Y+1, r24	; 0x01
    3e34:	7c 83       	std	Y+4, r23	; 0x04
    3e36:	6b 83       	std	Y+3, r22	; 0x03
    3e38:	5e 83       	std	Y+6, r21	; 0x06
    3e3a:	4d 83       	std	Y+5, r20	; 0x05
    3e3c:	38 87       	std	Y+8, r19	; 0x08
    3e3e:	2f 83       	std	Y+7, r18	; 0x07
    3e40:	09 87       	std	Y+9, r16	; 0x09
        const BaseType_t xWriteValue = 0x55;
        configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
    } /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
    #endif

    ( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
    3e42:	89 81       	ldd	r24, Y+1	; 0x01
    3e44:	9a 81       	ldd	r25, Y+2	; 0x02
    3e46:	40 e1       	ldi	r20, 0x10	; 16
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	60 e0       	ldi	r22, 0x00	; 0
    3e4c:	70 e0       	ldi	r23, 0x00	; 0
    3e4e:	0e 94 5e 4a 	call	0x94bc	; 0x94bc <memset>
    pxStreamBuffer->pucBuffer = pucBuffer;
    3e52:	89 81       	ldd	r24, Y+1	; 0x01
    3e54:	9a 81       	ldd	r25, Y+2	; 0x02
    3e56:	2b 81       	ldd	r18, Y+3	; 0x03
    3e58:	3c 81       	ldd	r19, Y+4	; 0x04
    3e5a:	fc 01       	movw	r30, r24
    3e5c:	35 87       	std	Z+13, r19	; 0x0d
    3e5e:	24 87       	std	Z+12, r18	; 0x0c
    pxStreamBuffer->xLength = xBufferSizeBytes;
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	9a 81       	ldd	r25, Y+2	; 0x02
    3e64:	2d 81       	ldd	r18, Y+5	; 0x05
    3e66:	3e 81       	ldd	r19, Y+6	; 0x06
    3e68:	fc 01       	movw	r30, r24
    3e6a:	35 83       	std	Z+5, r19	; 0x05
    3e6c:	24 83       	std	Z+4, r18	; 0x04
    pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
    3e6e:	89 81       	ldd	r24, Y+1	; 0x01
    3e70:	9a 81       	ldd	r25, Y+2	; 0x02
    3e72:	2f 81       	ldd	r18, Y+7	; 0x07
    3e74:	38 85       	ldd	r19, Y+8	; 0x08
    3e76:	fc 01       	movw	r30, r24
    3e78:	37 83       	std	Z+7, r19	; 0x07
    3e7a:	26 83       	std	Z+6, r18	; 0x06
    pxStreamBuffer->ucFlags = ucFlags;
    3e7c:	89 81       	ldd	r24, Y+1	; 0x01
    3e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3e80:	29 85       	ldd	r18, Y+9	; 0x09
    3e82:	fc 01       	movw	r30, r24
    3e84:	26 87       	std	Z+14, r18	; 0x0e
}
    3e86:	00 00       	nop
    3e88:	29 96       	adiw	r28, 0x09	; 9
    3e8a:	0f b6       	in	r0, 0x3f	; 63
    3e8c:	f8 94       	cli
    3e8e:	de bf       	out	0x3e, r29	; 62
    3e90:	0f be       	out	0x3f, r0	; 63
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	df 91       	pop	r29
    3e96:	cf 91       	pop	r28
    3e98:	0f 91       	pop	r16
    3e9a:	08 95       	ret

00003e9c <xTaskCreate>:
    3e9c:	af 92       	push	r10
    3e9e:	bf 92       	push	r11
    3ea0:	cf 92       	push	r12
    3ea2:	df 92       	push	r13
    3ea4:	ef 92       	push	r14
    3ea6:	ff 92       	push	r15
    3ea8:	0f 93       	push	r16
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    3eb2:	60 97       	sbiw	r28, 0x10	; 16
    3eb4:	0f b6       	in	r0, 0x3f	; 63
    3eb6:	f8 94       	cli
    3eb8:	de bf       	out	0x3e, r29	; 62
    3eba:	0f be       	out	0x3f, r0	; 63
    3ebc:	cd bf       	out	0x3d, r28	; 61
    3ebe:	9f 83       	std	Y+7, r25	; 0x07
    3ec0:	8e 83       	std	Y+6, r24	; 0x06
    3ec2:	79 87       	std	Y+9, r23	; 0x09
    3ec4:	68 87       	std	Y+8, r22	; 0x08
    3ec6:	5b 87       	std	Y+11, r21	; 0x0b
    3ec8:	4a 87       	std	Y+10, r20	; 0x0a
    3eca:	3d 87       	std	Y+13, r19	; 0x0d
    3ecc:	2c 87       	std	Y+12, r18	; 0x0c
    3ece:	0e 87       	std	Y+14, r16	; 0x0e
    3ed0:	f8 8a       	std	Y+16, r15	; 0x10
    3ed2:	ef 86       	std	Y+15, r14	; 0x0f
    3ed4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3ed6:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ed8:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <pvPortMalloc>
    3edc:	9d 83       	std	Y+5, r25	; 0x05
    3ede:	8c 83       	std	Y+4, r24	; 0x04
    3ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ee4:	89 2b       	or	r24, r25
    3ee6:	b9 f0       	breq	.+46     	; 0x3f16 <xTaskCreate+0x7a>
    3ee8:	80 e3       	ldi	r24, 0x30	; 48
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <pvPortMalloc>
    3ef0:	9a 83       	std	Y+2, r25	; 0x02
    3ef2:	89 83       	std	Y+1, r24	; 0x01
    3ef4:	89 81       	ldd	r24, Y+1	; 0x01
    3ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ef8:	89 2b       	or	r24, r25
    3efa:	41 f0       	breq	.+16     	; 0x3f0c <xTaskCreate+0x70>
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	9a 81       	ldd	r25, Y+2	; 0x02
    3f00:	2c 81       	ldd	r18, Y+4	; 0x04
    3f02:	3d 81       	ldd	r19, Y+5	; 0x05
    3f04:	fc 01       	movw	r30, r24
    3f06:	34 8f       	std	Z+28, r19	; 0x1c
    3f08:	23 8f       	std	Z+27, r18	; 0x1b
    3f0a:	07 c0       	rjmp	.+14     	; 0x3f1a <xTaskCreate+0x7e>
    3f0c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f0e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f10:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    3f14:	02 c0       	rjmp	.+4      	; 0x3f1a <xTaskCreate+0x7e>
    3f16:	1a 82       	std	Y+2, r1	; 0x02
    3f18:	19 82       	std	Y+1, r1	; 0x01
    3f1a:	89 81       	ldd	r24, Y+1	; 0x01
    3f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1e:	89 2b       	or	r24, r25
    3f20:	c1 f0       	breq	.+48     	; 0x3f52 <xTaskCreate+0xb6>
    3f22:	a9 81       	ldd	r26, Y+1	; 0x01
    3f24:	ba 81       	ldd	r27, Y+2	; 0x02
    3f26:	ef 85       	ldd	r30, Y+15	; 0x0f
    3f28:	f8 89       	ldd	r31, Y+16	; 0x10
    3f2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3f2c:	3d 85       	ldd	r19, Y+13	; 0x0d
    3f2e:	4a 85       	ldd	r20, Y+10	; 0x0a
    3f30:	5b 85       	ldd	r21, Y+11	; 0x0b
    3f32:	68 85       	ldd	r22, Y+8	; 0x08
    3f34:	79 85       	ldd	r23, Y+9	; 0x09
    3f36:	8e 81       	ldd	r24, Y+6	; 0x06
    3f38:	9f 81       	ldd	r25, Y+7	; 0x07
    3f3a:	a1 2c       	mov	r10, r1
    3f3c:	b1 2c       	mov	r11, r1
    3f3e:	6d 01       	movw	r12, r26
    3f40:	7f 01       	movw	r14, r30
    3f42:	0e 85       	ldd	r16, Y+14	; 0x0e
    3f44:	19 d0       	rcall	.+50     	; 0x3f78 <prvInitialiseNewTask>
    3f46:	89 81       	ldd	r24, Y+1	; 0x01
    3f48:	9a 81       	ldd	r25, Y+2	; 0x02
    3f4a:	03 d1       	rcall	.+518    	; 0x4152 <prvAddNewTaskToReadyList>
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	8b 83       	std	Y+3, r24	; 0x03
    3f50:	02 c0       	rjmp	.+4      	; 0x3f56 <xTaskCreate+0xba>
    3f52:	8f ef       	ldi	r24, 0xFF	; 255
    3f54:	8b 83       	std	Y+3, r24	; 0x03
    3f56:	8b 81       	ldd	r24, Y+3	; 0x03
    3f58:	60 96       	adiw	r28, 0x10	; 16
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	f8 94       	cli
    3f5e:	de bf       	out	0x3e, r29	; 62
    3f60:	0f be       	out	0x3f, r0	; 63
    3f62:	cd bf       	out	0x3d, r28	; 61
    3f64:	df 91       	pop	r29
    3f66:	cf 91       	pop	r28
    3f68:	0f 91       	pop	r16
    3f6a:	ff 90       	pop	r15
    3f6c:	ef 90       	pop	r14
    3f6e:	df 90       	pop	r13
    3f70:	cf 90       	pop	r12
    3f72:	bf 90       	pop	r11
    3f74:	af 90       	pop	r10
    3f76:	08 95       	ret

00003f78 <prvInitialiseNewTask>:
    3f78:	af 92       	push	r10
    3f7a:	bf 92       	push	r11
    3f7c:	cf 92       	push	r12
    3f7e:	df 92       	push	r13
    3f80:	ef 92       	push	r14
    3f82:	ff 92       	push	r15
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	cf 93       	push	r28
    3f8a:	df 93       	push	r29
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	62 97       	sbiw	r28, 0x12	; 18
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	9d 83       	std	Y+5, r25	; 0x05
    3f9e:	8c 83       	std	Y+4, r24	; 0x04
    3fa0:	7f 83       	std	Y+7, r23	; 0x07
    3fa2:	6e 83       	std	Y+6, r22	; 0x06
    3fa4:	59 87       	std	Y+9, r21	; 0x09
    3fa6:	48 87       	std	Y+8, r20	; 0x08
    3fa8:	3b 87       	std	Y+11, r19	; 0x0b
    3faa:	2a 87       	std	Y+10, r18	; 0x0a
    3fac:	0c 87       	std	Y+12, r16	; 0x0c
    3fae:	fe 86       	std	Y+14, r15	; 0x0e
    3fb0:	ed 86       	std	Y+13, r14	; 0x0d
    3fb2:	d8 8a       	std	Y+16, r13	; 0x10
    3fb4:	cf 86       	std	Y+15, r12	; 0x0f
    3fb6:	ba 8a       	std	Y+18, r11	; 0x12
    3fb8:	a9 8a       	std	Y+17, r10	; 0x11
    3fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fbc:	98 89       	ldd	r25, Y+16	; 0x10
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	83 8d       	ldd	r24, Z+27	; 0x1b
    3fc2:	94 8d       	ldd	r25, Z+28	; 0x1c
    3fc4:	28 85       	ldd	r18, Y+8	; 0x08
    3fc6:	39 85       	ldd	r19, Y+9	; 0x09
    3fc8:	a9 01       	movw	r20, r18
    3fca:	65 ea       	ldi	r22, 0xA5	; 165
    3fcc:	70 e0       	ldi	r23, 0x00	; 0
    3fce:	0e 94 5e 4a 	call	0x94bc	; 0x94bc <memset>
    3fd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fd4:	98 89       	ldd	r25, Y+16	; 0x10
    3fd6:	fc 01       	movw	r30, r24
    3fd8:	23 8d       	ldd	r18, Z+27	; 0x1b
    3fda:	34 8d       	ldd	r19, Z+28	; 0x1c
    3fdc:	88 85       	ldd	r24, Y+8	; 0x08
    3fde:	99 85       	ldd	r25, Y+9	; 0x09
    3fe0:	01 97       	sbiw	r24, 0x01	; 1
    3fe2:	82 0f       	add	r24, r18
    3fe4:	93 1f       	adc	r25, r19
    3fe6:	9b 83       	std	Y+3, r25	; 0x03
    3fe8:	8a 83       	std	Y+2, r24	; 0x02
    3fea:	8e 81       	ldd	r24, Y+6	; 0x06
    3fec:	9f 81       	ldd	r25, Y+7	; 0x07
    3fee:	89 2b       	or	r24, r25
    3ff0:	69 f1       	breq	.+90     	; 0x404c <prvInitialiseNewTask+0xd4>
    3ff2:	19 82       	std	Y+1, r1	; 0x01
    3ff4:	21 c0       	rjmp	.+66     	; 0x4038 <prvInitialiseNewTask+0xc0>
    3ff6:	89 81       	ldd	r24, Y+1	; 0x01
    3ff8:	88 2f       	mov	r24, r24
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	29 81       	ldd	r18, Y+1	; 0x01
    3ffe:	22 2f       	mov	r18, r18
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	4e 81       	ldd	r20, Y+6	; 0x06
    4004:	5f 81       	ldd	r21, Y+7	; 0x07
    4006:	24 0f       	add	r18, r20
    4008:	35 1f       	adc	r19, r21
    400a:	f9 01       	movw	r30, r18
    400c:	40 81       	ld	r20, Z
    400e:	2f 85       	ldd	r18, Y+15	; 0x0f
    4010:	38 89       	ldd	r19, Y+16	; 0x10
    4012:	82 0f       	add	r24, r18
    4014:	93 1f       	adc	r25, r19
    4016:	4d 96       	adiw	r24, 0x1d	; 29
    4018:	fc 01       	movw	r30, r24
    401a:	40 83       	st	Z, r20
    401c:	89 81       	ldd	r24, Y+1	; 0x01
    401e:	88 2f       	mov	r24, r24
    4020:	90 e0       	ldi	r25, 0x00	; 0
    4022:	2e 81       	ldd	r18, Y+6	; 0x06
    4024:	3f 81       	ldd	r19, Y+7	; 0x07
    4026:	82 0f       	add	r24, r18
    4028:	93 1f       	adc	r25, r19
    402a:	fc 01       	movw	r30, r24
    402c:	80 81       	ld	r24, Z
    402e:	88 23       	and	r24, r24
    4030:	39 f0       	breq	.+14     	; 0x4040 <prvInitialiseNewTask+0xc8>
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	8f 5f       	subi	r24, 0xFF	; 255
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	88 30       	cpi	r24, 0x08	; 8
    403c:	e0 f2       	brcs	.-72     	; 0x3ff6 <prvInitialiseNewTask+0x7e>
    403e:	01 c0       	rjmp	.+2      	; 0x4042 <prvInitialiseNewTask+0xca>
    4040:	00 00       	nop
    4042:	8f 85       	ldd	r24, Y+15	; 0x0f
    4044:	98 89       	ldd	r25, Y+16	; 0x10
    4046:	fc 01       	movw	r30, r24
    4048:	14 a2       	std	Z+36, r1	; 0x24
    404a:	04 c0       	rjmp	.+8      	; 0x4054 <prvInitialiseNewTask+0xdc>
    404c:	8f 85       	ldd	r24, Y+15	; 0x0f
    404e:	98 89       	ldd	r25, Y+16	; 0x10
    4050:	fc 01       	movw	r30, r24
    4052:	15 8e       	std	Z+29, r1	; 0x1d
    4054:	8c 85       	ldd	r24, Y+12	; 0x0c
    4056:	84 30       	cpi	r24, 0x04	; 4
    4058:	10 f0       	brcs	.+4      	; 0x405e <prvInitialiseNewTask+0xe6>
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	8c 87       	std	Y+12, r24	; 0x0c
    405e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4060:	98 89       	ldd	r25, Y+16	; 0x10
    4062:	2c 85       	ldd	r18, Y+12	; 0x0c
    4064:	fc 01       	movw	r30, r24
    4066:	22 8f       	std	Z+26, r18	; 0x1a
    4068:	8f 85       	ldd	r24, Y+15	; 0x0f
    406a:	98 89       	ldd	r25, Y+16	; 0x10
    406c:	2c 85       	ldd	r18, Y+12	; 0x0c
    406e:	fc 01       	movw	r30, r24
    4070:	27 a3       	std	Z+39, r18	; 0x27
    4072:	8f 85       	ldd	r24, Y+15	; 0x0f
    4074:	98 89       	ldd	r25, Y+16	; 0x10
    4076:	fc 01       	movw	r30, r24
    4078:	10 a6       	std	Z+40, r1	; 0x28
    407a:	8f 85       	ldd	r24, Y+15	; 0x0f
    407c:	98 89       	ldd	r25, Y+16	; 0x10
    407e:	02 96       	adiw	r24, 0x02	; 2
    4080:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInitialiseItem>
    4084:	8f 85       	ldd	r24, Y+15	; 0x0f
    4086:	98 89       	ldd	r25, Y+16	; 0x10
    4088:	0e 96       	adiw	r24, 0x0e	; 14
    408a:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <vListInitialiseItem>
    408e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4090:	98 89       	ldd	r25, Y+16	; 0x10
    4092:	2f 85       	ldd	r18, Y+15	; 0x0f
    4094:	38 89       	ldd	r19, Y+16	; 0x10
    4096:	fc 01       	movw	r30, r24
    4098:	33 87       	std	Z+11, r19	; 0x0b
    409a:	22 87       	std	Z+10, r18	; 0x0a
    409c:	8c 85       	ldd	r24, Y+12	; 0x0c
    409e:	88 2f       	mov	r24, r24
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	a0 e0       	ldi	r26, 0x00	; 0
    40a4:	b0 e0       	ldi	r27, 0x00	; 0
    40a6:	24 e0       	ldi	r18, 0x04	; 4
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	40 e0       	ldi	r20, 0x00	; 0
    40ac:	50 e0       	ldi	r21, 0x00	; 0
    40ae:	79 01       	movw	r14, r18
    40b0:	8a 01       	movw	r16, r20
    40b2:	e8 1a       	sub	r14, r24
    40b4:	f9 0a       	sbc	r15, r25
    40b6:	0a 0b       	sbc	r16, r26
    40b8:	1b 0b       	sbc	r17, r27
    40ba:	d8 01       	movw	r26, r16
    40bc:	c7 01       	movw	r24, r14
    40be:	2f 85       	ldd	r18, Y+15	; 0x0f
    40c0:	38 89       	ldd	r19, Y+16	; 0x10
    40c2:	f9 01       	movw	r30, r18
    40c4:	86 87       	std	Z+14, r24	; 0x0e
    40c6:	97 87       	std	Z+15, r25	; 0x0f
    40c8:	a0 8b       	std	Z+16, r26	; 0x10
    40ca:	b1 8b       	std	Z+17, r27	; 0x11
    40cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    40ce:	98 89       	ldd	r25, Y+16	; 0x10
    40d0:	2f 85       	ldd	r18, Y+15	; 0x0f
    40d2:	38 89       	ldd	r19, Y+16	; 0x10
    40d4:	fc 01       	movw	r30, r24
    40d6:	37 8b       	std	Z+23, r19	; 0x17
    40d8:	26 8b       	std	Z+22, r18	; 0x16
    40da:	8f 85       	ldd	r24, Y+15	; 0x0f
    40dc:	98 89       	ldd	r25, Y+16	; 0x10
    40de:	fc 01       	movw	r30, r24
    40e0:	12 a6       	std	Z+42, r1	; 0x2a
    40e2:	11 a6       	std	Z+41, r1	; 0x29
    40e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    40e6:	98 89       	ldd	r25, Y+16	; 0x10
    40e8:	fc 01       	movw	r30, r24
    40ea:	13 a6       	std	Z+43, r1	; 0x2b
    40ec:	14 a6       	std	Z+44, r1	; 0x2c
    40ee:	15 a6       	std	Z+45, r1	; 0x2d
    40f0:	16 a6       	std	Z+46, r1	; 0x2e
    40f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    40f4:	98 89       	ldd	r25, Y+16	; 0x10
    40f6:	fc 01       	movw	r30, r24
    40f8:	17 a6       	std	Z+47, r1	; 0x2f
    40fa:	4a 85       	ldd	r20, Y+10	; 0x0a
    40fc:	5b 85       	ldd	r21, Y+11	; 0x0b
    40fe:	2c 81       	ldd	r18, Y+4	; 0x04
    4100:	3d 81       	ldd	r19, Y+5	; 0x05
    4102:	8a 81       	ldd	r24, Y+2	; 0x02
    4104:	9b 81       	ldd	r25, Y+3	; 0x03
    4106:	b9 01       	movw	r22, r18
    4108:	0e 94 8e 10 	call	0x211c	; 0x211c <pxPortInitialiseStack>
    410c:	9c 01       	movw	r18, r24
    410e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4110:	98 89       	ldd	r25, Y+16	; 0x10
    4112:	fc 01       	movw	r30, r24
    4114:	31 83       	std	Z+1, r19	; 0x01
    4116:	20 83       	st	Z, r18
    4118:	8d 85       	ldd	r24, Y+13	; 0x0d
    411a:	9e 85       	ldd	r25, Y+14	; 0x0e
    411c:	89 2b       	or	r24, r25
    411e:	39 f0       	breq	.+14     	; 0x412e <prvInitialiseNewTask+0x1b6>
    4120:	8d 85       	ldd	r24, Y+13	; 0x0d
    4122:	9e 85       	ldd	r25, Y+14	; 0x0e
    4124:	2f 85       	ldd	r18, Y+15	; 0x0f
    4126:	38 89       	ldd	r19, Y+16	; 0x10
    4128:	fc 01       	movw	r30, r24
    412a:	31 83       	std	Z+1, r19	; 0x01
    412c:	20 83       	st	Z, r18
    412e:	00 00       	nop
    4130:	62 96       	adiw	r28, 0x12	; 18
    4132:	0f b6       	in	r0, 0x3f	; 63
    4134:	f8 94       	cli
    4136:	de bf       	out	0x3e, r29	; 62
    4138:	0f be       	out	0x3f, r0	; 63
    413a:	cd bf       	out	0x3d, r28	; 61
    413c:	df 91       	pop	r29
    413e:	cf 91       	pop	r28
    4140:	1f 91       	pop	r17
    4142:	0f 91       	pop	r16
    4144:	ff 90       	pop	r15
    4146:	ef 90       	pop	r14
    4148:	df 90       	pop	r13
    414a:	cf 90       	pop	r12
    414c:	bf 90       	pop	r11
    414e:	af 90       	pop	r10
    4150:	08 95       	ret

00004152 <prvAddNewTaskToReadyList>:
    4152:	cf 93       	push	r28
    4154:	df 93       	push	r29
    4156:	1f 92       	push	r1
    4158:	1f 92       	push	r1
    415a:	cd b7       	in	r28, 0x3d	; 61
    415c:	de b7       	in	r29, 0x3e	; 62
    415e:	9a 83       	std	Y+2, r25	; 0x02
    4160:	89 83       	std	Y+1, r24	; 0x01
    4162:	0f b6       	in	r0, 0x3f	; 63
    4164:	f8 94       	cli
    4166:	0f 92       	push	r0
    4168:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <uxCurrentNumberOfTasks>
    416c:	8f 5f       	subi	r24, 0xFF	; 255
    416e:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <uxCurrentNumberOfTasks>
    4172:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4176:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    417a:	89 2b       	or	r24, r25
    417c:	61 f4       	brne	.+24     	; 0x4196 <prvAddNewTaskToReadyList+0x44>
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	9a 81       	ldd	r25, Y+2	; 0x02
    4182:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <pxCurrentTCB+0x1>
    4186:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <pxCurrentTCB>
    418a:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <uxCurrentNumberOfTasks>
    418e:	81 30       	cpi	r24, 0x01	; 1
    4190:	c1 f4       	brne	.+48     	; 0x41c2 <prvAddNewTaskToReadyList+0x70>
    4192:	cb d5       	rcall	.+2966   	; 0x4d2a <prvInitialiseTaskLists>
    4194:	16 c0       	rjmp	.+44     	; 0x41c2 <prvAddNewTaskToReadyList+0x70>
    4196:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <xSchedulerRunning>
    419a:	88 23       	and	r24, r24
    419c:	91 f4       	brne	.+36     	; 0x41c2 <prvAddNewTaskToReadyList+0x70>
    419e:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    41a2:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    41a6:	fc 01       	movw	r30, r24
    41a8:	22 8d       	ldd	r18, Z+26	; 0x1a
    41aa:	89 81       	ldd	r24, Y+1	; 0x01
    41ac:	9a 81       	ldd	r25, Y+2	; 0x02
    41ae:	fc 01       	movw	r30, r24
    41b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    41b2:	82 17       	cp	r24, r18
    41b4:	30 f0       	brcs	.+12     	; 0x41c2 <prvAddNewTaskToReadyList+0x70>
    41b6:	89 81       	ldd	r24, Y+1	; 0x01
    41b8:	9a 81       	ldd	r25, Y+2	; 0x02
    41ba:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <pxCurrentTCB+0x1>
    41be:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <pxCurrentTCB>
    41c2:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <uxTaskNumber>
    41c6:	8f 5f       	subi	r24, 0xFF	; 255
    41c8:	80 93 e4 17 	sts	0x17E4, r24	; 0x8017e4 <uxTaskNumber>
    41cc:	20 91 e4 17 	lds	r18, 0x17E4	; 0x8017e4 <uxTaskNumber>
    41d0:	89 81       	ldd	r24, Y+1	; 0x01
    41d2:	9a 81       	ldd	r25, Y+2	; 0x02
    41d4:	fc 01       	movw	r30, r24
    41d6:	25 a3       	std	Z+37, r18	; 0x25
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	9a 81       	ldd	r25, Y+2	; 0x02
    41dc:	fc 01       	movw	r30, r24
    41de:	92 8d       	ldd	r25, Z+26	; 0x1a
    41e0:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    41e4:	89 17       	cp	r24, r25
    41e6:	30 f4       	brcc	.+12     	; 0x41f4 <prvAddNewTaskToReadyList+0xa2>
    41e8:	89 81       	ldd	r24, Y+1	; 0x01
    41ea:	9a 81       	ldd	r25, Y+2	; 0x02
    41ec:	fc 01       	movw	r30, r24
    41ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    41f0:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    41f4:	89 81       	ldd	r24, Y+1	; 0x01
    41f6:	9a 81       	ldd	r25, Y+2	; 0x02
    41f8:	ac 01       	movw	r20, r24
    41fa:	4e 5f       	subi	r20, 0xFE	; 254
    41fc:	5f 4f       	sbci	r21, 0xFF	; 255
    41fe:	89 81       	ldd	r24, Y+1	; 0x01
    4200:	9a 81       	ldd	r25, Y+2	; 0x02
    4202:	fc 01       	movw	r30, r24
    4204:	82 8d       	ldd	r24, Z+26	; 0x1a
    4206:	28 2f       	mov	r18, r24
    4208:	30 e0       	ldi	r19, 0x00	; 0
    420a:	6b e0       	ldi	r22, 0x0B	; 11
    420c:	62 9f       	mul	r22, r18
    420e:	c0 01       	movw	r24, r0
    4210:	63 9f       	mul	r22, r19
    4212:	90 0d       	add	r25, r0
    4214:	11 24       	eor	r1, r1
    4216:	8e 58       	subi	r24, 0x8E	; 142
    4218:	98 4e       	sbci	r25, 0xE8	; 232
    421a:	ba 01       	movw	r22, r20
    421c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4220:	0f 90       	pop	r0
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <xSchedulerRunning>
    4228:	88 23       	and	r24, r24
    422a:	71 f0       	breq	.+28     	; 0x4248 <prvAddNewTaskToReadyList+0xf6>
    422c:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4230:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4234:	fc 01       	movw	r30, r24
    4236:	22 8d       	ldd	r18, Z+26	; 0x1a
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	fc 01       	movw	r30, r24
    423e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4240:	28 17       	cp	r18, r24
    4242:	10 f4       	brcc	.+4      	; 0x4248 <prvAddNewTaskToReadyList+0xf6>
    4244:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    4248:	00 00       	nop
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	08 95       	ret

00004254 <vTaskDelay>:
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	00 d0       	rcall	.+0      	; 0x425a <vTaskDelay+0x6>
    425a:	1f 92       	push	r1
    425c:	1f 92       	push	r1
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	6a 83       	std	Y+2, r22	; 0x02
    4264:	7b 83       	std	Y+3, r23	; 0x03
    4266:	8c 83       	std	Y+4, r24	; 0x04
    4268:	9d 83       	std	Y+5, r25	; 0x05
    426a:	19 82       	std	Y+1, r1	; 0x01
    426c:	8a 81       	ldd	r24, Y+2	; 0x02
    426e:	9b 81       	ldd	r25, Y+3	; 0x03
    4270:	ac 81       	ldd	r26, Y+4	; 0x04
    4272:	bd 81       	ldd	r27, Y+5	; 0x05
    4274:	89 2b       	or	r24, r25
    4276:	8a 2b       	or	r24, r26
    4278:	8b 2b       	or	r24, r27
    427a:	61 f0       	breq	.+24     	; 0x4294 <vTaskDelay+0x40>
    427c:	65 d0       	rcall	.+202    	; 0x4348 <vTaskSuspendAll>
    427e:	8a 81       	ldd	r24, Y+2	; 0x02
    4280:	9b 81       	ldd	r25, Y+3	; 0x03
    4282:	ac 81       	ldd	r26, Y+4	; 0x04
    4284:	bd 81       	ldd	r27, Y+5	; 0x05
    4286:	40 e0       	ldi	r20, 0x00	; 0
    4288:	bc 01       	movw	r22, r24
    428a:	cd 01       	movw	r24, r26
    428c:	0e 94 9b 2c 	call	0x5936	; 0x5936 <prvAddCurrentTaskToDelayedList>
    4290:	68 d0       	rcall	.+208    	; 0x4362 <xTaskResumeAll>
    4292:	89 83       	std	Y+1, r24	; 0x01
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	88 23       	and	r24, r24
    4298:	11 f4       	brne	.+4      	; 0x429e <vTaskDelay+0x4a>
    429a:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    429e:	00 00       	nop
    42a0:	0f 90       	pop	r0
    42a2:	0f 90       	pop	r0
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	0f 90       	pop	r0
    42aa:	df 91       	pop	r29
    42ac:	cf 91       	pop	r28
    42ae:	08 95       	ret

000042b0 <vTaskStartScheduler>:
    42b0:	ef 92       	push	r14
    42b2:	ff 92       	push	r15
    42b4:	0f 93       	push	r16
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	1f 92       	push	r1
    42bc:	cd b7       	in	r28, 0x3d	; 61
    42be:	de b7       	in	r29, 0x3e	; 62
    42c0:	0f 2e       	mov	r0, r31
    42c2:	f9 ee       	ldi	r31, 0xE9	; 233
    42c4:	ef 2e       	mov	r14, r31
    42c6:	f7 e1       	ldi	r31, 0x17	; 23
    42c8:	ff 2e       	mov	r15, r31
    42ca:	f0 2d       	mov	r31, r0
    42cc:	00 e0       	ldi	r16, 0x00	; 0
    42ce:	20 e0       	ldi	r18, 0x00	; 0
    42d0:	30 e0       	ldi	r19, 0x00	; 0
    42d2:	40 ec       	ldi	r20, 0xC0	; 192
    42d4:	50 e0       	ldi	r21, 0x00	; 0
    42d6:	65 ed       	ldi	r22, 0xD5	; 213
    42d8:	73 e0       	ldi	r23, 0x03	; 3
    42da:	8e e4       	ldi	r24, 0x4E	; 78
    42dc:	91 e0       	ldi	r25, 0x01	; 1
    42de:	de dd       	rcall	.-1092   	; 0x3e9c <xTaskCreate>
    42e0:	89 83       	std	Y+1, r24	; 0x01
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	81 30       	cpi	r24, 0x01	; 1
    42e6:	19 f4       	brne	.+6      	; 0x42ee <vTaskStartScheduler+0x3e>
    42e8:	0e 94 42 2d 	call	0x5a84	; 0x5a84 <xTimerCreateTimerTask>
    42ec:	89 83       	std	Y+1, r24	; 0x01
    42ee:	89 81       	ldd	r24, Y+1	; 0x01
    42f0:	81 30       	cpi	r24, 0x01	; 1
    42f2:	11 f5       	brne	.+68     	; 0x4338 <vTaskStartScheduler+0x88>
    42f4:	f8 94       	cli
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	9f ef       	ldi	r25, 0xFF	; 255
    42fa:	dc 01       	movw	r26, r24
    42fc:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    4300:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    4304:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    4308:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	80 93 e0 17 	sts	0x17E0, r24	; 0x8017e0 <xSchedulerRunning>
    4312:	10 92 db 17 	sts	0x17DB, r1	; 0x8017db <xTickCount>
    4316:	10 92 dc 17 	sts	0x17DC, r1	; 0x8017dc <xTickCount+0x1>
    431a:	10 92 dd 17 	sts	0x17DD, r1	; 0x8017dd <xTickCount+0x2>
    431e:	10 92 de 17 	sts	0x17DE, r1	; 0x8017de <xTickCount+0x3>
    4322:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4326:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    432a:	fc 01       	movw	r30, r24
    432c:	81 a5       	ldd	r24, Z+41	; 0x29
    432e:	92 a5       	ldd	r25, Z+42	; 0x2a
    4330:	0e 94 95 09 	call	0x132a	; 0x132a <task_switch_in>
    4334:	0e 94 52 12 	call	0x24a4	; 0x24a4 <xPortStartScheduler>
    4338:	00 00       	nop
    433a:	0f 90       	pop	r0
    433c:	df 91       	pop	r29
    433e:	cf 91       	pop	r28
    4340:	0f 91       	pop	r16
    4342:	ff 90       	pop	r15
    4344:	ef 90       	pop	r14
    4346:	08 95       	ret

00004348 <vTaskSuspendAll>:
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    4354:	8f 5f       	subi	r24, 0xFF	; 255
    4356:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <uxSchedulerSuspended>
    435a:	00 00       	nop
    435c:	df 91       	pop	r29
    435e:	cf 91       	pop	r28
    4360:	08 95       	ret

00004362 <xTaskResumeAll>:
    4362:	cf 93       	push	r28
    4364:	df 93       	push	r29
    4366:	00 d0       	rcall	.+0      	; 0x4368 <xTaskResumeAll+0x6>
    4368:	1f 92       	push	r1
    436a:	cd b7       	in	r28, 0x3d	; 61
    436c:	de b7       	in	r29, 0x3e	; 62
    436e:	1a 82       	std	Y+2, r1	; 0x02
    4370:	19 82       	std	Y+1, r1	; 0x01
    4372:	1b 82       	std	Y+3, r1	; 0x03
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	f8 94       	cli
    4378:	0f 92       	push	r0
    437a:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    437e:	81 50       	subi	r24, 0x01	; 1
    4380:	80 93 eb 17 	sts	0x17EB, r24	; 0x8017eb <uxSchedulerSuspended>
    4384:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    4388:	88 23       	and	r24, r24
    438a:	09 f0       	breq	.+2      	; 0x438e <xTaskResumeAll+0x2c>
    438c:	72 c0       	rjmp	.+228    	; 0x4472 <xTaskResumeAll+0x110>
    438e:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <uxCurrentNumberOfTasks>
    4392:	88 23       	and	r24, r24
    4394:	09 f4       	brne	.+2      	; 0x4398 <xTaskResumeAll+0x36>
    4396:	6d c0       	rjmp	.+218    	; 0x4472 <xTaskResumeAll+0x110>
    4398:	46 c0       	rjmp	.+140    	; 0x4426 <xTaskResumeAll+0xc4>
    439a:	80 91 bf 17 	lds	r24, 0x17BF	; 0x8017bf <xPendingReadyList+0x7>
    439e:	90 91 c0 17 	lds	r25, 0x17C0	; 0x8017c0 <xPendingReadyList+0x8>
    43a2:	fc 01       	movw	r30, r24
    43a4:	80 85       	ldd	r24, Z+8	; 0x08
    43a6:	91 85       	ldd	r25, Z+9	; 0x09
    43a8:	9a 83       	std	Y+2, r25	; 0x02
    43aa:	89 83       	std	Y+1, r24	; 0x01
    43ac:	89 81       	ldd	r24, Y+1	; 0x01
    43ae:	9a 81       	ldd	r25, Y+2	; 0x02
    43b0:	0e 96       	adiw	r24, 0x0e	; 14
    43b2:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    43b6:	89 81       	ldd	r24, Y+1	; 0x01
    43b8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ba:	02 96       	adiw	r24, 0x02	; 2
    43bc:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	9a 81       	ldd	r25, Y+2	; 0x02
    43c4:	fc 01       	movw	r30, r24
    43c6:	92 8d       	ldd	r25, Z+26	; 0x1a
    43c8:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    43cc:	89 17       	cp	r24, r25
    43ce:	30 f4       	brcc	.+12     	; 0x43dc <xTaskResumeAll+0x7a>
    43d0:	89 81       	ldd	r24, Y+1	; 0x01
    43d2:	9a 81       	ldd	r25, Y+2	; 0x02
    43d4:	fc 01       	movw	r30, r24
    43d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    43d8:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    43dc:	89 81       	ldd	r24, Y+1	; 0x01
    43de:	9a 81       	ldd	r25, Y+2	; 0x02
    43e0:	ac 01       	movw	r20, r24
    43e2:	4e 5f       	subi	r20, 0xFE	; 254
    43e4:	5f 4f       	sbci	r21, 0xFF	; 255
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ea:	fc 01       	movw	r30, r24
    43ec:	82 8d       	ldd	r24, Z+26	; 0x1a
    43ee:	28 2f       	mov	r18, r24
    43f0:	30 e0       	ldi	r19, 0x00	; 0
    43f2:	6b e0       	ldi	r22, 0x0B	; 11
    43f4:	62 9f       	mul	r22, r18
    43f6:	c0 01       	movw	r24, r0
    43f8:	63 9f       	mul	r22, r19
    43fa:	90 0d       	add	r25, r0
    43fc:	11 24       	eor	r1, r1
    43fe:	8e 58       	subi	r24, 0x8E	; 142
    4400:	98 4e       	sbci	r25, 0xE8	; 232
    4402:	ba 01       	movw	r22, r20
    4404:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	fc 01       	movw	r30, r24
    440e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4410:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4414:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4418:	fc 01       	movw	r30, r24
    441a:	82 8d       	ldd	r24, Z+26	; 0x1a
    441c:	28 17       	cp	r18, r24
    441e:	18 f0       	brcs	.+6      	; 0x4426 <xTaskResumeAll+0xc4>
    4420:	81 e0       	ldi	r24, 0x01	; 1
    4422:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4426:	80 91 b8 17 	lds	r24, 0x17B8	; 0x8017b8 <xPendingReadyList>
    442a:	88 23       	and	r24, r24
    442c:	09 f0       	breq	.+2      	; 0x4430 <xTaskResumeAll+0xce>
    442e:	b5 cf       	rjmp	.-150    	; 0x439a <xTaskResumeAll+0x38>
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	89 2b       	or	r24, r25
    4436:	09 f0       	breq	.+2      	; 0x443a <xTaskResumeAll+0xd8>
    4438:	01 d5       	rcall	.+2562   	; 0x4e3c <prvResetNextTaskUnblockTime>
    443a:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <uxPendedTicks>
    443e:	8c 83       	std	Y+4, r24	; 0x04
    4440:	8c 81       	ldd	r24, Y+4	; 0x04
    4442:	88 23       	and	r24, r24
    4444:	71 f0       	breq	.+28     	; 0x4462 <xTaskResumeAll+0x100>
    4446:	43 d0       	rcall	.+134    	; 0x44ce <xTaskIncrementTick>
    4448:	88 23       	and	r24, r24
    444a:	19 f0       	breq	.+6      	; 0x4452 <xTaskResumeAll+0xf0>
    444c:	81 e0       	ldi	r24, 0x01	; 1
    444e:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4452:	8c 81       	ldd	r24, Y+4	; 0x04
    4454:	81 50       	subi	r24, 0x01	; 1
    4456:	8c 83       	std	Y+4, r24	; 0x04
    4458:	8c 81       	ldd	r24, Y+4	; 0x04
    445a:	88 23       	and	r24, r24
    445c:	a1 f7       	brne	.-24     	; 0x4446 <xTaskResumeAll+0xe4>
    445e:	10 92 e1 17 	sts	0x17E1, r1	; 0x8017e1 <uxPendedTicks>
    4462:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xYieldPending>
    4466:	88 23       	and	r24, r24
    4468:	21 f0       	breq	.+8      	; 0x4472 <xTaskResumeAll+0x110>
    446a:	81 e0       	ldi	r24, 0x01	; 1
    446c:	8b 83       	std	Y+3, r24	; 0x03
    446e:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    4472:	0f 90       	pop	r0
    4474:	0f be       	out	0x3f, r0	; 63
    4476:	8b 81       	ldd	r24, Y+3	; 0x03
    4478:	0f 90       	pop	r0
    447a:	0f 90       	pop	r0
    447c:	0f 90       	pop	r0
    447e:	0f 90       	pop	r0
    4480:	df 91       	pop	r29
    4482:	cf 91       	pop	r28
    4484:	08 95       	ret

00004486 <xTaskGetTickCount>:
    4486:	cf 93       	push	r28
    4488:	df 93       	push	r29
    448a:	00 d0       	rcall	.+0      	; 0x448c <xTaskGetTickCount+0x6>
    448c:	1f 92       	push	r1
    448e:	cd b7       	in	r28, 0x3d	; 61
    4490:	de b7       	in	r29, 0x3e	; 62
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	0f 92       	push	r0
    4498:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    449c:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    44a0:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    44a4:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    44a8:	89 83       	std	Y+1, r24	; 0x01
    44aa:	9a 83       	std	Y+2, r25	; 0x02
    44ac:	ab 83       	std	Y+3, r26	; 0x03
    44ae:	bc 83       	std	Y+4, r27	; 0x04
    44b0:	0f 90       	pop	r0
    44b2:	0f be       	out	0x3f, r0	; 63
    44b4:	89 81       	ldd	r24, Y+1	; 0x01
    44b6:	9a 81       	ldd	r25, Y+2	; 0x02
    44b8:	ab 81       	ldd	r26, Y+3	; 0x03
    44ba:	bc 81       	ldd	r27, Y+4	; 0x04
    44bc:	bc 01       	movw	r22, r24
    44be:	cd 01       	movw	r24, r26
    44c0:	0f 90       	pop	r0
    44c2:	0f 90       	pop	r0
    44c4:	0f 90       	pop	r0
    44c6:	0f 90       	pop	r0
    44c8:	df 91       	pop	r29
    44ca:	cf 91       	pop	r28
    44cc:	08 95       	ret

000044ce <xTaskIncrementTick>:
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	cd b7       	in	r28, 0x3d	; 61
    44d4:	de b7       	in	r29, 0x3e	; 62
    44d6:	2d 97       	sbiw	r28, 0x0d	; 13
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	19 82       	std	Y+1, r1	; 0x01
    44e4:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    44e8:	88 23       	and	r24, r24
    44ea:	09 f0       	breq	.+2      	; 0x44ee <xTaskIncrementTick+0x20>
    44ec:	f0 c0       	rjmp	.+480    	; 0x46ce <xTaskIncrementTick+0x200>
    44ee:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    44f2:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    44f6:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    44fa:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    44fe:	01 96       	adiw	r24, 0x01	; 1
    4500:	a1 1d       	adc	r26, r1
    4502:	b1 1d       	adc	r27, r1
    4504:	8a 83       	std	Y+2, r24	; 0x02
    4506:	9b 83       	std	Y+3, r25	; 0x03
    4508:	ac 83       	std	Y+4, r26	; 0x04
    450a:	bd 83       	std	Y+5, r27	; 0x05
    450c:	8a 81       	ldd	r24, Y+2	; 0x02
    450e:	9b 81       	ldd	r25, Y+3	; 0x03
    4510:	ac 81       	ldd	r26, Y+4	; 0x04
    4512:	bd 81       	ldd	r27, Y+5	; 0x05
    4514:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <xTickCount>
    4518:	90 93 dc 17 	sts	0x17DC, r25	; 0x8017dc <xTickCount+0x1>
    451c:	a0 93 dd 17 	sts	0x17DD, r26	; 0x8017dd <xTickCount+0x2>
    4520:	b0 93 de 17 	sts	0x17DE, r27	; 0x8017de <xTickCount+0x3>
    4524:	8a 81       	ldd	r24, Y+2	; 0x02
    4526:	9b 81       	ldd	r25, Y+3	; 0x03
    4528:	ac 81       	ldd	r26, Y+4	; 0x04
    452a:	bd 81       	ldd	r27, Y+5	; 0x05
    452c:	89 2b       	or	r24, r25
    452e:	8a 2b       	or	r24, r26
    4530:	8b 2b       	or	r24, r27
    4532:	d1 f4       	brne	.+52     	; 0x4568 <xTaskIncrementTick+0x9a>
    4534:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    4538:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    453c:	9f 83       	std	Y+7, r25	; 0x07
    453e:	8e 83       	std	Y+6, r24	; 0x06
    4540:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <pxOverflowDelayedTaskList>
    4544:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <pxOverflowDelayedTaskList+0x1>
    4548:	90 93 b5 17 	sts	0x17B5, r25	; 0x8017b5 <pxDelayedTaskList+0x1>
    454c:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <pxDelayedTaskList>
    4550:	8e 81       	ldd	r24, Y+6	; 0x06
    4552:	9f 81       	ldd	r25, Y+7	; 0x07
    4554:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <pxOverflowDelayedTaskList+0x1>
    4558:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <pxOverflowDelayedTaskList>
    455c:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xNumOfOverflows>
    4560:	8f 5f       	subi	r24, 0xFF	; 255
    4562:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <xNumOfOverflows>
    4566:	6a d4       	rcall	.+2260   	; 0x4e3c <prvResetNextTaskUnblockTime>
    4568:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <xNextTaskUnblockTime>
    456c:	90 91 e6 17 	lds	r25, 0x17E6	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    4570:	a0 91 e7 17 	lds	r26, 0x17E7	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    4574:	b0 91 e8 17 	lds	r27, 0x17E8	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    4578:	2a 81       	ldd	r18, Y+2	; 0x02
    457a:	3b 81       	ldd	r19, Y+3	; 0x03
    457c:	4c 81       	ldd	r20, Y+4	; 0x04
    457e:	5d 81       	ldd	r21, Y+5	; 0x05
    4580:	28 17       	cp	r18, r24
    4582:	39 07       	cpc	r19, r25
    4584:	4a 07       	cpc	r20, r26
    4586:	5b 07       	cpc	r21, r27
    4588:	08 f4       	brcc	.+2      	; 0x458c <xTaskIncrementTick+0xbe>
    458a:	8a c0       	rjmp	.+276    	; 0x46a0 <xTaskIncrementTick+0x1d2>
    458c:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    4590:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    4594:	fc 01       	movw	r30, r24
    4596:	80 81       	ld	r24, Z
    4598:	88 23       	and	r24, r24
    459a:	61 f4       	brne	.+24     	; 0x45b4 <xTaskIncrementTick+0xe6>
    459c:	8f ef       	ldi	r24, 0xFF	; 255
    459e:	9f ef       	ldi	r25, 0xFF	; 255
    45a0:	dc 01       	movw	r26, r24
    45a2:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    45a6:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    45aa:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    45ae:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    45b2:	76 c0       	rjmp	.+236    	; 0x46a0 <xTaskIncrementTick+0x1d2>
    45b4:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    45b8:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    45bc:	fc 01       	movw	r30, r24
    45be:	87 81       	ldd	r24, Z+7	; 0x07
    45c0:	90 85       	ldd	r25, Z+8	; 0x08
    45c2:	fc 01       	movw	r30, r24
    45c4:	80 85       	ldd	r24, Z+8	; 0x08
    45c6:	91 85       	ldd	r25, Z+9	; 0x09
    45c8:	99 87       	std	Y+9, r25	; 0x09
    45ca:	88 87       	std	Y+8, r24	; 0x08
    45cc:	88 85       	ldd	r24, Y+8	; 0x08
    45ce:	99 85       	ldd	r25, Y+9	; 0x09
    45d0:	fc 01       	movw	r30, r24
    45d2:	82 81       	ldd	r24, Z+2	; 0x02
    45d4:	93 81       	ldd	r25, Z+3	; 0x03
    45d6:	a4 81       	ldd	r26, Z+4	; 0x04
    45d8:	b5 81       	ldd	r27, Z+5	; 0x05
    45da:	8a 87       	std	Y+10, r24	; 0x0a
    45dc:	9b 87       	std	Y+11, r25	; 0x0b
    45de:	ac 87       	std	Y+12, r26	; 0x0c
    45e0:	bd 87       	std	Y+13, r27	; 0x0d
    45e2:	2a 81       	ldd	r18, Y+2	; 0x02
    45e4:	3b 81       	ldd	r19, Y+3	; 0x03
    45e6:	4c 81       	ldd	r20, Y+4	; 0x04
    45e8:	5d 81       	ldd	r21, Y+5	; 0x05
    45ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    45ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    45ee:	ac 85       	ldd	r26, Y+12	; 0x0c
    45f0:	bd 85       	ldd	r27, Y+13	; 0x0d
    45f2:	28 17       	cp	r18, r24
    45f4:	39 07       	cpc	r19, r25
    45f6:	4a 07       	cpc	r20, r26
    45f8:	5b 07       	cpc	r21, r27
    45fa:	68 f4       	brcc	.+26     	; 0x4616 <xTaskIncrementTick+0x148>
    45fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    45fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    4600:	ac 85       	ldd	r26, Y+12	; 0x0c
    4602:	bd 85       	ldd	r27, Y+13	; 0x0d
    4604:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    4608:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    460c:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    4610:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    4614:	45 c0       	rjmp	.+138    	; 0x46a0 <xTaskIncrementTick+0x1d2>
    4616:	88 85       	ldd	r24, Y+8	; 0x08
    4618:	99 85       	ldd	r25, Y+9	; 0x09
    461a:	02 96       	adiw	r24, 0x02	; 2
    461c:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4620:	88 85       	ldd	r24, Y+8	; 0x08
    4622:	99 85       	ldd	r25, Y+9	; 0x09
    4624:	fc 01       	movw	r30, r24
    4626:	80 8d       	ldd	r24, Z+24	; 0x18
    4628:	91 8d       	ldd	r25, Z+25	; 0x19
    462a:	89 2b       	or	r24, r25
    462c:	29 f0       	breq	.+10     	; 0x4638 <xTaskIncrementTick+0x16a>
    462e:	88 85       	ldd	r24, Y+8	; 0x08
    4630:	99 85       	ldd	r25, Y+9	; 0x09
    4632:	0e 96       	adiw	r24, 0x0e	; 14
    4634:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4638:	88 85       	ldd	r24, Y+8	; 0x08
    463a:	99 85       	ldd	r25, Y+9	; 0x09
    463c:	fc 01       	movw	r30, r24
    463e:	92 8d       	ldd	r25, Z+26	; 0x1a
    4640:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    4644:	89 17       	cp	r24, r25
    4646:	30 f4       	brcc	.+12     	; 0x4654 <xTaskIncrementTick+0x186>
    4648:	88 85       	ldd	r24, Y+8	; 0x08
    464a:	99 85       	ldd	r25, Y+9	; 0x09
    464c:	fc 01       	movw	r30, r24
    464e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4650:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    4654:	88 85       	ldd	r24, Y+8	; 0x08
    4656:	99 85       	ldd	r25, Y+9	; 0x09
    4658:	ac 01       	movw	r20, r24
    465a:	4e 5f       	subi	r20, 0xFE	; 254
    465c:	5f 4f       	sbci	r21, 0xFF	; 255
    465e:	88 85       	ldd	r24, Y+8	; 0x08
    4660:	99 85       	ldd	r25, Y+9	; 0x09
    4662:	fc 01       	movw	r30, r24
    4664:	82 8d       	ldd	r24, Z+26	; 0x1a
    4666:	28 2f       	mov	r18, r24
    4668:	30 e0       	ldi	r19, 0x00	; 0
    466a:	6b e0       	ldi	r22, 0x0B	; 11
    466c:	62 9f       	mul	r22, r18
    466e:	c0 01       	movw	r24, r0
    4670:	63 9f       	mul	r22, r19
    4672:	90 0d       	add	r25, r0
    4674:	11 24       	eor	r1, r1
    4676:	8e 58       	subi	r24, 0x8E	; 142
    4678:	98 4e       	sbci	r25, 0xE8	; 232
    467a:	ba 01       	movw	r22, r20
    467c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4680:	88 85       	ldd	r24, Y+8	; 0x08
    4682:	99 85       	ldd	r25, Y+9	; 0x09
    4684:	fc 01       	movw	r30, r24
    4686:	22 8d       	ldd	r18, Z+26	; 0x1a
    4688:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    468c:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4690:	fc 01       	movw	r30, r24
    4692:	82 8d       	ldd	r24, Z+26	; 0x1a
    4694:	28 17       	cp	r18, r24
    4696:	08 f4       	brcc	.+2      	; 0x469a <xTaskIncrementTick+0x1cc>
    4698:	79 cf       	rjmp	.-270    	; 0x458c <xTaskIncrementTick+0xbe>
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	89 83       	std	Y+1, r24	; 0x01
    469e:	76 cf       	rjmp	.-276    	; 0x458c <xTaskIncrementTick+0xbe>
    46a0:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    46a4:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    46a8:	fc 01       	movw	r30, r24
    46aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    46ac:	28 2f       	mov	r18, r24
    46ae:	30 e0       	ldi	r19, 0x00	; 0
    46b0:	4b e0       	ldi	r20, 0x0B	; 11
    46b2:	42 9f       	mul	r20, r18
    46b4:	c0 01       	movw	r24, r0
    46b6:	43 9f       	mul	r20, r19
    46b8:	90 0d       	add	r25, r0
    46ba:	11 24       	eor	r1, r1
    46bc:	8e 58       	subi	r24, 0x8E	; 142
    46be:	98 4e       	sbci	r25, 0xE8	; 232
    46c0:	fc 01       	movw	r30, r24
    46c2:	80 81       	ld	r24, Z
    46c4:	82 30       	cpi	r24, 0x02	; 2
    46c6:	40 f0       	brcs	.+16     	; 0x46d8 <xTaskIncrementTick+0x20a>
    46c8:	81 e0       	ldi	r24, 0x01	; 1
    46ca:	89 83       	std	Y+1, r24	; 0x01
    46cc:	05 c0       	rjmp	.+10     	; 0x46d8 <xTaskIncrementTick+0x20a>
    46ce:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <uxPendedTicks>
    46d2:	8f 5f       	subi	r24, 0xFF	; 255
    46d4:	80 93 e1 17 	sts	0x17E1, r24	; 0x8017e1 <uxPendedTicks>
    46d8:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <xYieldPending>
    46dc:	88 23       	and	r24, r24
    46de:	11 f0       	breq	.+4      	; 0x46e4 <xTaskIncrementTick+0x216>
    46e0:	81 e0       	ldi	r24, 0x01	; 1
    46e2:	89 83       	std	Y+1, r24	; 0x01
    46e4:	89 81       	ldd	r24, Y+1	; 0x01
    46e6:	2d 96       	adiw	r28, 0x0d	; 13
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	f8 94       	cli
    46ec:	de bf       	out	0x3e, r29	; 62
    46ee:	0f be       	out	0x3f, r0	; 63
    46f0:	cd bf       	out	0x3d, r28	; 61
    46f2:	df 91       	pop	r29
    46f4:	cf 91       	pop	r28
    46f6:	08 95       	ret

000046f8 <vTaskSwitchContext>:
    46f8:	cf 93       	push	r28
    46fa:	df 93       	push	r29
    46fc:	00 d0       	rcall	.+0      	; 0x46fe <vTaskSwitchContext+0x6>
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    4706:	88 23       	and	r24, r24
    4708:	21 f0       	breq	.+8      	; 0x4712 <vTaskSwitchContext+0x1a>
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4710:	8a c0       	rjmp	.+276    	; 0x4826 <vTaskSwitchContext+0x12e>
    4712:	10 92 e2 17 	sts	0x17E2, r1	; 0x8017e2 <xYieldPending>
    4716:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    471a:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    471e:	fc 01       	movw	r30, r24
    4720:	81 a5       	ldd	r24, Z+41	; 0x29
    4722:	92 a5       	ldd	r25, Z+42	; 0x2a
    4724:	0e 94 b5 09 	call	0x136a	; 0x136a <task_switch_out>
    4728:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    472c:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4730:	fc 01       	movw	r30, r24
    4732:	20 81       	ld	r18, Z
    4734:	31 81       	ldd	r19, Z+1	; 0x01
    4736:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    473a:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    473e:	fc 01       	movw	r30, r24
    4740:	83 8d       	ldd	r24, Z+27	; 0x1b
    4742:	94 8d       	ldd	r25, Z+28	; 0x1c
    4744:	82 17       	cp	r24, r18
    4746:	93 07       	cpc	r25, r19
    4748:	70 f0       	brcs	.+28     	; 0x4766 <vTaskSwitchContext+0x6e>
    474a:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    474e:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4752:	9c 01       	movw	r18, r24
    4754:	23 5e       	subi	r18, 0xE3	; 227
    4756:	3f 4f       	sbci	r19, 0xFF	; 255
    4758:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    475c:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4760:	b9 01       	movw	r22, r18
    4762:	0e 94 c4 32 	call	0x6588	; 0x6588 <vApplicationStackOverflowHook>
    4766:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    476a:	89 83       	std	Y+1, r24	; 0x01
    476c:	03 c0       	rjmp	.+6      	; 0x4774 <vTaskSwitchContext+0x7c>
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	81 50       	subi	r24, 0x01	; 1
    4772:	89 83       	std	Y+1, r24	; 0x01
    4774:	89 81       	ldd	r24, Y+1	; 0x01
    4776:	28 2f       	mov	r18, r24
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	4b e0       	ldi	r20, 0x0B	; 11
    477c:	42 9f       	mul	r20, r18
    477e:	c0 01       	movw	r24, r0
    4780:	43 9f       	mul	r20, r19
    4782:	90 0d       	add	r25, r0
    4784:	11 24       	eor	r1, r1
    4786:	8e 58       	subi	r24, 0x8E	; 142
    4788:	98 4e       	sbci	r25, 0xE8	; 232
    478a:	fc 01       	movw	r30, r24
    478c:	80 81       	ld	r24, Z
    478e:	88 23       	and	r24, r24
    4790:	71 f3       	breq	.-36     	; 0x476e <vTaskSwitchContext+0x76>
    4792:	89 81       	ldd	r24, Y+1	; 0x01
    4794:	28 2f       	mov	r18, r24
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	4b e0       	ldi	r20, 0x0B	; 11
    479a:	42 9f       	mul	r20, r18
    479c:	c0 01       	movw	r24, r0
    479e:	43 9f       	mul	r20, r19
    47a0:	90 0d       	add	r25, r0
    47a2:	11 24       	eor	r1, r1
    47a4:	8e 58       	subi	r24, 0x8E	; 142
    47a6:	98 4e       	sbci	r25, 0xE8	; 232
    47a8:	9b 83       	std	Y+3, r25	; 0x03
    47aa:	8a 83       	std	Y+2, r24	; 0x02
    47ac:	8a 81       	ldd	r24, Y+2	; 0x02
    47ae:	9b 81       	ldd	r25, Y+3	; 0x03
    47b0:	fc 01       	movw	r30, r24
    47b2:	81 81       	ldd	r24, Z+1	; 0x01
    47b4:	92 81       	ldd	r25, Z+2	; 0x02
    47b6:	fc 01       	movw	r30, r24
    47b8:	24 81       	ldd	r18, Z+4	; 0x04
    47ba:	35 81       	ldd	r19, Z+5	; 0x05
    47bc:	8a 81       	ldd	r24, Y+2	; 0x02
    47be:	9b 81       	ldd	r25, Y+3	; 0x03
    47c0:	fc 01       	movw	r30, r24
    47c2:	32 83       	std	Z+2, r19	; 0x02
    47c4:	21 83       	std	Z+1, r18	; 0x01
    47c6:	8a 81       	ldd	r24, Y+2	; 0x02
    47c8:	9b 81       	ldd	r25, Y+3	; 0x03
    47ca:	fc 01       	movw	r30, r24
    47cc:	21 81       	ldd	r18, Z+1	; 0x01
    47ce:	32 81       	ldd	r19, Z+2	; 0x02
    47d0:	8a 81       	ldd	r24, Y+2	; 0x02
    47d2:	9b 81       	ldd	r25, Y+3	; 0x03
    47d4:	03 96       	adiw	r24, 0x03	; 3
    47d6:	28 17       	cp	r18, r24
    47d8:	39 07       	cpc	r19, r25
    47da:	69 f4       	brne	.+26     	; 0x47f6 <vTaskSwitchContext+0xfe>
    47dc:	8a 81       	ldd	r24, Y+2	; 0x02
    47de:	9b 81       	ldd	r25, Y+3	; 0x03
    47e0:	fc 01       	movw	r30, r24
    47e2:	81 81       	ldd	r24, Z+1	; 0x01
    47e4:	92 81       	ldd	r25, Z+2	; 0x02
    47e6:	fc 01       	movw	r30, r24
    47e8:	24 81       	ldd	r18, Z+4	; 0x04
    47ea:	35 81       	ldd	r19, Z+5	; 0x05
    47ec:	8a 81       	ldd	r24, Y+2	; 0x02
    47ee:	9b 81       	ldd	r25, Y+3	; 0x03
    47f0:	fc 01       	movw	r30, r24
    47f2:	32 83       	std	Z+2, r19	; 0x02
    47f4:	21 83       	std	Z+1, r18	; 0x01
    47f6:	8a 81       	ldd	r24, Y+2	; 0x02
    47f8:	9b 81       	ldd	r25, Y+3	; 0x03
    47fa:	fc 01       	movw	r30, r24
    47fc:	81 81       	ldd	r24, Z+1	; 0x01
    47fe:	92 81       	ldd	r25, Z+2	; 0x02
    4800:	fc 01       	movw	r30, r24
    4802:	80 85       	ldd	r24, Z+8	; 0x08
    4804:	91 85       	ldd	r25, Z+9	; 0x09
    4806:	90 93 71 17 	sts	0x1771, r25	; 0x801771 <pxCurrentTCB+0x1>
    480a:	80 93 70 17 	sts	0x1770, r24	; 0x801770 <pxCurrentTCB>
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    4814:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4818:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    481c:	fc 01       	movw	r30, r24
    481e:	81 a5       	ldd	r24, Z+41	; 0x29
    4820:	92 a5       	ldd	r25, Z+42	; 0x2a
    4822:	0e 94 95 09 	call	0x132a	; 0x132a <task_switch_in>
    4826:	00 00       	nop
    4828:	0f 90       	pop	r0
    482a:	0f 90       	pop	r0
    482c:	0f 90       	pop	r0
    482e:	df 91       	pop	r29
    4830:	cf 91       	pop	r28
    4832:	08 95       	ret

00004834 <vTaskPlaceOnEventList>:
    4834:	cf 93       	push	r28
    4836:	df 93       	push	r29
    4838:	00 d0       	rcall	.+0      	; 0x483a <vTaskPlaceOnEventList+0x6>
    483a:	00 d0       	rcall	.+0      	; 0x483c <vTaskPlaceOnEventList+0x8>
    483c:	cd b7       	in	r28, 0x3d	; 61
    483e:	de b7       	in	r29, 0x3e	; 62
    4840:	9a 83       	std	Y+2, r25	; 0x02
    4842:	89 83       	std	Y+1, r24	; 0x01
    4844:	4b 83       	std	Y+3, r20	; 0x03
    4846:	5c 83       	std	Y+4, r21	; 0x04
    4848:	6d 83       	std	Y+5, r22	; 0x05
    484a:	7e 83       	std	Y+6, r23	; 0x06
    484c:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4850:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4854:	9c 01       	movw	r18, r24
    4856:	22 5f       	subi	r18, 0xF2	; 242
    4858:	3f 4f       	sbci	r19, 0xFF	; 255
    485a:	89 81       	ldd	r24, Y+1	; 0x01
    485c:	9a 81       	ldd	r25, Y+2	; 0x02
    485e:	b9 01       	movw	r22, r18
    4860:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>
    4864:	8b 81       	ldd	r24, Y+3	; 0x03
    4866:	9c 81       	ldd	r25, Y+4	; 0x04
    4868:	ad 81       	ldd	r26, Y+5	; 0x05
    486a:	be 81       	ldd	r27, Y+6	; 0x06
    486c:	41 e0       	ldi	r20, 0x01	; 1
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	0e 94 9b 2c 	call	0x5936	; 0x5936 <prvAddCurrentTaskToDelayedList>
    4876:	00 00       	nop
    4878:	26 96       	adiw	r28, 0x06	; 6
    487a:	0f b6       	in	r0, 0x3f	; 63
    487c:	f8 94       	cli
    487e:	de bf       	out	0x3e, r29	; 62
    4880:	0f be       	out	0x3f, r0	; 63
    4882:	cd bf       	out	0x3d, r28	; 61
    4884:	df 91       	pop	r29
    4886:	cf 91       	pop	r28
    4888:	08 95       	ret

0000488a <vTaskPlaceOnUnorderedEventList>:
    488a:	0f 93       	push	r16
    488c:	1f 93       	push	r17
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	2a 97       	sbiw	r28, 0x0a	; 10
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	9a 83       	std	Y+2, r25	; 0x02
    48a4:	89 83       	std	Y+1, r24	; 0x01
    48a6:	4b 83       	std	Y+3, r20	; 0x03
    48a8:	5c 83       	std	Y+4, r21	; 0x04
    48aa:	6d 83       	std	Y+5, r22	; 0x05
    48ac:	7e 83       	std	Y+6, r23	; 0x06
    48ae:	0f 83       	std	Y+7, r16	; 0x07
    48b0:	18 87       	std	Y+8, r17	; 0x08
    48b2:	29 87       	std	Y+9, r18	; 0x09
    48b4:	3a 87       	std	Y+10, r19	; 0x0a
    48b6:	20 91 70 17 	lds	r18, 0x1770	; 0x801770 <pxCurrentTCB>
    48ba:	30 91 71 17 	lds	r19, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    48be:	8b 81       	ldd	r24, Y+3	; 0x03
    48c0:	9c 81       	ldd	r25, Y+4	; 0x04
    48c2:	ad 81       	ldd	r26, Y+5	; 0x05
    48c4:	be 81       	ldd	r27, Y+6	; 0x06
    48c6:	b0 68       	ori	r27, 0x80	; 128
    48c8:	f9 01       	movw	r30, r18
    48ca:	86 87       	std	Z+14, r24	; 0x0e
    48cc:	97 87       	std	Z+15, r25	; 0x0f
    48ce:	a0 8b       	std	Z+16, r26	; 0x10
    48d0:	b1 8b       	std	Z+17, r27	; 0x11
    48d2:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    48d6:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    48da:	9c 01       	movw	r18, r24
    48dc:	22 5f       	subi	r18, 0xF2	; 242
    48de:	3f 4f       	sbci	r19, 0xFF	; 255
    48e0:	89 81       	ldd	r24, Y+1	; 0x01
    48e2:	9a 81       	ldd	r25, Y+2	; 0x02
    48e4:	b9 01       	movw	r22, r18
    48e6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    48ea:	8f 81       	ldd	r24, Y+7	; 0x07
    48ec:	98 85       	ldd	r25, Y+8	; 0x08
    48ee:	a9 85       	ldd	r26, Y+9	; 0x09
    48f0:	ba 85       	ldd	r27, Y+10	; 0x0a
    48f2:	41 e0       	ldi	r20, 0x01	; 1
    48f4:	bc 01       	movw	r22, r24
    48f6:	cd 01       	movw	r24, r26
    48f8:	0e 94 9b 2c 	call	0x5936	; 0x5936 <prvAddCurrentTaskToDelayedList>
    48fc:	00 00       	nop
    48fe:	2a 96       	adiw	r28, 0x0a	; 10
    4900:	0f b6       	in	r0, 0x3f	; 63
    4902:	f8 94       	cli
    4904:	de bf       	out	0x3e, r29	; 62
    4906:	0f be       	out	0x3f, r0	; 63
    4908:	cd bf       	out	0x3d, r28	; 61
    490a:	df 91       	pop	r29
    490c:	cf 91       	pop	r28
    490e:	1f 91       	pop	r17
    4910:	0f 91       	pop	r16
    4912:	08 95       	ret

00004914 <vTaskPlaceOnEventListRestricted>:
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	cd b7       	in	r28, 0x3d	; 61
    491a:	de b7       	in	r29, 0x3e	; 62
    491c:	27 97       	sbiw	r28, 0x07	; 7
    491e:	0f b6       	in	r0, 0x3f	; 63
    4920:	f8 94       	cli
    4922:	de bf       	out	0x3e, r29	; 62
    4924:	0f be       	out	0x3f, r0	; 63
    4926:	cd bf       	out	0x3d, r28	; 61
    4928:	9a 83       	std	Y+2, r25	; 0x02
    492a:	89 83       	std	Y+1, r24	; 0x01
    492c:	4b 83       	std	Y+3, r20	; 0x03
    492e:	5c 83       	std	Y+4, r21	; 0x04
    4930:	6d 83       	std	Y+5, r22	; 0x05
    4932:	7e 83       	std	Y+6, r23	; 0x06
    4934:	2f 83       	std	Y+7, r18	; 0x07
    4936:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    493a:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    493e:	9c 01       	movw	r18, r24
    4940:	22 5f       	subi	r18, 0xF2	; 242
    4942:	3f 4f       	sbci	r19, 0xFF	; 255
    4944:	89 81       	ldd	r24, Y+1	; 0x01
    4946:	9a 81       	ldd	r25, Y+2	; 0x02
    4948:	b9 01       	movw	r22, r18
    494a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    494e:	8f 81       	ldd	r24, Y+7	; 0x07
    4950:	88 23       	and	r24, r24
    4952:	39 f0       	breq	.+14     	; 0x4962 <vTaskPlaceOnEventListRestricted+0x4e>
    4954:	8f ef       	ldi	r24, 0xFF	; 255
    4956:	9f ef       	ldi	r25, 0xFF	; 255
    4958:	dc 01       	movw	r26, r24
    495a:	8b 83       	std	Y+3, r24	; 0x03
    495c:	9c 83       	std	Y+4, r25	; 0x04
    495e:	ad 83       	std	Y+5, r26	; 0x05
    4960:	be 83       	std	Y+6, r27	; 0x06
    4962:	8b 81       	ldd	r24, Y+3	; 0x03
    4964:	9c 81       	ldd	r25, Y+4	; 0x04
    4966:	ad 81       	ldd	r26, Y+5	; 0x05
    4968:	be 81       	ldd	r27, Y+6	; 0x06
    496a:	4f 81       	ldd	r20, Y+7	; 0x07
    496c:	bc 01       	movw	r22, r24
    496e:	cd 01       	movw	r24, r26
    4970:	e2 d7       	rcall	.+4036   	; 0x5936 <prvAddCurrentTaskToDelayedList>
    4972:	00 00       	nop
    4974:	27 96       	adiw	r28, 0x07	; 7
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	de bf       	out	0x3e, r29	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	cd bf       	out	0x3d, r28	; 61
    4980:	df 91       	pop	r29
    4982:	cf 91       	pop	r28
    4984:	08 95       	ret

00004986 <xTaskRemoveFromEventList>:
    4986:	cf 93       	push	r28
    4988:	df 93       	push	r29
    498a:	00 d0       	rcall	.+0      	; 0x498c <xTaskRemoveFromEventList+0x6>
    498c:	1f 92       	push	r1
    498e:	1f 92       	push	r1
    4990:	cd b7       	in	r28, 0x3d	; 61
    4992:	de b7       	in	r29, 0x3e	; 62
    4994:	9d 83       	std	Y+5, r25	; 0x05
    4996:	8c 83       	std	Y+4, r24	; 0x04
    4998:	8c 81       	ldd	r24, Y+4	; 0x04
    499a:	9d 81       	ldd	r25, Y+5	; 0x05
    499c:	fc 01       	movw	r30, r24
    499e:	87 81       	ldd	r24, Z+7	; 0x07
    49a0:	90 85       	ldd	r25, Z+8	; 0x08
    49a2:	fc 01       	movw	r30, r24
    49a4:	80 85       	ldd	r24, Z+8	; 0x08
    49a6:	91 85       	ldd	r25, Z+9	; 0x09
    49a8:	9b 83       	std	Y+3, r25	; 0x03
    49aa:	8a 83       	std	Y+2, r24	; 0x02
    49ac:	8a 81       	ldd	r24, Y+2	; 0x02
    49ae:	9b 81       	ldd	r25, Y+3	; 0x03
    49b0:	0e 96       	adiw	r24, 0x0e	; 14
    49b2:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    49b6:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    49ba:	88 23       	and	r24, r24
    49bc:	51 f5       	brne	.+84     	; 0x4a12 <xTaskRemoveFromEventList+0x8c>
    49be:	8a 81       	ldd	r24, Y+2	; 0x02
    49c0:	9b 81       	ldd	r25, Y+3	; 0x03
    49c2:	02 96       	adiw	r24, 0x02	; 2
    49c4:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    49c8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ca:	9b 81       	ldd	r25, Y+3	; 0x03
    49cc:	fc 01       	movw	r30, r24
    49ce:	92 8d       	ldd	r25, Z+26	; 0x1a
    49d0:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    49d4:	89 17       	cp	r24, r25
    49d6:	30 f4       	brcc	.+12     	; 0x49e4 <xTaskRemoveFromEventList+0x5e>
    49d8:	8a 81       	ldd	r24, Y+2	; 0x02
    49da:	9b 81       	ldd	r25, Y+3	; 0x03
    49dc:	fc 01       	movw	r30, r24
    49de:	82 8d       	ldd	r24, Z+26	; 0x1a
    49e0:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    49e4:	8a 81       	ldd	r24, Y+2	; 0x02
    49e6:	9b 81       	ldd	r25, Y+3	; 0x03
    49e8:	ac 01       	movw	r20, r24
    49ea:	4e 5f       	subi	r20, 0xFE	; 254
    49ec:	5f 4f       	sbci	r21, 0xFF	; 255
    49ee:	8a 81       	ldd	r24, Y+2	; 0x02
    49f0:	9b 81       	ldd	r25, Y+3	; 0x03
    49f2:	fc 01       	movw	r30, r24
    49f4:	82 8d       	ldd	r24, Z+26	; 0x1a
    49f6:	28 2f       	mov	r18, r24
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	6b e0       	ldi	r22, 0x0B	; 11
    49fc:	62 9f       	mul	r22, r18
    49fe:	c0 01       	movw	r24, r0
    4a00:	63 9f       	mul	r22, r19
    4a02:	90 0d       	add	r25, r0
    4a04:	11 24       	eor	r1, r1
    4a06:	8e 58       	subi	r24, 0x8E	; 142
    4a08:	98 4e       	sbci	r25, 0xE8	; 232
    4a0a:	ba 01       	movw	r22, r20
    4a0c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4a10:	08 c0       	rjmp	.+16     	; 0x4a22 <xTaskRemoveFromEventList+0x9c>
    4a12:	8a 81       	ldd	r24, Y+2	; 0x02
    4a14:	9b 81       	ldd	r25, Y+3	; 0x03
    4a16:	0e 96       	adiw	r24, 0x0e	; 14
    4a18:	bc 01       	movw	r22, r24
    4a1a:	88 eb       	ldi	r24, 0xB8	; 184
    4a1c:	97 e1       	ldi	r25, 0x17	; 23
    4a1e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4a22:	8a 81       	ldd	r24, Y+2	; 0x02
    4a24:	9b 81       	ldd	r25, Y+3	; 0x03
    4a26:	fc 01       	movw	r30, r24
    4a28:	22 8d       	ldd	r18, Z+26	; 0x1a
    4a2a:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4a2e:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4a32:	fc 01       	movw	r30, r24
    4a34:	82 8d       	ldd	r24, Z+26	; 0x1a
    4a36:	82 17       	cp	r24, r18
    4a38:	30 f4       	brcc	.+12     	; 0x4a46 <xTaskRemoveFromEventList+0xc0>
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	89 83       	std	Y+1, r24	; 0x01
    4a3e:	81 e0       	ldi	r24, 0x01	; 1
    4a40:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4a44:	01 c0       	rjmp	.+2      	; 0x4a48 <xTaskRemoveFromEventList+0xc2>
    4a46:	19 82       	std	Y+1, r1	; 0x01
    4a48:	89 81       	ldd	r24, Y+1	; 0x01
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	df 91       	pop	r29
    4a56:	cf 91       	pop	r28
    4a58:	08 95       	ret

00004a5a <vTaskRemoveFromUnorderedEventList>:
    4a5a:	cf 93       	push	r28
    4a5c:	df 93       	push	r29
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    4a62:	28 97       	sbiw	r28, 0x08	; 8
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	de bf       	out	0x3e, r29	; 62
    4a6a:	0f be       	out	0x3f, r0	; 63
    4a6c:	cd bf       	out	0x3d, r28	; 61
    4a6e:	9c 83       	std	Y+4, r25	; 0x04
    4a70:	8b 83       	std	Y+3, r24	; 0x03
    4a72:	4d 83       	std	Y+5, r20	; 0x05
    4a74:	5e 83       	std	Y+6, r21	; 0x06
    4a76:	6f 83       	std	Y+7, r22	; 0x07
    4a78:	78 87       	std	Y+8, r23	; 0x08
    4a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    4a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    4a7e:	af 81       	ldd	r26, Y+7	; 0x07
    4a80:	b8 85       	ldd	r27, Y+8	; 0x08
    4a82:	b0 68       	ori	r27, 0x80	; 128
    4a84:	2b 81       	ldd	r18, Y+3	; 0x03
    4a86:	3c 81       	ldd	r19, Y+4	; 0x04
    4a88:	f9 01       	movw	r30, r18
    4a8a:	80 83       	st	Z, r24
    4a8c:	91 83       	std	Z+1, r25	; 0x01
    4a8e:	a2 83       	std	Z+2, r26	; 0x02
    4a90:	b3 83       	std	Z+3, r27	; 0x03
    4a92:	8b 81       	ldd	r24, Y+3	; 0x03
    4a94:	9c 81       	ldd	r25, Y+4	; 0x04
    4a96:	fc 01       	movw	r30, r24
    4a98:	80 85       	ldd	r24, Z+8	; 0x08
    4a9a:	91 85       	ldd	r25, Z+9	; 0x09
    4a9c:	9a 83       	std	Y+2, r25	; 0x02
    4a9e:	89 83       	std	Y+1, r24	; 0x01
    4aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa4:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4aa8:	89 81       	ldd	r24, Y+1	; 0x01
    4aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    4aac:	02 96       	adiw	r24, 0x02	; 2
    4aae:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4ab2:	89 81       	ldd	r24, Y+1	; 0x01
    4ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ab6:	fc 01       	movw	r30, r24
    4ab8:	92 8d       	ldd	r25, Z+26	; 0x1a
    4aba:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    4abe:	89 17       	cp	r24, r25
    4ac0:	30 f4       	brcc	.+12     	; 0x4ace <vTaskRemoveFromUnorderedEventList+0x74>
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	9a 81       	ldd	r25, Y+2	; 0x02
    4ac6:	fc 01       	movw	r30, r24
    4ac8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4aca:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    4ace:	89 81       	ldd	r24, Y+1	; 0x01
    4ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    4ad2:	ac 01       	movw	r20, r24
    4ad4:	4e 5f       	subi	r20, 0xFE	; 254
    4ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad8:	89 81       	ldd	r24, Y+1	; 0x01
    4ada:	9a 81       	ldd	r25, Y+2	; 0x02
    4adc:	fc 01       	movw	r30, r24
    4ade:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ae0:	28 2f       	mov	r18, r24
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	6b e0       	ldi	r22, 0x0B	; 11
    4ae6:	62 9f       	mul	r22, r18
    4ae8:	c0 01       	movw	r24, r0
    4aea:	63 9f       	mul	r22, r19
    4aec:	90 0d       	add	r25, r0
    4aee:	11 24       	eor	r1, r1
    4af0:	8e 58       	subi	r24, 0x8E	; 142
    4af2:	98 4e       	sbci	r25, 0xE8	; 232
    4af4:	ba 01       	movw	r22, r20
    4af6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    4afa:	89 81       	ldd	r24, Y+1	; 0x01
    4afc:	9a 81       	ldd	r25, Y+2	; 0x02
    4afe:	fc 01       	movw	r30, r24
    4b00:	22 8d       	ldd	r18, Z+26	; 0x1a
    4b02:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4b06:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4b0a:	fc 01       	movw	r30, r24
    4b0c:	82 8d       	ldd	r24, Z+26	; 0x1a
    4b0e:	82 17       	cp	r24, r18
    4b10:	18 f4       	brcc	.+6      	; 0x4b18 <vTaskRemoveFromUnorderedEventList+0xbe>
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4b18:	00 00       	nop
    4b1a:	28 96       	adiw	r28, 0x08	; 8
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	df 91       	pop	r29
    4b28:	cf 91       	pop	r28
    4b2a:	08 95       	ret

00004b2c <vTaskSetTimeOutState>:
    4b2c:	cf 93       	push	r28
    4b2e:	df 93       	push	r29
    4b30:	1f 92       	push	r1
    4b32:	1f 92       	push	r1
    4b34:	cd b7       	in	r28, 0x3d	; 61
    4b36:	de b7       	in	r29, 0x3e	; 62
    4b38:	9a 83       	std	Y+2, r25	; 0x02
    4b3a:	89 83       	std	Y+1, r24	; 0x01
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	f8 94       	cli
    4b40:	0f 92       	push	r0
    4b42:	20 91 e3 17 	lds	r18, 0x17E3	; 0x8017e3 <xNumOfOverflows>
    4b46:	89 81       	ldd	r24, Y+1	; 0x01
    4b48:	9a 81       	ldd	r25, Y+2	; 0x02
    4b4a:	fc 01       	movw	r30, r24
    4b4c:	20 83       	st	Z, r18
    4b4e:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    4b52:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    4b56:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    4b5a:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    4b5e:	29 81       	ldd	r18, Y+1	; 0x01
    4b60:	3a 81       	ldd	r19, Y+2	; 0x02
    4b62:	f9 01       	movw	r30, r18
    4b64:	81 83       	std	Z+1, r24	; 0x01
    4b66:	92 83       	std	Z+2, r25	; 0x02
    4b68:	a3 83       	std	Z+3, r26	; 0x03
    4b6a:	b4 83       	std	Z+4, r27	; 0x04
    4b6c:	0f 90       	pop	r0
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	00 00       	nop
    4b72:	0f 90       	pop	r0
    4b74:	0f 90       	pop	r0
    4b76:	df 91       	pop	r29
    4b78:	cf 91       	pop	r28
    4b7a:	08 95       	ret

00004b7c <vTaskInternalSetTimeOutState>:
    4b7c:	cf 93       	push	r28
    4b7e:	df 93       	push	r29
    4b80:	1f 92       	push	r1
    4b82:	1f 92       	push	r1
    4b84:	cd b7       	in	r28, 0x3d	; 61
    4b86:	de b7       	in	r29, 0x3e	; 62
    4b88:	9a 83       	std	Y+2, r25	; 0x02
    4b8a:	89 83       	std	Y+1, r24	; 0x01
    4b8c:	20 91 e3 17 	lds	r18, 0x17E3	; 0x8017e3 <xNumOfOverflows>
    4b90:	89 81       	ldd	r24, Y+1	; 0x01
    4b92:	9a 81       	ldd	r25, Y+2	; 0x02
    4b94:	fc 01       	movw	r30, r24
    4b96:	20 83       	st	Z, r18
    4b98:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    4b9c:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    4ba0:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    4ba4:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    4ba8:	29 81       	ldd	r18, Y+1	; 0x01
    4baa:	3a 81       	ldd	r19, Y+2	; 0x02
    4bac:	f9 01       	movw	r30, r18
    4bae:	81 83       	std	Z+1, r24	; 0x01
    4bb0:	92 83       	std	Z+2, r25	; 0x02
    4bb2:	a3 83       	std	Z+3, r26	; 0x03
    4bb4:	b4 83       	std	Z+4, r27	; 0x04
    4bb6:	00 00       	nop
    4bb8:	0f 90       	pop	r0
    4bba:	0f 90       	pop	r0
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	08 95       	ret

00004bc2 <xTaskCheckForTimeOut>:
    4bc2:	ef 92       	push	r14
    4bc4:	ff 92       	push	r15
    4bc6:	0f 93       	push	r16
    4bc8:	1f 93       	push	r17
    4bca:	cf 93       	push	r28
    4bcc:	df 93       	push	r29
    4bce:	cd b7       	in	r28, 0x3d	; 61
    4bd0:	de b7       	in	r29, 0x3e	; 62
    4bd2:	2d 97       	sbiw	r28, 0x0d	; 13
    4bd4:	0f b6       	in	r0, 0x3f	; 63
    4bd6:	f8 94       	cli
    4bd8:	de bf       	out	0x3e, r29	; 62
    4bda:	0f be       	out	0x3f, r0	; 63
    4bdc:	cd bf       	out	0x3d, r28	; 61
    4bde:	9b 87       	std	Y+11, r25	; 0x0b
    4be0:	8a 87       	std	Y+10, r24	; 0x0a
    4be2:	7d 87       	std	Y+13, r23	; 0x0d
    4be4:	6c 87       	std	Y+12, r22	; 0x0c
    4be6:	0f b6       	in	r0, 0x3f	; 63
    4be8:	f8 94       	cli
    4bea:	0f 92       	push	r0
    4bec:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    4bf0:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    4bf4:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    4bf8:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    4bfc:	8a 83       	std	Y+2, r24	; 0x02
    4bfe:	9b 83       	std	Y+3, r25	; 0x03
    4c00:	ac 83       	std	Y+4, r26	; 0x04
    4c02:	bd 83       	std	Y+5, r27	; 0x05
    4c04:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c06:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c08:	fc 01       	movw	r30, r24
    4c0a:	81 81       	ldd	r24, Z+1	; 0x01
    4c0c:	92 81       	ldd	r25, Z+2	; 0x02
    4c0e:	a3 81       	ldd	r26, Z+3	; 0x03
    4c10:	b4 81       	ldd	r27, Z+4	; 0x04
    4c12:	2a 81       	ldd	r18, Y+2	; 0x02
    4c14:	3b 81       	ldd	r19, Y+3	; 0x03
    4c16:	4c 81       	ldd	r20, Y+4	; 0x04
    4c18:	5d 81       	ldd	r21, Y+5	; 0x05
    4c1a:	79 01       	movw	r14, r18
    4c1c:	8a 01       	movw	r16, r20
    4c1e:	e8 1a       	sub	r14, r24
    4c20:	f9 0a       	sbc	r15, r25
    4c22:	0a 0b       	sbc	r16, r26
    4c24:	1b 0b       	sbc	r17, r27
    4c26:	d8 01       	movw	r26, r16
    4c28:	c7 01       	movw	r24, r14
    4c2a:	8e 83       	std	Y+6, r24	; 0x06
    4c2c:	9f 83       	std	Y+7, r25	; 0x07
    4c2e:	a8 87       	std	Y+8, r26	; 0x08
    4c30:	b9 87       	std	Y+9, r27	; 0x09
    4c32:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c34:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c36:	fc 01       	movw	r30, r24
    4c38:	80 81       	ld	r24, Z
    4c3a:	91 81       	ldd	r25, Z+1	; 0x01
    4c3c:	a2 81       	ldd	r26, Z+2	; 0x02
    4c3e:	b3 81       	ldd	r27, Z+3	; 0x03
    4c40:	8f 3f       	cpi	r24, 0xFF	; 255
    4c42:	9f 4f       	sbci	r25, 0xFF	; 255
    4c44:	af 4f       	sbci	r26, 0xFF	; 255
    4c46:	bf 4f       	sbci	r27, 0xFF	; 255
    4c48:	11 f4       	brne	.+4      	; 0x4c4e <xTaskCheckForTimeOut+0x8c>
    4c4a:	19 82       	std	Y+1, r1	; 0x01
    4c4c:	53 c0       	rjmp	.+166    	; 0x4cf4 <xTaskCheckForTimeOut+0x132>
    4c4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c50:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c52:	fc 01       	movw	r30, r24
    4c54:	90 81       	ld	r25, Z
    4c56:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <xNumOfOverflows>
    4c5a:	98 17       	cp	r25, r24
    4c5c:	99 f0       	breq	.+38     	; 0x4c84 <xTaskCheckForTimeOut+0xc2>
    4c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    4c62:	fc 01       	movw	r30, r24
    4c64:	21 81       	ldd	r18, Z+1	; 0x01
    4c66:	32 81       	ldd	r19, Z+2	; 0x02
    4c68:	43 81       	ldd	r20, Z+3	; 0x03
    4c6a:	54 81       	ldd	r21, Z+4	; 0x04
    4c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    4c70:	ac 81       	ldd	r26, Y+4	; 0x04
    4c72:	bd 81       	ldd	r27, Y+5	; 0x05
    4c74:	82 17       	cp	r24, r18
    4c76:	93 07       	cpc	r25, r19
    4c78:	a4 07       	cpc	r26, r20
    4c7a:	b5 07       	cpc	r27, r21
    4c7c:	18 f0       	brcs	.+6      	; 0x4c84 <xTaskCheckForTimeOut+0xc2>
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	89 83       	std	Y+1, r24	; 0x01
    4c82:	38 c0       	rjmp	.+112    	; 0x4cf4 <xTaskCheckForTimeOut+0x132>
    4c84:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c86:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c88:	fc 01       	movw	r30, r24
    4c8a:	20 81       	ld	r18, Z
    4c8c:	31 81       	ldd	r19, Z+1	; 0x01
    4c8e:	42 81       	ldd	r20, Z+2	; 0x02
    4c90:	53 81       	ldd	r21, Z+3	; 0x03
    4c92:	8e 81       	ldd	r24, Y+6	; 0x06
    4c94:	9f 81       	ldd	r25, Y+7	; 0x07
    4c96:	a8 85       	ldd	r26, Y+8	; 0x08
    4c98:	b9 85       	ldd	r27, Y+9	; 0x09
    4c9a:	82 17       	cp	r24, r18
    4c9c:	93 07       	cpc	r25, r19
    4c9e:	a4 07       	cpc	r26, r20
    4ca0:	b5 07       	cpc	r27, r21
    4ca2:	f8 f4       	brcc	.+62     	; 0x4ce2 <xTaskCheckForTimeOut+0x120>
    4ca4:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ca6:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ca8:	fc 01       	movw	r30, r24
    4caa:	20 81       	ld	r18, Z
    4cac:	31 81       	ldd	r19, Z+1	; 0x01
    4cae:	42 81       	ldd	r20, Z+2	; 0x02
    4cb0:	53 81       	ldd	r21, Z+3	; 0x03
    4cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    4cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    4cb6:	a8 85       	ldd	r26, Y+8	; 0x08
    4cb8:	b9 85       	ldd	r27, Y+9	; 0x09
    4cba:	79 01       	movw	r14, r18
    4cbc:	8a 01       	movw	r16, r20
    4cbe:	e8 1a       	sub	r14, r24
    4cc0:	f9 0a       	sbc	r15, r25
    4cc2:	0a 0b       	sbc	r16, r26
    4cc4:	1b 0b       	sbc	r17, r27
    4cc6:	d8 01       	movw	r26, r16
    4cc8:	c7 01       	movw	r24, r14
    4cca:	2c 85       	ldd	r18, Y+12	; 0x0c
    4ccc:	3d 85       	ldd	r19, Y+13	; 0x0d
    4cce:	f9 01       	movw	r30, r18
    4cd0:	80 83       	st	Z, r24
    4cd2:	91 83       	std	Z+1, r25	; 0x01
    4cd4:	a2 83       	std	Z+2, r26	; 0x02
    4cd6:	b3 83       	std	Z+3, r27	; 0x03
    4cd8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cda:	9b 85       	ldd	r25, Y+11	; 0x0b
    4cdc:	4f df       	rcall	.-354    	; 0x4b7c <vTaskInternalSetTimeOutState>
    4cde:	19 82       	std	Y+1, r1	; 0x01
    4ce0:	09 c0       	rjmp	.+18     	; 0x4cf4 <xTaskCheckForTimeOut+0x132>
    4ce2:	8c 85       	ldd	r24, Y+12	; 0x0c
    4ce4:	9d 85       	ldd	r25, Y+13	; 0x0d
    4ce6:	fc 01       	movw	r30, r24
    4ce8:	10 82       	st	Z, r1
    4cea:	11 82       	std	Z+1, r1	; 0x01
    4cec:	12 82       	std	Z+2, r1	; 0x02
    4cee:	13 82       	std	Z+3, r1	; 0x03
    4cf0:	81 e0       	ldi	r24, 0x01	; 1
    4cf2:	89 83       	std	Y+1, r24	; 0x01
    4cf4:	0f 90       	pop	r0
    4cf6:	0f be       	out	0x3f, r0	; 63
    4cf8:	89 81       	ldd	r24, Y+1	; 0x01
    4cfa:	2d 96       	adiw	r28, 0x0d	; 13
    4cfc:	0f b6       	in	r0, 0x3f	; 63
    4cfe:	f8 94       	cli
    4d00:	de bf       	out	0x3e, r29	; 62
    4d02:	0f be       	out	0x3f, r0	; 63
    4d04:	cd bf       	out	0x3d, r28	; 61
    4d06:	df 91       	pop	r29
    4d08:	cf 91       	pop	r28
    4d0a:	1f 91       	pop	r17
    4d0c:	0f 91       	pop	r16
    4d0e:	ff 90       	pop	r15
    4d10:	ef 90       	pop	r14
    4d12:	08 95       	ret

00004d14 <vTaskMissedYield>:
    4d14:	cf 93       	push	r28
    4d16:	df 93       	push	r29
    4d18:	cd b7       	in	r28, 0x3d	; 61
    4d1a:	de b7       	in	r29, 0x3e	; 62
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    4d22:	00 00       	nop
    4d24:	df 91       	pop	r29
    4d26:	cf 91       	pop	r28
    4d28:	08 95       	ret

00004d2a <prvInitialiseTaskLists>:
    4d2a:	cf 93       	push	r28
    4d2c:	df 93       	push	r29
    4d2e:	1f 92       	push	r1
    4d30:	cd b7       	in	r28, 0x3d	; 61
    4d32:	de b7       	in	r29, 0x3e	; 62
    4d34:	19 82       	std	Y+1, r1	; 0x01
    4d36:	10 c0       	rjmp	.+32     	; 0x4d58 <prvInitialiseTaskLists+0x2e>
    4d38:	89 81       	ldd	r24, Y+1	; 0x01
    4d3a:	28 2f       	mov	r18, r24
    4d3c:	30 e0       	ldi	r19, 0x00	; 0
    4d3e:	4b e0       	ldi	r20, 0x0B	; 11
    4d40:	42 9f       	mul	r20, r18
    4d42:	c0 01       	movw	r24, r0
    4d44:	43 9f       	mul	r20, r19
    4d46:	90 0d       	add	r25, r0
    4d48:	11 24       	eor	r1, r1
    4d4a:	8e 58       	subi	r24, 0x8E	; 142
    4d4c:	98 4e       	sbci	r25, 0xE8	; 232
    4d4e:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d52:	89 81       	ldd	r24, Y+1	; 0x01
    4d54:	8f 5f       	subi	r24, 0xFF	; 255
    4d56:	89 83       	std	Y+1, r24	; 0x01
    4d58:	89 81       	ldd	r24, Y+1	; 0x01
    4d5a:	84 30       	cpi	r24, 0x04	; 4
    4d5c:	68 f3       	brcs	.-38     	; 0x4d38 <prvInitialiseTaskLists+0xe>
    4d5e:	8e e9       	ldi	r24, 0x9E	; 158
    4d60:	97 e1       	ldi	r25, 0x17	; 23
    4d62:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d66:	89 ea       	ldi	r24, 0xA9	; 169
    4d68:	97 e1       	ldi	r25, 0x17	; 23
    4d6a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d6e:	88 eb       	ldi	r24, 0xB8	; 184
    4d70:	97 e1       	ldi	r25, 0x17	; 23
    4d72:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d76:	83 ec       	ldi	r24, 0xC3	; 195
    4d78:	97 e1       	ldi	r25, 0x17	; 23
    4d7a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d7e:	8f ec       	ldi	r24, 0xCF	; 207
    4d80:	97 e1       	ldi	r25, 0x17	; 23
    4d82:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
    4d86:	8e e9       	ldi	r24, 0x9E	; 158
    4d88:	97 e1       	ldi	r25, 0x17	; 23
    4d8a:	90 93 b5 17 	sts	0x17B5, r25	; 0x8017b5 <pxDelayedTaskList+0x1>
    4d8e:	80 93 b4 17 	sts	0x17B4, r24	; 0x8017b4 <pxDelayedTaskList>
    4d92:	89 ea       	ldi	r24, 0xA9	; 169
    4d94:	97 e1       	ldi	r25, 0x17	; 23
    4d96:	90 93 b7 17 	sts	0x17B7, r25	; 0x8017b7 <pxOverflowDelayedTaskList+0x1>
    4d9a:	80 93 b6 17 	sts	0x17B6, r24	; 0x8017b6 <pxOverflowDelayedTaskList>
    4d9e:	00 00       	nop
    4da0:	0f 90       	pop	r0
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	08 95       	ret

00004da8 <prvCheckTasksWaitingTermination>:
    4da8:	cf 93       	push	r28
    4daa:	df 93       	push	r29
    4dac:	1f 92       	push	r1
    4dae:	1f 92       	push	r1
    4db0:	cd b7       	in	r28, 0x3d	; 61
    4db2:	de b7       	in	r29, 0x3e	; 62
    4db4:	20 c0       	rjmp	.+64     	; 0x4df6 <prvCheckTasksWaitingTermination+0x4e>
    4db6:	0f b6       	in	r0, 0x3f	; 63
    4db8:	f8 94       	cli
    4dba:	0f 92       	push	r0
    4dbc:	80 91 ca 17 	lds	r24, 0x17CA	; 0x8017ca <xTasksWaitingTermination+0x7>
    4dc0:	90 91 cb 17 	lds	r25, 0x17CB	; 0x8017cb <xTasksWaitingTermination+0x8>
    4dc4:	fc 01       	movw	r30, r24
    4dc6:	80 85       	ldd	r24, Z+8	; 0x08
    4dc8:	91 85       	ldd	r25, Z+9	; 0x09
    4dca:	9a 83       	std	Y+2, r25	; 0x02
    4dcc:	89 83       	std	Y+1, r24	; 0x01
    4dce:	89 81       	ldd	r24, Y+1	; 0x01
    4dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    4dd2:	02 96       	adiw	r24, 0x02	; 2
    4dd4:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4dd8:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <uxCurrentNumberOfTasks>
    4ddc:	81 50       	subi	r24, 0x01	; 1
    4dde:	80 93 da 17 	sts	0x17DA, r24	; 0x8017da <uxCurrentNumberOfTasks>
    4de2:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxDeletedTasksWaitingCleanUp>
    4de6:	81 50       	subi	r24, 0x01	; 1
    4de8:	80 93 ce 17 	sts	0x17CE, r24	; 0x8017ce <uxDeletedTasksWaitingCleanUp>
    4dec:	0f 90       	pop	r0
    4dee:	0f be       	out	0x3f, r0	; 63
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	9a 81       	ldd	r25, Y+2	; 0x02
    4df4:	0a d0       	rcall	.+20     	; 0x4e0a <prvDeleteTCB>
    4df6:	80 91 ce 17 	lds	r24, 0x17CE	; 0x8017ce <uxDeletedTasksWaitingCleanUp>
    4dfa:	88 23       	and	r24, r24
    4dfc:	e1 f6       	brne	.-72     	; 0x4db6 <prvCheckTasksWaitingTermination+0xe>
    4dfe:	00 00       	nop
    4e00:	0f 90       	pop	r0
    4e02:	0f 90       	pop	r0
    4e04:	df 91       	pop	r29
    4e06:	cf 91       	pop	r28
    4e08:	08 95       	ret

00004e0a <prvDeleteTCB>:
    4e0a:	cf 93       	push	r28
    4e0c:	df 93       	push	r29
    4e0e:	1f 92       	push	r1
    4e10:	1f 92       	push	r1
    4e12:	cd b7       	in	r28, 0x3d	; 61
    4e14:	de b7       	in	r29, 0x3e	; 62
    4e16:	9a 83       	std	Y+2, r25	; 0x02
    4e18:	89 83       	std	Y+1, r24	; 0x01
    4e1a:	89 81       	ldd	r24, Y+1	; 0x01
    4e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    4e1e:	fc 01       	movw	r30, r24
    4e20:	83 8d       	ldd	r24, Z+27	; 0x1b
    4e22:	94 8d       	ldd	r25, Z+28	; 0x1c
    4e24:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    4e28:	89 81       	ldd	r24, Y+1	; 0x01
    4e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e2c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    4e30:	00 00       	nop
    4e32:	0f 90       	pop	r0
    4e34:	0f 90       	pop	r0
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	08 95       	ret

00004e3c <prvResetNextTaskUnblockTime>:
    4e3c:	cf 93       	push	r28
    4e3e:	df 93       	push	r29
    4e40:	1f 92       	push	r1
    4e42:	1f 92       	push	r1
    4e44:	cd b7       	in	r28, 0x3d	; 61
    4e46:	de b7       	in	r29, 0x3e	; 62
    4e48:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    4e4c:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    4e50:	fc 01       	movw	r30, r24
    4e52:	80 81       	ld	r24, Z
    4e54:	88 23       	and	r24, r24
    4e56:	61 f4       	brne	.+24     	; 0x4e70 <prvResetNextTaskUnblockTime+0x34>
    4e58:	8f ef       	ldi	r24, 0xFF	; 255
    4e5a:	9f ef       	ldi	r25, 0xFF	; 255
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    4e62:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    4e66:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    4e6a:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    4e6e:	1b c0       	rjmp	.+54     	; 0x4ea6 <prvResetNextTaskUnblockTime+0x6a>
    4e70:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    4e74:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    4e78:	fc 01       	movw	r30, r24
    4e7a:	87 81       	ldd	r24, Z+7	; 0x07
    4e7c:	90 85       	ldd	r25, Z+8	; 0x08
    4e7e:	fc 01       	movw	r30, r24
    4e80:	80 85       	ldd	r24, Z+8	; 0x08
    4e82:	91 85       	ldd	r25, Z+9	; 0x09
    4e84:	9a 83       	std	Y+2, r25	; 0x02
    4e86:	89 83       	std	Y+1, r24	; 0x01
    4e88:	89 81       	ldd	r24, Y+1	; 0x01
    4e8a:	9a 81       	ldd	r25, Y+2	; 0x02
    4e8c:	fc 01       	movw	r30, r24
    4e8e:	82 81       	ldd	r24, Z+2	; 0x02
    4e90:	93 81       	ldd	r25, Z+3	; 0x03
    4e92:	a4 81       	ldd	r26, Z+4	; 0x04
    4e94:	b5 81       	ldd	r27, Z+5	; 0x05
    4e96:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    4e9a:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    4e9e:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    4ea2:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    4ea6:	00 00       	nop
    4ea8:	0f 90       	pop	r0
    4eaa:	0f 90       	pop	r0
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	08 95       	ret

00004eb2 <xTaskGetCurrentTaskHandle>:
    4eb2:	cf 93       	push	r28
    4eb4:	df 93       	push	r29
    4eb6:	1f 92       	push	r1
    4eb8:	1f 92       	push	r1
    4eba:	cd b7       	in	r28, 0x3d	; 61
    4ebc:	de b7       	in	r29, 0x3e	; 62
    4ebe:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4ec2:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4ec6:	9a 83       	std	Y+2, r25	; 0x02
    4ec8:	89 83       	std	Y+1, r24	; 0x01
    4eca:	89 81       	ldd	r24, Y+1	; 0x01
    4ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ece:	0f 90       	pop	r0
    4ed0:	0f 90       	pop	r0
    4ed2:	df 91       	pop	r29
    4ed4:	cf 91       	pop	r28
    4ed6:	08 95       	ret

00004ed8 <xTaskGetSchedulerState>:
    4ed8:	cf 93       	push	r28
    4eda:	df 93       	push	r29
    4edc:	1f 92       	push	r1
    4ede:	cd b7       	in	r28, 0x3d	; 61
    4ee0:	de b7       	in	r29, 0x3e	; 62
    4ee2:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <xSchedulerRunning>
    4ee6:	88 23       	and	r24, r24
    4ee8:	19 f4       	brne	.+6      	; 0x4ef0 <xTaskGetSchedulerState+0x18>
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	89 83       	std	Y+1, r24	; 0x01
    4eee:	08 c0       	rjmp	.+16     	; 0x4f00 <xTaskGetSchedulerState+0x28>
    4ef0:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    4ef4:	88 23       	and	r24, r24
    4ef6:	19 f4       	brne	.+6      	; 0x4efe <xTaskGetSchedulerState+0x26>
    4ef8:	82 e0       	ldi	r24, 0x02	; 2
    4efa:	89 83       	std	Y+1, r24	; 0x01
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <xTaskGetSchedulerState+0x28>
    4efe:	19 82       	std	Y+1, r1	; 0x01
    4f00:	89 81       	ldd	r24, Y+1	; 0x01
    4f02:	0f 90       	pop	r0
    4f04:	df 91       	pop	r29
    4f06:	cf 91       	pop	r28
    4f08:	08 95       	ret

00004f0a <xTaskPriorityInherit>:
    4f0a:	ef 92       	push	r14
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	00 d0       	rcall	.+0      	; 0x4f18 <xTaskPriorityInherit+0xe>
    4f18:	1f 92       	push	r1
    4f1a:	1f 92       	push	r1
    4f1c:	cd b7       	in	r28, 0x3d	; 61
    4f1e:	de b7       	in	r29, 0x3e	; 62
    4f20:	9d 83       	std	Y+5, r25	; 0x05
    4f22:	8c 83       	std	Y+4, r24	; 0x04
    4f24:	8c 81       	ldd	r24, Y+4	; 0x04
    4f26:	9d 81       	ldd	r25, Y+5	; 0x05
    4f28:	9b 83       	std	Y+3, r25	; 0x03
    4f2a:	8a 83       	std	Y+2, r24	; 0x02
    4f2c:	19 82       	std	Y+1, r1	; 0x01
    4f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    4f30:	9d 81       	ldd	r25, Y+5	; 0x05
    4f32:	89 2b       	or	r24, r25
    4f34:	09 f4       	brne	.+2      	; 0x4f38 <xTaskPriorityInherit+0x2e>
    4f36:	98 c0       	rjmp	.+304    	; 0x5068 <xTaskPriorityInherit+0x15e>
    4f38:	8a 81       	ldd	r24, Y+2	; 0x02
    4f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4f3c:	fc 01       	movw	r30, r24
    4f3e:	22 8d       	ldd	r18, Z+26	; 0x1a
    4f40:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4f44:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4f48:	fc 01       	movw	r30, r24
    4f4a:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f4c:	28 17       	cp	r18, r24
    4f4e:	08 f0       	brcs	.+2      	; 0x4f52 <xTaskPriorityInherit+0x48>
    4f50:	7d c0       	rjmp	.+250    	; 0x504c <xTaskPriorityInherit+0x142>
    4f52:	8a 81       	ldd	r24, Y+2	; 0x02
    4f54:	9b 81       	ldd	r25, Y+3	; 0x03
    4f56:	fc 01       	movw	r30, r24
    4f58:	86 85       	ldd	r24, Z+14	; 0x0e
    4f5a:	97 85       	ldd	r25, Z+15	; 0x0f
    4f5c:	a0 89       	ldd	r26, Z+16	; 0x10
    4f5e:	b1 89       	ldd	r27, Z+17	; 0x11
    4f60:	bb 23       	and	r27, r27
    4f62:	ec f0       	brlt	.+58     	; 0x4f9e <xTaskPriorityInherit+0x94>
    4f64:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4f68:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4f6c:	fc 01       	movw	r30, r24
    4f6e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4f70:	88 2f       	mov	r24, r24
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	a0 e0       	ldi	r26, 0x00	; 0
    4f76:	b0 e0       	ldi	r27, 0x00	; 0
    4f78:	24 e0       	ldi	r18, 0x04	; 4
    4f7a:	30 e0       	ldi	r19, 0x00	; 0
    4f7c:	40 e0       	ldi	r20, 0x00	; 0
    4f7e:	50 e0       	ldi	r21, 0x00	; 0
    4f80:	79 01       	movw	r14, r18
    4f82:	8a 01       	movw	r16, r20
    4f84:	e8 1a       	sub	r14, r24
    4f86:	f9 0a       	sbc	r15, r25
    4f88:	0a 0b       	sbc	r16, r26
    4f8a:	1b 0b       	sbc	r17, r27
    4f8c:	d8 01       	movw	r26, r16
    4f8e:	c7 01       	movw	r24, r14
    4f90:	2a 81       	ldd	r18, Y+2	; 0x02
    4f92:	3b 81       	ldd	r19, Y+3	; 0x03
    4f94:	f9 01       	movw	r30, r18
    4f96:	86 87       	std	Z+14, r24	; 0x0e
    4f98:	97 87       	std	Z+15, r25	; 0x0f
    4f9a:	a0 8b       	std	Z+16, r26	; 0x10
    4f9c:	b1 8b       	std	Z+17, r27	; 0x11
    4f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    4fa2:	fc 01       	movw	r30, r24
    4fa4:	24 85       	ldd	r18, Z+12	; 0x0c
    4fa6:	35 85       	ldd	r19, Z+13	; 0x0d
    4fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    4faa:	9b 81       	ldd	r25, Y+3	; 0x03
    4fac:	fc 01       	movw	r30, r24
    4fae:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fb0:	48 2f       	mov	r20, r24
    4fb2:	50 e0       	ldi	r21, 0x00	; 0
    4fb4:	6b e0       	ldi	r22, 0x0B	; 11
    4fb6:	64 9f       	mul	r22, r20
    4fb8:	c0 01       	movw	r24, r0
    4fba:	65 9f       	mul	r22, r21
    4fbc:	90 0d       	add	r25, r0
    4fbe:	11 24       	eor	r1, r1
    4fc0:	8e 58       	subi	r24, 0x8E	; 142
    4fc2:	98 4e       	sbci	r25, 0xE8	; 232
    4fc4:	28 17       	cp	r18, r24
    4fc6:	39 07       	cpc	r19, r25
    4fc8:	a1 f5       	brne	.+104    	; 0x5032 <xTaskPriorityInherit+0x128>
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	9b 81       	ldd	r25, Y+3	; 0x03
    4fce:	02 96       	adiw	r24, 0x02	; 2
    4fd0:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    4fd4:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    4fd8:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    4fdc:	fc 01       	movw	r30, r24
    4fde:	22 8d       	ldd	r18, Z+26	; 0x1a
    4fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe2:	9b 81       	ldd	r25, Y+3	; 0x03
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	22 8f       	std	Z+26, r18	; 0x1a
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	9b 81       	ldd	r25, Y+3	; 0x03
    4fec:	fc 01       	movw	r30, r24
    4fee:	92 8d       	ldd	r25, Z+26	; 0x1a
    4ff0:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    4ff4:	89 17       	cp	r24, r25
    4ff6:	30 f4       	brcc	.+12     	; 0x5004 <xTaskPriorityInherit+0xfa>
    4ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    4ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	82 8d       	ldd	r24, Z+26	; 0x1a
    5000:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    5004:	8a 81       	ldd	r24, Y+2	; 0x02
    5006:	9b 81       	ldd	r25, Y+3	; 0x03
    5008:	ac 01       	movw	r20, r24
    500a:	4e 5f       	subi	r20, 0xFE	; 254
    500c:	5f 4f       	sbci	r21, 0xFF	; 255
    500e:	8a 81       	ldd	r24, Y+2	; 0x02
    5010:	9b 81       	ldd	r25, Y+3	; 0x03
    5012:	fc 01       	movw	r30, r24
    5014:	82 8d       	ldd	r24, Z+26	; 0x1a
    5016:	28 2f       	mov	r18, r24
    5018:	30 e0       	ldi	r19, 0x00	; 0
    501a:	6b e0       	ldi	r22, 0x0B	; 11
    501c:	62 9f       	mul	r22, r18
    501e:	c0 01       	movw	r24, r0
    5020:	63 9f       	mul	r22, r19
    5022:	90 0d       	add	r25, r0
    5024:	11 24       	eor	r1, r1
    5026:	8e 58       	subi	r24, 0x8E	; 142
    5028:	98 4e       	sbci	r25, 0xE8	; 232
    502a:	ba 01       	movw	r22, r20
    502c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    5030:	0a c0       	rjmp	.+20     	; 0x5046 <xTaskPriorityInherit+0x13c>
    5032:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5036:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    503a:	fc 01       	movw	r30, r24
    503c:	22 8d       	ldd	r18, Z+26	; 0x1a
    503e:	8a 81       	ldd	r24, Y+2	; 0x02
    5040:	9b 81       	ldd	r25, Y+3	; 0x03
    5042:	fc 01       	movw	r30, r24
    5044:	22 8f       	std	Z+26, r18	; 0x1a
    5046:	81 e0       	ldi	r24, 0x01	; 1
    5048:	89 83       	std	Y+1, r24	; 0x01
    504a:	0e c0       	rjmp	.+28     	; 0x5068 <xTaskPriorityInherit+0x15e>
    504c:	8a 81       	ldd	r24, Y+2	; 0x02
    504e:	9b 81       	ldd	r25, Y+3	; 0x03
    5050:	fc 01       	movw	r30, r24
    5052:	27 a1       	ldd	r18, Z+39	; 0x27
    5054:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5058:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    505c:	fc 01       	movw	r30, r24
    505e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5060:	28 17       	cp	r18, r24
    5062:	10 f4       	brcc	.+4      	; 0x5068 <xTaskPriorityInherit+0x15e>
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	89 83       	std	Y+1, r24	; 0x01
    5068:	89 81       	ldd	r24, Y+1	; 0x01
    506a:	0f 90       	pop	r0
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	0f 90       	pop	r0
    5072:	0f 90       	pop	r0
    5074:	df 91       	pop	r29
    5076:	cf 91       	pop	r28
    5078:	1f 91       	pop	r17
    507a:	0f 91       	pop	r16
    507c:	ff 90       	pop	r15
    507e:	ef 90       	pop	r14
    5080:	08 95       	ret

00005082 <xTaskPriorityDisinherit>:
    5082:	ef 92       	push	r14
    5084:	ff 92       	push	r15
    5086:	0f 93       	push	r16
    5088:	1f 93       	push	r17
    508a:	cf 93       	push	r28
    508c:	df 93       	push	r29
    508e:	00 d0       	rcall	.+0      	; 0x5090 <xTaskPriorityDisinherit+0xe>
    5090:	1f 92       	push	r1
    5092:	1f 92       	push	r1
    5094:	cd b7       	in	r28, 0x3d	; 61
    5096:	de b7       	in	r29, 0x3e	; 62
    5098:	9d 83       	std	Y+5, r25	; 0x05
    509a:	8c 83       	std	Y+4, r24	; 0x04
    509c:	8c 81       	ldd	r24, Y+4	; 0x04
    509e:	9d 81       	ldd	r25, Y+5	; 0x05
    50a0:	9b 83       	std	Y+3, r25	; 0x03
    50a2:	8a 83       	std	Y+2, r24	; 0x02
    50a4:	19 82       	std	Y+1, r1	; 0x01
    50a6:	8c 81       	ldd	r24, Y+4	; 0x04
    50a8:	9d 81       	ldd	r25, Y+5	; 0x05
    50aa:	89 2b       	or	r24, r25
    50ac:	09 f4       	brne	.+2      	; 0x50b0 <xTaskPriorityDisinherit+0x2e>
    50ae:	6a c0       	rjmp	.+212    	; 0x5184 <xTaskPriorityDisinherit+0x102>
    50b0:	8a 81       	ldd	r24, Y+2	; 0x02
    50b2:	9b 81       	ldd	r25, Y+3	; 0x03
    50b4:	fc 01       	movw	r30, r24
    50b6:	80 a5       	ldd	r24, Z+40	; 0x28
    50b8:	2f ef       	ldi	r18, 0xFF	; 255
    50ba:	28 0f       	add	r18, r24
    50bc:	8a 81       	ldd	r24, Y+2	; 0x02
    50be:	9b 81       	ldd	r25, Y+3	; 0x03
    50c0:	fc 01       	movw	r30, r24
    50c2:	20 a7       	std	Z+40, r18	; 0x28
    50c4:	8a 81       	ldd	r24, Y+2	; 0x02
    50c6:	9b 81       	ldd	r25, Y+3	; 0x03
    50c8:	fc 01       	movw	r30, r24
    50ca:	22 8d       	ldd	r18, Z+26	; 0x1a
    50cc:	8a 81       	ldd	r24, Y+2	; 0x02
    50ce:	9b 81       	ldd	r25, Y+3	; 0x03
    50d0:	fc 01       	movw	r30, r24
    50d2:	87 a1       	ldd	r24, Z+39	; 0x27
    50d4:	28 17       	cp	r18, r24
    50d6:	09 f4       	brne	.+2      	; 0x50da <xTaskPriorityDisinherit+0x58>
    50d8:	55 c0       	rjmp	.+170    	; 0x5184 <xTaskPriorityDisinherit+0x102>
    50da:	8a 81       	ldd	r24, Y+2	; 0x02
    50dc:	9b 81       	ldd	r25, Y+3	; 0x03
    50de:	fc 01       	movw	r30, r24
    50e0:	80 a5       	ldd	r24, Z+40	; 0x28
    50e2:	88 23       	and	r24, r24
    50e4:	09 f0       	breq	.+2      	; 0x50e8 <xTaskPriorityDisinherit+0x66>
    50e6:	4e c0       	rjmp	.+156    	; 0x5184 <xTaskPriorityDisinherit+0x102>
    50e8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ea:	9b 81       	ldd	r25, Y+3	; 0x03
    50ec:	02 96       	adiw	r24, 0x02	; 2
    50ee:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    50f2:	8a 81       	ldd	r24, Y+2	; 0x02
    50f4:	9b 81       	ldd	r25, Y+3	; 0x03
    50f6:	fc 01       	movw	r30, r24
    50f8:	27 a1       	ldd	r18, Z+39	; 0x27
    50fa:	8a 81       	ldd	r24, Y+2	; 0x02
    50fc:	9b 81       	ldd	r25, Y+3	; 0x03
    50fe:	fc 01       	movw	r30, r24
    5100:	22 8f       	std	Z+26, r18	; 0x1a
    5102:	8a 81       	ldd	r24, Y+2	; 0x02
    5104:	9b 81       	ldd	r25, Y+3	; 0x03
    5106:	fc 01       	movw	r30, r24
    5108:	82 8d       	ldd	r24, Z+26	; 0x1a
    510a:	88 2f       	mov	r24, r24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	a0 e0       	ldi	r26, 0x00	; 0
    5110:	b0 e0       	ldi	r27, 0x00	; 0
    5112:	24 e0       	ldi	r18, 0x04	; 4
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	40 e0       	ldi	r20, 0x00	; 0
    5118:	50 e0       	ldi	r21, 0x00	; 0
    511a:	79 01       	movw	r14, r18
    511c:	8a 01       	movw	r16, r20
    511e:	e8 1a       	sub	r14, r24
    5120:	f9 0a       	sbc	r15, r25
    5122:	0a 0b       	sbc	r16, r26
    5124:	1b 0b       	sbc	r17, r27
    5126:	d8 01       	movw	r26, r16
    5128:	c7 01       	movw	r24, r14
    512a:	2a 81       	ldd	r18, Y+2	; 0x02
    512c:	3b 81       	ldd	r19, Y+3	; 0x03
    512e:	f9 01       	movw	r30, r18
    5130:	86 87       	std	Z+14, r24	; 0x0e
    5132:	97 87       	std	Z+15, r25	; 0x0f
    5134:	a0 8b       	std	Z+16, r26	; 0x10
    5136:	b1 8b       	std	Z+17, r27	; 0x11
    5138:	8a 81       	ldd	r24, Y+2	; 0x02
    513a:	9b 81       	ldd	r25, Y+3	; 0x03
    513c:	fc 01       	movw	r30, r24
    513e:	92 8d       	ldd	r25, Z+26	; 0x1a
    5140:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    5144:	89 17       	cp	r24, r25
    5146:	30 f4       	brcc	.+12     	; 0x5154 <xTaskPriorityDisinherit+0xd2>
    5148:	8a 81       	ldd	r24, Y+2	; 0x02
    514a:	9b 81       	ldd	r25, Y+3	; 0x03
    514c:	fc 01       	movw	r30, r24
    514e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5150:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    5154:	8a 81       	ldd	r24, Y+2	; 0x02
    5156:	9b 81       	ldd	r25, Y+3	; 0x03
    5158:	ac 01       	movw	r20, r24
    515a:	4e 5f       	subi	r20, 0xFE	; 254
    515c:	5f 4f       	sbci	r21, 0xFF	; 255
    515e:	8a 81       	ldd	r24, Y+2	; 0x02
    5160:	9b 81       	ldd	r25, Y+3	; 0x03
    5162:	fc 01       	movw	r30, r24
    5164:	82 8d       	ldd	r24, Z+26	; 0x1a
    5166:	28 2f       	mov	r18, r24
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	6b e0       	ldi	r22, 0x0B	; 11
    516c:	62 9f       	mul	r22, r18
    516e:	c0 01       	movw	r24, r0
    5170:	63 9f       	mul	r22, r19
    5172:	90 0d       	add	r25, r0
    5174:	11 24       	eor	r1, r1
    5176:	8e 58       	subi	r24, 0x8E	; 142
    5178:	98 4e       	sbci	r25, 0xE8	; 232
    517a:	ba 01       	movw	r22, r20
    517c:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    5180:	81 e0       	ldi	r24, 0x01	; 1
    5182:	89 83       	std	Y+1, r24	; 0x01
    5184:	89 81       	ldd	r24, Y+1	; 0x01
    5186:	0f 90       	pop	r0
    5188:	0f 90       	pop	r0
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	0f 90       	pop	r0
    5190:	df 91       	pop	r29
    5192:	cf 91       	pop	r28
    5194:	1f 91       	pop	r17
    5196:	0f 91       	pop	r16
    5198:	ff 90       	pop	r15
    519a:	ef 90       	pop	r14
    519c:	08 95       	ret

0000519e <vTaskPriorityDisinheritAfterTimeout>:
    519e:	ef 92       	push	r14
    51a0:	ff 92       	push	r15
    51a2:	0f 93       	push	r16
    51a4:	1f 93       	push	r17
    51a6:	cf 93       	push	r28
    51a8:	df 93       	push	r29
    51aa:	cd b7       	in	r28, 0x3d	; 61
    51ac:	de b7       	in	r29, 0x3e	; 62
    51ae:	28 97       	sbiw	r28, 0x08	; 8
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	f8 94       	cli
    51b4:	de bf       	out	0x3e, r29	; 62
    51b6:	0f be       	out	0x3f, r0	; 63
    51b8:	cd bf       	out	0x3d, r28	; 61
    51ba:	9f 83       	std	Y+7, r25	; 0x07
    51bc:	8e 83       	std	Y+6, r24	; 0x06
    51be:	68 87       	std	Y+8, r22	; 0x08
    51c0:	8e 81       	ldd	r24, Y+6	; 0x06
    51c2:	9f 81       	ldd	r25, Y+7	; 0x07
    51c4:	9b 83       	std	Y+3, r25	; 0x03
    51c6:	8a 83       	std	Y+2, r24	; 0x02
    51c8:	81 e0       	ldi	r24, 0x01	; 1
    51ca:	8c 83       	std	Y+4, r24	; 0x04
    51cc:	8e 81       	ldd	r24, Y+6	; 0x06
    51ce:	9f 81       	ldd	r25, Y+7	; 0x07
    51d0:	89 2b       	or	r24, r25
    51d2:	09 f4       	brne	.+2      	; 0x51d6 <vTaskPriorityDisinheritAfterTimeout+0x38>
    51d4:	86 c0       	rjmp	.+268    	; 0x52e2 <vTaskPriorityDisinheritAfterTimeout+0x144>
    51d6:	8a 81       	ldd	r24, Y+2	; 0x02
    51d8:	9b 81       	ldd	r25, Y+3	; 0x03
    51da:	fc 01       	movw	r30, r24
    51dc:	97 a1       	ldd	r25, Z+39	; 0x27
    51de:	88 85       	ldd	r24, Y+8	; 0x08
    51e0:	98 17       	cp	r25, r24
    51e2:	18 f4       	brcc	.+6      	; 0x51ea <vTaskPriorityDisinheritAfterTimeout+0x4c>
    51e4:	88 85       	ldd	r24, Y+8	; 0x08
    51e6:	89 83       	std	Y+1, r24	; 0x01
    51e8:	05 c0       	rjmp	.+10     	; 0x51f4 <vTaskPriorityDisinheritAfterTimeout+0x56>
    51ea:	8a 81       	ldd	r24, Y+2	; 0x02
    51ec:	9b 81       	ldd	r25, Y+3	; 0x03
    51ee:	fc 01       	movw	r30, r24
    51f0:	87 a1       	ldd	r24, Z+39	; 0x27
    51f2:	89 83       	std	Y+1, r24	; 0x01
    51f4:	8a 81       	ldd	r24, Y+2	; 0x02
    51f6:	9b 81       	ldd	r25, Y+3	; 0x03
    51f8:	fc 01       	movw	r30, r24
    51fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    51fc:	89 81       	ldd	r24, Y+1	; 0x01
    51fe:	98 17       	cp	r25, r24
    5200:	09 f4       	brne	.+2      	; 0x5204 <vTaskPriorityDisinheritAfterTimeout+0x66>
    5202:	6f c0       	rjmp	.+222    	; 0x52e2 <vTaskPriorityDisinheritAfterTimeout+0x144>
    5204:	8a 81       	ldd	r24, Y+2	; 0x02
    5206:	9b 81       	ldd	r25, Y+3	; 0x03
    5208:	fc 01       	movw	r30, r24
    520a:	90 a5       	ldd	r25, Z+40	; 0x28
    520c:	8c 81       	ldd	r24, Y+4	; 0x04
    520e:	98 17       	cp	r25, r24
    5210:	09 f0       	breq	.+2      	; 0x5214 <vTaskPriorityDisinheritAfterTimeout+0x76>
    5212:	67 c0       	rjmp	.+206    	; 0x52e2 <vTaskPriorityDisinheritAfterTimeout+0x144>
    5214:	8a 81       	ldd	r24, Y+2	; 0x02
    5216:	9b 81       	ldd	r25, Y+3	; 0x03
    5218:	fc 01       	movw	r30, r24
    521a:	82 8d       	ldd	r24, Z+26	; 0x1a
    521c:	8d 83       	std	Y+5, r24	; 0x05
    521e:	8a 81       	ldd	r24, Y+2	; 0x02
    5220:	9b 81       	ldd	r25, Y+3	; 0x03
    5222:	29 81       	ldd	r18, Y+1	; 0x01
    5224:	fc 01       	movw	r30, r24
    5226:	22 8f       	std	Z+26, r18	; 0x1a
    5228:	8a 81       	ldd	r24, Y+2	; 0x02
    522a:	9b 81       	ldd	r25, Y+3	; 0x03
    522c:	fc 01       	movw	r30, r24
    522e:	86 85       	ldd	r24, Z+14	; 0x0e
    5230:	97 85       	ldd	r25, Z+15	; 0x0f
    5232:	a0 89       	ldd	r26, Z+16	; 0x10
    5234:	b1 89       	ldd	r27, Z+17	; 0x11
    5236:	bb 23       	and	r27, r27
    5238:	c4 f0       	brlt	.+48     	; 0x526a <vTaskPriorityDisinheritAfterTimeout+0xcc>
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	88 2f       	mov	r24, r24
    523e:	90 e0       	ldi	r25, 0x00	; 0
    5240:	a0 e0       	ldi	r26, 0x00	; 0
    5242:	b0 e0       	ldi	r27, 0x00	; 0
    5244:	24 e0       	ldi	r18, 0x04	; 4
    5246:	30 e0       	ldi	r19, 0x00	; 0
    5248:	40 e0       	ldi	r20, 0x00	; 0
    524a:	50 e0       	ldi	r21, 0x00	; 0
    524c:	79 01       	movw	r14, r18
    524e:	8a 01       	movw	r16, r20
    5250:	e8 1a       	sub	r14, r24
    5252:	f9 0a       	sbc	r15, r25
    5254:	0a 0b       	sbc	r16, r26
    5256:	1b 0b       	sbc	r17, r27
    5258:	d8 01       	movw	r26, r16
    525a:	c7 01       	movw	r24, r14
    525c:	2a 81       	ldd	r18, Y+2	; 0x02
    525e:	3b 81       	ldd	r19, Y+3	; 0x03
    5260:	f9 01       	movw	r30, r18
    5262:	86 87       	std	Z+14, r24	; 0x0e
    5264:	97 87       	std	Z+15, r25	; 0x0f
    5266:	a0 8b       	std	Z+16, r26	; 0x10
    5268:	b1 8b       	std	Z+17, r27	; 0x11
    526a:	8a 81       	ldd	r24, Y+2	; 0x02
    526c:	9b 81       	ldd	r25, Y+3	; 0x03
    526e:	fc 01       	movw	r30, r24
    5270:	24 85       	ldd	r18, Z+12	; 0x0c
    5272:	35 85       	ldd	r19, Z+13	; 0x0d
    5274:	8d 81       	ldd	r24, Y+5	; 0x05
    5276:	48 2f       	mov	r20, r24
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	6b e0       	ldi	r22, 0x0B	; 11
    527c:	64 9f       	mul	r22, r20
    527e:	c0 01       	movw	r24, r0
    5280:	65 9f       	mul	r22, r21
    5282:	90 0d       	add	r25, r0
    5284:	11 24       	eor	r1, r1
    5286:	8e 58       	subi	r24, 0x8E	; 142
    5288:	98 4e       	sbci	r25, 0xE8	; 232
    528a:	28 17       	cp	r18, r24
    528c:	39 07       	cpc	r19, r25
    528e:	49 f5       	brne	.+82     	; 0x52e2 <vTaskPriorityDisinheritAfterTimeout+0x144>
    5290:	8a 81       	ldd	r24, Y+2	; 0x02
    5292:	9b 81       	ldd	r25, Y+3	; 0x03
    5294:	02 96       	adiw	r24, 0x02	; 2
    5296:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    529a:	8a 81       	ldd	r24, Y+2	; 0x02
    529c:	9b 81       	ldd	r25, Y+3	; 0x03
    529e:	fc 01       	movw	r30, r24
    52a0:	92 8d       	ldd	r25, Z+26	; 0x1a
    52a2:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    52a6:	89 17       	cp	r24, r25
    52a8:	30 f4       	brcc	.+12     	; 0x52b6 <vTaskPriorityDisinheritAfterTimeout+0x118>
    52aa:	8a 81       	ldd	r24, Y+2	; 0x02
    52ac:	9b 81       	ldd	r25, Y+3	; 0x03
    52ae:	fc 01       	movw	r30, r24
    52b0:	82 8d       	ldd	r24, Z+26	; 0x1a
    52b2:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    52b6:	8a 81       	ldd	r24, Y+2	; 0x02
    52b8:	9b 81       	ldd	r25, Y+3	; 0x03
    52ba:	ac 01       	movw	r20, r24
    52bc:	4e 5f       	subi	r20, 0xFE	; 254
    52be:	5f 4f       	sbci	r21, 0xFF	; 255
    52c0:	8a 81       	ldd	r24, Y+2	; 0x02
    52c2:	9b 81       	ldd	r25, Y+3	; 0x03
    52c4:	fc 01       	movw	r30, r24
    52c6:	82 8d       	ldd	r24, Z+26	; 0x1a
    52c8:	28 2f       	mov	r18, r24
    52ca:	30 e0       	ldi	r19, 0x00	; 0
    52cc:	6b e0       	ldi	r22, 0x0B	; 11
    52ce:	62 9f       	mul	r22, r18
    52d0:	c0 01       	movw	r24, r0
    52d2:	63 9f       	mul	r22, r19
    52d4:	90 0d       	add	r25, r0
    52d6:	11 24       	eor	r1, r1
    52d8:	8e 58       	subi	r24, 0x8E	; 142
    52da:	98 4e       	sbci	r25, 0xE8	; 232
    52dc:	ba 01       	movw	r22, r20
    52de:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    52e2:	00 00       	nop
    52e4:	28 96       	adiw	r28, 0x08	; 8
    52e6:	0f b6       	in	r0, 0x3f	; 63
    52e8:	f8 94       	cli
    52ea:	de bf       	out	0x3e, r29	; 62
    52ec:	0f be       	out	0x3f, r0	; 63
    52ee:	cd bf       	out	0x3d, r28	; 61
    52f0:	df 91       	pop	r29
    52f2:	cf 91       	pop	r28
    52f4:	1f 91       	pop	r17
    52f6:	0f 91       	pop	r16
    52f8:	ff 90       	pop	r15
    52fa:	ef 90       	pop	r14
    52fc:	08 95       	ret

000052fe <uxTaskResetEventItemValue>:
    52fe:	ef 92       	push	r14
    5300:	ff 92       	push	r15
    5302:	0f 93       	push	r16
    5304:	1f 93       	push	r17
    5306:	cf 93       	push	r28
    5308:	df 93       	push	r29
    530a:	00 d0       	rcall	.+0      	; 0x530c <uxTaskResetEventItemValue+0xe>
    530c:	1f 92       	push	r1
    530e:	cd b7       	in	r28, 0x3d	; 61
    5310:	de b7       	in	r29, 0x3e	; 62
    5312:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5316:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    531a:	fc 01       	movw	r30, r24
    531c:	86 85       	ldd	r24, Z+14	; 0x0e
    531e:	97 85       	ldd	r25, Z+15	; 0x0f
    5320:	a0 89       	ldd	r26, Z+16	; 0x10
    5322:	b1 89       	ldd	r27, Z+17	; 0x11
    5324:	89 83       	std	Y+1, r24	; 0x01
    5326:	9a 83       	std	Y+2, r25	; 0x02
    5328:	ab 83       	std	Y+3, r26	; 0x03
    532a:	bc 83       	std	Y+4, r27	; 0x04
    532c:	60 91 70 17 	lds	r22, 0x1770	; 0x801770 <pxCurrentTCB>
    5330:	70 91 71 17 	lds	r23, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5334:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5338:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    533c:	fc 01       	movw	r30, r24
    533e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5340:	88 2f       	mov	r24, r24
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	a0 e0       	ldi	r26, 0x00	; 0
    5346:	b0 e0       	ldi	r27, 0x00	; 0
    5348:	24 e0       	ldi	r18, 0x04	; 4
    534a:	30 e0       	ldi	r19, 0x00	; 0
    534c:	40 e0       	ldi	r20, 0x00	; 0
    534e:	50 e0       	ldi	r21, 0x00	; 0
    5350:	79 01       	movw	r14, r18
    5352:	8a 01       	movw	r16, r20
    5354:	e8 1a       	sub	r14, r24
    5356:	f9 0a       	sbc	r15, r25
    5358:	0a 0b       	sbc	r16, r26
    535a:	1b 0b       	sbc	r17, r27
    535c:	d8 01       	movw	r26, r16
    535e:	c7 01       	movw	r24, r14
    5360:	fb 01       	movw	r30, r22
    5362:	86 87       	std	Z+14, r24	; 0x0e
    5364:	97 87       	std	Z+15, r25	; 0x0f
    5366:	a0 8b       	std	Z+16, r26	; 0x10
    5368:	b1 8b       	std	Z+17, r27	; 0x11
    536a:	89 81       	ldd	r24, Y+1	; 0x01
    536c:	9a 81       	ldd	r25, Y+2	; 0x02
    536e:	ab 81       	ldd	r26, Y+3	; 0x03
    5370:	bc 81       	ldd	r27, Y+4	; 0x04
    5372:	bc 01       	movw	r22, r24
    5374:	cd 01       	movw	r24, r26
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	df 91       	pop	r29
    5380:	cf 91       	pop	r28
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	ff 90       	pop	r15
    5388:	ef 90       	pop	r14
    538a:	08 95       	ret

0000538c <pvTaskIncrementMutexHeldCount>:
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    5390:	cd b7       	in	r28, 0x3d	; 61
    5392:	de b7       	in	r29, 0x3e	; 62
    5394:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5398:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    539c:	89 2b       	or	r24, r25
    539e:	49 f0       	breq	.+18     	; 0x53b2 <pvTaskIncrementMutexHeldCount+0x26>
    53a0:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    53a4:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    53a8:	fc 01       	movw	r30, r24
    53aa:	20 a5       	ldd	r18, Z+40	; 0x28
    53ac:	2f 5f       	subi	r18, 0xFF	; 255
    53ae:	fc 01       	movw	r30, r24
    53b0:	20 a7       	std	Z+40, r18	; 0x28
    53b2:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    53b6:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    53ba:	df 91       	pop	r29
    53bc:	cf 91       	pop	r28
    53be:	08 95       	ret

000053c0 <xTaskNotifyWait>:
    53c0:	cf 92       	push	r12
    53c2:	df 92       	push	r13
    53c4:	ef 92       	push	r14
    53c6:	ff 92       	push	r15
    53c8:	0f 93       	push	r16
    53ca:	1f 93       	push	r17
    53cc:	cf 93       	push	r28
    53ce:	df 93       	push	r29
    53d0:	cd b7       	in	r28, 0x3d	; 61
    53d2:	de b7       	in	r29, 0x3e	; 62
    53d4:	2f 97       	sbiw	r28, 0x0f	; 15
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	cd bf       	out	0x3d, r28	; 61
    53e0:	6a 83       	std	Y+2, r22	; 0x02
    53e2:	7b 83       	std	Y+3, r23	; 0x03
    53e4:	8c 83       	std	Y+4, r24	; 0x04
    53e6:	9d 83       	std	Y+5, r25	; 0x05
    53e8:	2e 83       	std	Y+6, r18	; 0x06
    53ea:	3f 83       	std	Y+7, r19	; 0x07
    53ec:	48 87       	std	Y+8, r20	; 0x08
    53ee:	59 87       	std	Y+9, r21	; 0x09
    53f0:	1b 87       	std	Y+11, r17	; 0x0b
    53f2:	0a 87       	std	Y+10, r16	; 0x0a
    53f4:	cc 86       	std	Y+12, r12	; 0x0c
    53f6:	dd 86       	std	Y+13, r13	; 0x0d
    53f8:	ee 86       	std	Y+14, r14	; 0x0e
    53fa:	ff 86       	std	Y+15, r15	; 0x0f
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	0f 92       	push	r0
    5402:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5406:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    540a:	fc 01       	movw	r30, r24
    540c:	87 a5       	ldd	r24, Z+47	; 0x2f
    540e:	82 30       	cpi	r24, 0x02	; 2
    5410:	99 f1       	breq	.+102    	; 0x5478 <xTaskNotifyWait+0xb8>
    5412:	60 91 70 17 	lds	r22, 0x1770	; 0x801770 <pxCurrentTCB>
    5416:	70 91 71 17 	lds	r23, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    541a:	fb 01       	movw	r30, r22
    541c:	23 a5       	ldd	r18, Z+43	; 0x2b
    541e:	34 a5       	ldd	r19, Z+44	; 0x2c
    5420:	45 a5       	ldd	r20, Z+45	; 0x2d
    5422:	56 a5       	ldd	r21, Z+46	; 0x2e
    5424:	8a 81       	ldd	r24, Y+2	; 0x02
    5426:	9b 81       	ldd	r25, Y+3	; 0x03
    5428:	ac 81       	ldd	r26, Y+4	; 0x04
    542a:	bd 81       	ldd	r27, Y+5	; 0x05
    542c:	80 95       	com	r24
    542e:	90 95       	com	r25
    5430:	a0 95       	com	r26
    5432:	b0 95       	com	r27
    5434:	82 23       	and	r24, r18
    5436:	93 23       	and	r25, r19
    5438:	a4 23       	and	r26, r20
    543a:	b5 23       	and	r27, r21
    543c:	fb 01       	movw	r30, r22
    543e:	83 a7       	std	Z+43, r24	; 0x2b
    5440:	94 a7       	std	Z+44, r25	; 0x2c
    5442:	a5 a7       	std	Z+45, r26	; 0x2d
    5444:	b6 a7       	std	Z+46, r27	; 0x2e
    5446:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    544a:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    544e:	21 e0       	ldi	r18, 0x01	; 1
    5450:	fc 01       	movw	r30, r24
    5452:	27 a7       	std	Z+47, r18	; 0x2f
    5454:	8c 85       	ldd	r24, Y+12	; 0x0c
    5456:	9d 85       	ldd	r25, Y+13	; 0x0d
    5458:	ae 85       	ldd	r26, Y+14	; 0x0e
    545a:	bf 85       	ldd	r27, Y+15	; 0x0f
    545c:	89 2b       	or	r24, r25
    545e:	8a 2b       	or	r24, r26
    5460:	8b 2b       	or	r24, r27
    5462:	51 f0       	breq	.+20     	; 0x5478 <xTaskNotifyWait+0xb8>
    5464:	8c 85       	ldd	r24, Y+12	; 0x0c
    5466:	9d 85       	ldd	r25, Y+13	; 0x0d
    5468:	ae 85       	ldd	r26, Y+14	; 0x0e
    546a:	bf 85       	ldd	r27, Y+15	; 0x0f
    546c:	41 e0       	ldi	r20, 0x01	; 1
    546e:	bc 01       	movw	r22, r24
    5470:	cd 01       	movw	r24, r26
    5472:	61 d2       	rcall	.+1218   	; 0x5936 <prvAddCurrentTaskToDelayedList>
    5474:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    5478:	0f 90       	pop	r0
    547a:	0f be       	out	0x3f, r0	; 63
    547c:	0f b6       	in	r0, 0x3f	; 63
    547e:	f8 94       	cli
    5480:	0f 92       	push	r0
    5482:	8a 85       	ldd	r24, Y+10	; 0x0a
    5484:	9b 85       	ldd	r25, Y+11	; 0x0b
    5486:	89 2b       	or	r24, r25
    5488:	81 f0       	breq	.+32     	; 0x54aa <xTaskNotifyWait+0xea>
    548a:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    548e:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5492:	fc 01       	movw	r30, r24
    5494:	83 a5       	ldd	r24, Z+43	; 0x2b
    5496:	94 a5       	ldd	r25, Z+44	; 0x2c
    5498:	a5 a5       	ldd	r26, Z+45	; 0x2d
    549a:	b6 a5       	ldd	r27, Z+46	; 0x2e
    549c:	2a 85       	ldd	r18, Y+10	; 0x0a
    549e:	3b 85       	ldd	r19, Y+11	; 0x0b
    54a0:	f9 01       	movw	r30, r18
    54a2:	80 83       	st	Z, r24
    54a4:	91 83       	std	Z+1, r25	; 0x01
    54a6:	a2 83       	std	Z+2, r26	; 0x02
    54a8:	b3 83       	std	Z+3, r27	; 0x03
    54aa:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    54ae:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    54b2:	fc 01       	movw	r30, r24
    54b4:	87 a5       	ldd	r24, Z+47	; 0x2f
    54b6:	82 30       	cpi	r24, 0x02	; 2
    54b8:	11 f0       	breq	.+4      	; 0x54be <xTaskNotifyWait+0xfe>
    54ba:	19 82       	std	Y+1, r1	; 0x01
    54bc:	1c c0       	rjmp	.+56     	; 0x54f6 <xTaskNotifyWait+0x136>
    54be:	60 91 70 17 	lds	r22, 0x1770	; 0x801770 <pxCurrentTCB>
    54c2:	70 91 71 17 	lds	r23, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    54c6:	fb 01       	movw	r30, r22
    54c8:	23 a5       	ldd	r18, Z+43	; 0x2b
    54ca:	34 a5       	ldd	r19, Z+44	; 0x2c
    54cc:	45 a5       	ldd	r20, Z+45	; 0x2d
    54ce:	56 a5       	ldd	r21, Z+46	; 0x2e
    54d0:	8e 81       	ldd	r24, Y+6	; 0x06
    54d2:	9f 81       	ldd	r25, Y+7	; 0x07
    54d4:	a8 85       	ldd	r26, Y+8	; 0x08
    54d6:	b9 85       	ldd	r27, Y+9	; 0x09
    54d8:	80 95       	com	r24
    54da:	90 95       	com	r25
    54dc:	a0 95       	com	r26
    54de:	b0 95       	com	r27
    54e0:	82 23       	and	r24, r18
    54e2:	93 23       	and	r25, r19
    54e4:	a4 23       	and	r26, r20
    54e6:	b5 23       	and	r27, r21
    54e8:	fb 01       	movw	r30, r22
    54ea:	83 a7       	std	Z+43, r24	; 0x2b
    54ec:	94 a7       	std	Z+44, r25	; 0x2c
    54ee:	a5 a7       	std	Z+45, r26	; 0x2d
    54f0:	b6 a7       	std	Z+46, r27	; 0x2e
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	89 83       	std	Y+1, r24	; 0x01
    54f6:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    54fa:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    54fe:	fc 01       	movw	r30, r24
    5500:	17 a6       	std	Z+47, r1	; 0x2f
    5502:	0f 90       	pop	r0
    5504:	0f be       	out	0x3f, r0	; 63
    5506:	89 81       	ldd	r24, Y+1	; 0x01
    5508:	2f 96       	adiw	r28, 0x0f	; 15
    550a:	0f b6       	in	r0, 0x3f	; 63
    550c:	f8 94       	cli
    550e:	de bf       	out	0x3e, r29	; 62
    5510:	0f be       	out	0x3f, r0	; 63
    5512:	cd bf       	out	0x3d, r28	; 61
    5514:	df 91       	pop	r29
    5516:	cf 91       	pop	r28
    5518:	1f 91       	pop	r17
    551a:	0f 91       	pop	r16
    551c:	ff 90       	pop	r15
    551e:	ef 90       	pop	r14
    5520:	df 90       	pop	r13
    5522:	cf 90       	pop	r12
    5524:	08 95       	ret

00005526 <xTaskGenericNotify>:
    5526:	0f 93       	push	r16
    5528:	1f 93       	push	r17
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	cd b7       	in	r28, 0x3d	; 61
    5530:	de b7       	in	r29, 0x3e	; 62
    5532:	2d 97       	sbiw	r28, 0x0d	; 13
    5534:	0f b6       	in	r0, 0x3f	; 63
    5536:	f8 94       	cli
    5538:	de bf       	out	0x3e, r29	; 62
    553a:	0f be       	out	0x3f, r0	; 63
    553c:	cd bf       	out	0x3d, r28	; 61
    553e:	9e 83       	std	Y+6, r25	; 0x06
    5540:	8d 83       	std	Y+5, r24	; 0x05
    5542:	4f 83       	std	Y+7, r20	; 0x07
    5544:	58 87       	std	Y+8, r21	; 0x08
    5546:	69 87       	std	Y+9, r22	; 0x09
    5548:	7a 87       	std	Y+10, r23	; 0x0a
    554a:	2b 87       	std	Y+11, r18	; 0x0b
    554c:	1d 87       	std	Y+13, r17	; 0x0d
    554e:	0c 87       	std	Y+12, r16	; 0x0c
    5550:	81 e0       	ldi	r24, 0x01	; 1
    5552:	89 83       	std	Y+1, r24	; 0x01
    5554:	8d 81       	ldd	r24, Y+5	; 0x05
    5556:	9e 81       	ldd	r25, Y+6	; 0x06
    5558:	9b 83       	std	Y+3, r25	; 0x03
    555a:	8a 83       	std	Y+2, r24	; 0x02
    555c:	0f b6       	in	r0, 0x3f	; 63
    555e:	f8 94       	cli
    5560:	0f 92       	push	r0
    5562:	8c 85       	ldd	r24, Y+12	; 0x0c
    5564:	9d 85       	ldd	r25, Y+13	; 0x0d
    5566:	89 2b       	or	r24, r25
    5568:	71 f0       	breq	.+28     	; 0x5586 <xTaskGenericNotify+0x60>
    556a:	8a 81       	ldd	r24, Y+2	; 0x02
    556c:	9b 81       	ldd	r25, Y+3	; 0x03
    556e:	fc 01       	movw	r30, r24
    5570:	83 a5       	ldd	r24, Z+43	; 0x2b
    5572:	94 a5       	ldd	r25, Z+44	; 0x2c
    5574:	a5 a5       	ldd	r26, Z+45	; 0x2d
    5576:	b6 a5       	ldd	r27, Z+46	; 0x2e
    5578:	2c 85       	ldd	r18, Y+12	; 0x0c
    557a:	3d 85       	ldd	r19, Y+13	; 0x0d
    557c:	f9 01       	movw	r30, r18
    557e:	80 83       	st	Z, r24
    5580:	91 83       	std	Z+1, r25	; 0x01
    5582:	a2 83       	std	Z+2, r26	; 0x02
    5584:	b3 83       	std	Z+3, r27	; 0x03
    5586:	8a 81       	ldd	r24, Y+2	; 0x02
    5588:	9b 81       	ldd	r25, Y+3	; 0x03
    558a:	fc 01       	movw	r30, r24
    558c:	87 a5       	ldd	r24, Z+47	; 0x2f
    558e:	8c 83       	std	Y+4, r24	; 0x04
    5590:	8a 81       	ldd	r24, Y+2	; 0x02
    5592:	9b 81       	ldd	r25, Y+3	; 0x03
    5594:	22 e0       	ldi	r18, 0x02	; 2
    5596:	fc 01       	movw	r30, r24
    5598:	27 a7       	std	Z+47, r18	; 0x2f
    559a:	8b 85       	ldd	r24, Y+11	; 0x0b
    559c:	88 2f       	mov	r24, r24
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	82 30       	cpi	r24, 0x02	; 2
    55a2:	91 05       	cpc	r25, r1
    55a4:	31 f1       	breq	.+76     	; 0x55f2 <xTaskGenericNotify+0xcc>
    55a6:	83 30       	cpi	r24, 0x03	; 3
    55a8:	91 05       	cpc	r25, r1
    55aa:	34 f4       	brge	.+12     	; 0x55b8 <xTaskGenericNotify+0x92>
    55ac:	00 97       	sbiw	r24, 0x00	; 0
    55ae:	09 f4       	brne	.+2      	; 0x55b2 <xTaskGenericNotify+0x8c>
    55b0:	4f c0       	rjmp	.+158    	; 0x5650 <xTaskGenericNotify+0x12a>
    55b2:	01 97       	sbiw	r24, 0x01	; 1
    55b4:	39 f0       	breq	.+14     	; 0x55c4 <xTaskGenericNotify+0x9e>
    55b6:	4d c0       	rjmp	.+154    	; 0x5652 <xTaskGenericNotify+0x12c>
    55b8:	83 30       	cpi	r24, 0x03	; 3
    55ba:	91 05       	cpc	r25, r1
    55bc:	61 f1       	breq	.+88     	; 0x5616 <xTaskGenericNotify+0xf0>
    55be:	04 97       	sbiw	r24, 0x04	; 4
    55c0:	b1 f1       	breq	.+108    	; 0x562e <xTaskGenericNotify+0x108>
    55c2:	47 c0       	rjmp	.+142    	; 0x5652 <xTaskGenericNotify+0x12c>
    55c4:	8a 81       	ldd	r24, Y+2	; 0x02
    55c6:	9b 81       	ldd	r25, Y+3	; 0x03
    55c8:	fc 01       	movw	r30, r24
    55ca:	23 a5       	ldd	r18, Z+43	; 0x2b
    55cc:	34 a5       	ldd	r19, Z+44	; 0x2c
    55ce:	45 a5       	ldd	r20, Z+45	; 0x2d
    55d0:	56 a5       	ldd	r21, Z+46	; 0x2e
    55d2:	8f 81       	ldd	r24, Y+7	; 0x07
    55d4:	98 85       	ldd	r25, Y+8	; 0x08
    55d6:	a9 85       	ldd	r26, Y+9	; 0x09
    55d8:	ba 85       	ldd	r27, Y+10	; 0x0a
    55da:	82 2b       	or	r24, r18
    55dc:	93 2b       	or	r25, r19
    55de:	a4 2b       	or	r26, r20
    55e0:	b5 2b       	or	r27, r21
    55e2:	2a 81       	ldd	r18, Y+2	; 0x02
    55e4:	3b 81       	ldd	r19, Y+3	; 0x03
    55e6:	f9 01       	movw	r30, r18
    55e8:	83 a7       	std	Z+43, r24	; 0x2b
    55ea:	94 a7       	std	Z+44, r25	; 0x2c
    55ec:	a5 a7       	std	Z+45, r26	; 0x2d
    55ee:	b6 a7       	std	Z+46, r27	; 0x2e
    55f0:	30 c0       	rjmp	.+96     	; 0x5652 <xTaskGenericNotify+0x12c>
    55f2:	8a 81       	ldd	r24, Y+2	; 0x02
    55f4:	9b 81       	ldd	r25, Y+3	; 0x03
    55f6:	fc 01       	movw	r30, r24
    55f8:	83 a5       	ldd	r24, Z+43	; 0x2b
    55fa:	94 a5       	ldd	r25, Z+44	; 0x2c
    55fc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    55fe:	b6 a5       	ldd	r27, Z+46	; 0x2e
    5600:	01 96       	adiw	r24, 0x01	; 1
    5602:	a1 1d       	adc	r26, r1
    5604:	b1 1d       	adc	r27, r1
    5606:	2a 81       	ldd	r18, Y+2	; 0x02
    5608:	3b 81       	ldd	r19, Y+3	; 0x03
    560a:	f9 01       	movw	r30, r18
    560c:	83 a7       	std	Z+43, r24	; 0x2b
    560e:	94 a7       	std	Z+44, r25	; 0x2c
    5610:	a5 a7       	std	Z+45, r26	; 0x2d
    5612:	b6 a7       	std	Z+46, r27	; 0x2e
    5614:	1e c0       	rjmp	.+60     	; 0x5652 <xTaskGenericNotify+0x12c>
    5616:	2a 81       	ldd	r18, Y+2	; 0x02
    5618:	3b 81       	ldd	r19, Y+3	; 0x03
    561a:	8f 81       	ldd	r24, Y+7	; 0x07
    561c:	98 85       	ldd	r25, Y+8	; 0x08
    561e:	a9 85       	ldd	r26, Y+9	; 0x09
    5620:	ba 85       	ldd	r27, Y+10	; 0x0a
    5622:	f9 01       	movw	r30, r18
    5624:	83 a7       	std	Z+43, r24	; 0x2b
    5626:	94 a7       	std	Z+44, r25	; 0x2c
    5628:	a5 a7       	std	Z+45, r26	; 0x2d
    562a:	b6 a7       	std	Z+46, r27	; 0x2e
    562c:	12 c0       	rjmp	.+36     	; 0x5652 <xTaskGenericNotify+0x12c>
    562e:	8c 81       	ldd	r24, Y+4	; 0x04
    5630:	82 30       	cpi	r24, 0x02	; 2
    5632:	61 f0       	breq	.+24     	; 0x564c <xTaskGenericNotify+0x126>
    5634:	2a 81       	ldd	r18, Y+2	; 0x02
    5636:	3b 81       	ldd	r19, Y+3	; 0x03
    5638:	8f 81       	ldd	r24, Y+7	; 0x07
    563a:	98 85       	ldd	r25, Y+8	; 0x08
    563c:	a9 85       	ldd	r26, Y+9	; 0x09
    563e:	ba 85       	ldd	r27, Y+10	; 0x0a
    5640:	f9 01       	movw	r30, r18
    5642:	83 a7       	std	Z+43, r24	; 0x2b
    5644:	94 a7       	std	Z+44, r25	; 0x2c
    5646:	a5 a7       	std	Z+45, r26	; 0x2d
    5648:	b6 a7       	std	Z+46, r27	; 0x2e
    564a:	03 c0       	rjmp	.+6      	; 0x5652 <xTaskGenericNotify+0x12c>
    564c:	19 82       	std	Y+1, r1	; 0x01
    564e:	01 c0       	rjmp	.+2      	; 0x5652 <xTaskGenericNotify+0x12c>
    5650:	00 00       	nop
    5652:	8c 81       	ldd	r24, Y+4	; 0x04
    5654:	81 30       	cpi	r24, 0x01	; 1
    5656:	b9 f5       	brne	.+110    	; 0x56c6 <xTaskGenericNotify+0x1a0>
    5658:	8a 81       	ldd	r24, Y+2	; 0x02
    565a:	9b 81       	ldd	r25, Y+3	; 0x03
    565c:	02 96       	adiw	r24, 0x02	; 2
    565e:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    5662:	8a 81       	ldd	r24, Y+2	; 0x02
    5664:	9b 81       	ldd	r25, Y+3	; 0x03
    5666:	fc 01       	movw	r30, r24
    5668:	92 8d       	ldd	r25, Z+26	; 0x1a
    566a:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    566e:	89 17       	cp	r24, r25
    5670:	30 f4       	brcc	.+12     	; 0x567e <xTaskGenericNotify+0x158>
    5672:	8a 81       	ldd	r24, Y+2	; 0x02
    5674:	9b 81       	ldd	r25, Y+3	; 0x03
    5676:	fc 01       	movw	r30, r24
    5678:	82 8d       	ldd	r24, Z+26	; 0x1a
    567a:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    567e:	8a 81       	ldd	r24, Y+2	; 0x02
    5680:	9b 81       	ldd	r25, Y+3	; 0x03
    5682:	ac 01       	movw	r20, r24
    5684:	4e 5f       	subi	r20, 0xFE	; 254
    5686:	5f 4f       	sbci	r21, 0xFF	; 255
    5688:	8a 81       	ldd	r24, Y+2	; 0x02
    568a:	9b 81       	ldd	r25, Y+3	; 0x03
    568c:	fc 01       	movw	r30, r24
    568e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5690:	28 2f       	mov	r18, r24
    5692:	30 e0       	ldi	r19, 0x00	; 0
    5694:	6b e0       	ldi	r22, 0x0B	; 11
    5696:	62 9f       	mul	r22, r18
    5698:	c0 01       	movw	r24, r0
    569a:	63 9f       	mul	r22, r19
    569c:	90 0d       	add	r25, r0
    569e:	11 24       	eor	r1, r1
    56a0:	8e 58       	subi	r24, 0x8E	; 142
    56a2:	98 4e       	sbci	r25, 0xE8	; 232
    56a4:	ba 01       	movw	r22, r20
    56a6:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    56aa:	8a 81       	ldd	r24, Y+2	; 0x02
    56ac:	9b 81       	ldd	r25, Y+3	; 0x03
    56ae:	fc 01       	movw	r30, r24
    56b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    56b2:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    56b6:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    56ba:	fc 01       	movw	r30, r24
    56bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    56be:	82 17       	cp	r24, r18
    56c0:	10 f4       	brcc	.+4      	; 0x56c6 <xTaskGenericNotify+0x1a0>
    56c2:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    56c6:	0f 90       	pop	r0
    56c8:	0f be       	out	0x3f, r0	; 63
    56ca:	89 81       	ldd	r24, Y+1	; 0x01
    56cc:	2d 96       	adiw	r28, 0x0d	; 13
    56ce:	0f b6       	in	r0, 0x3f	; 63
    56d0:	f8 94       	cli
    56d2:	de bf       	out	0x3e, r29	; 62
    56d4:	0f be       	out	0x3f, r0	; 63
    56d6:	cd bf       	out	0x3d, r28	; 61
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	1f 91       	pop	r17
    56de:	0f 91       	pop	r16
    56e0:	08 95       	ret

000056e2 <xTaskGenericNotifyFromISR>:
    56e2:	ef 92       	push	r14
    56e4:	ff 92       	push	r15
    56e6:	0f 93       	push	r16
    56e8:	1f 93       	push	r17
    56ea:	cf 93       	push	r28
    56ec:	df 93       	push	r29
    56ee:	cd b7       	in	r28, 0x3d	; 61
    56f0:	de b7       	in	r29, 0x3e	; 62
    56f2:	60 97       	sbiw	r28, 0x10	; 16
    56f4:	0f b6       	in	r0, 0x3f	; 63
    56f6:	f8 94       	cli
    56f8:	de bf       	out	0x3e, r29	; 62
    56fa:	0f be       	out	0x3f, r0	; 63
    56fc:	cd bf       	out	0x3d, r28	; 61
    56fe:	9f 83       	std	Y+7, r25	; 0x07
    5700:	8e 83       	std	Y+6, r24	; 0x06
    5702:	48 87       	std	Y+8, r20	; 0x08
    5704:	59 87       	std	Y+9, r21	; 0x09
    5706:	6a 87       	std	Y+10, r22	; 0x0a
    5708:	7b 87       	std	Y+11, r23	; 0x0b
    570a:	2c 87       	std	Y+12, r18	; 0x0c
    570c:	1e 87       	std	Y+14, r17	; 0x0e
    570e:	0d 87       	std	Y+13, r16	; 0x0d
    5710:	f8 8a       	std	Y+16, r15	; 0x10
    5712:	ef 86       	std	Y+15, r14	; 0x0f
    5714:	81 e0       	ldi	r24, 0x01	; 1
    5716:	89 83       	std	Y+1, r24	; 0x01
    5718:	8e 81       	ldd	r24, Y+6	; 0x06
    571a:	9f 81       	ldd	r25, Y+7	; 0x07
    571c:	9b 83       	std	Y+3, r25	; 0x03
    571e:	8a 83       	std	Y+2, r24	; 0x02
    5720:	1c 82       	std	Y+4, r1	; 0x04
    5722:	8d 85       	ldd	r24, Y+13	; 0x0d
    5724:	9e 85       	ldd	r25, Y+14	; 0x0e
    5726:	89 2b       	or	r24, r25
    5728:	71 f0       	breq	.+28     	; 0x5746 <xTaskGenericNotifyFromISR+0x64>
    572a:	8a 81       	ldd	r24, Y+2	; 0x02
    572c:	9b 81       	ldd	r25, Y+3	; 0x03
    572e:	fc 01       	movw	r30, r24
    5730:	83 a5       	ldd	r24, Z+43	; 0x2b
    5732:	94 a5       	ldd	r25, Z+44	; 0x2c
    5734:	a5 a5       	ldd	r26, Z+45	; 0x2d
    5736:	b6 a5       	ldd	r27, Z+46	; 0x2e
    5738:	2d 85       	ldd	r18, Y+13	; 0x0d
    573a:	3e 85       	ldd	r19, Y+14	; 0x0e
    573c:	f9 01       	movw	r30, r18
    573e:	80 83       	st	Z, r24
    5740:	91 83       	std	Z+1, r25	; 0x01
    5742:	a2 83       	std	Z+2, r26	; 0x02
    5744:	b3 83       	std	Z+3, r27	; 0x03
    5746:	8a 81       	ldd	r24, Y+2	; 0x02
    5748:	9b 81       	ldd	r25, Y+3	; 0x03
    574a:	fc 01       	movw	r30, r24
    574c:	87 a5       	ldd	r24, Z+47	; 0x2f
    574e:	8d 83       	std	Y+5, r24	; 0x05
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	9b 81       	ldd	r25, Y+3	; 0x03
    5754:	22 e0       	ldi	r18, 0x02	; 2
    5756:	fc 01       	movw	r30, r24
    5758:	27 a7       	std	Z+47, r18	; 0x2f
    575a:	8c 85       	ldd	r24, Y+12	; 0x0c
    575c:	88 2f       	mov	r24, r24
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	82 30       	cpi	r24, 0x02	; 2
    5762:	91 05       	cpc	r25, r1
    5764:	31 f1       	breq	.+76     	; 0x57b2 <xTaskGenericNotifyFromISR+0xd0>
    5766:	83 30       	cpi	r24, 0x03	; 3
    5768:	91 05       	cpc	r25, r1
    576a:	34 f4       	brge	.+12     	; 0x5778 <xTaskGenericNotifyFromISR+0x96>
    576c:	00 97       	sbiw	r24, 0x00	; 0
    576e:	09 f4       	brne	.+2      	; 0x5772 <xTaskGenericNotifyFromISR+0x90>
    5770:	4f c0       	rjmp	.+158    	; 0x5810 <xTaskGenericNotifyFromISR+0x12e>
    5772:	01 97       	sbiw	r24, 0x01	; 1
    5774:	39 f0       	breq	.+14     	; 0x5784 <xTaskGenericNotifyFromISR+0xa2>
    5776:	4d c0       	rjmp	.+154    	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    5778:	83 30       	cpi	r24, 0x03	; 3
    577a:	91 05       	cpc	r25, r1
    577c:	61 f1       	breq	.+88     	; 0x57d6 <xTaskGenericNotifyFromISR+0xf4>
    577e:	04 97       	sbiw	r24, 0x04	; 4
    5780:	b1 f1       	breq	.+108    	; 0x57ee <xTaskGenericNotifyFromISR+0x10c>
    5782:	47 c0       	rjmp	.+142    	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    5784:	8a 81       	ldd	r24, Y+2	; 0x02
    5786:	9b 81       	ldd	r25, Y+3	; 0x03
    5788:	fc 01       	movw	r30, r24
    578a:	23 a5       	ldd	r18, Z+43	; 0x2b
    578c:	34 a5       	ldd	r19, Z+44	; 0x2c
    578e:	45 a5       	ldd	r20, Z+45	; 0x2d
    5790:	56 a5       	ldd	r21, Z+46	; 0x2e
    5792:	88 85       	ldd	r24, Y+8	; 0x08
    5794:	99 85       	ldd	r25, Y+9	; 0x09
    5796:	aa 85       	ldd	r26, Y+10	; 0x0a
    5798:	bb 85       	ldd	r27, Y+11	; 0x0b
    579a:	82 2b       	or	r24, r18
    579c:	93 2b       	or	r25, r19
    579e:	a4 2b       	or	r26, r20
    57a0:	b5 2b       	or	r27, r21
    57a2:	2a 81       	ldd	r18, Y+2	; 0x02
    57a4:	3b 81       	ldd	r19, Y+3	; 0x03
    57a6:	f9 01       	movw	r30, r18
    57a8:	83 a7       	std	Z+43, r24	; 0x2b
    57aa:	94 a7       	std	Z+44, r25	; 0x2c
    57ac:	a5 a7       	std	Z+45, r26	; 0x2d
    57ae:	b6 a7       	std	Z+46, r27	; 0x2e
    57b0:	30 c0       	rjmp	.+96     	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    57b2:	8a 81       	ldd	r24, Y+2	; 0x02
    57b4:	9b 81       	ldd	r25, Y+3	; 0x03
    57b6:	fc 01       	movw	r30, r24
    57b8:	83 a5       	ldd	r24, Z+43	; 0x2b
    57ba:	94 a5       	ldd	r25, Z+44	; 0x2c
    57bc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    57be:	b6 a5       	ldd	r27, Z+46	; 0x2e
    57c0:	01 96       	adiw	r24, 0x01	; 1
    57c2:	a1 1d       	adc	r26, r1
    57c4:	b1 1d       	adc	r27, r1
    57c6:	2a 81       	ldd	r18, Y+2	; 0x02
    57c8:	3b 81       	ldd	r19, Y+3	; 0x03
    57ca:	f9 01       	movw	r30, r18
    57cc:	83 a7       	std	Z+43, r24	; 0x2b
    57ce:	94 a7       	std	Z+44, r25	; 0x2c
    57d0:	a5 a7       	std	Z+45, r26	; 0x2d
    57d2:	b6 a7       	std	Z+46, r27	; 0x2e
    57d4:	1e c0       	rjmp	.+60     	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    57d6:	2a 81       	ldd	r18, Y+2	; 0x02
    57d8:	3b 81       	ldd	r19, Y+3	; 0x03
    57da:	88 85       	ldd	r24, Y+8	; 0x08
    57dc:	99 85       	ldd	r25, Y+9	; 0x09
    57de:	aa 85       	ldd	r26, Y+10	; 0x0a
    57e0:	bb 85       	ldd	r27, Y+11	; 0x0b
    57e2:	f9 01       	movw	r30, r18
    57e4:	83 a7       	std	Z+43, r24	; 0x2b
    57e6:	94 a7       	std	Z+44, r25	; 0x2c
    57e8:	a5 a7       	std	Z+45, r26	; 0x2d
    57ea:	b6 a7       	std	Z+46, r27	; 0x2e
    57ec:	12 c0       	rjmp	.+36     	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    57ee:	8d 81       	ldd	r24, Y+5	; 0x05
    57f0:	82 30       	cpi	r24, 0x02	; 2
    57f2:	61 f0       	breq	.+24     	; 0x580c <xTaskGenericNotifyFromISR+0x12a>
    57f4:	2a 81       	ldd	r18, Y+2	; 0x02
    57f6:	3b 81       	ldd	r19, Y+3	; 0x03
    57f8:	88 85       	ldd	r24, Y+8	; 0x08
    57fa:	99 85       	ldd	r25, Y+9	; 0x09
    57fc:	aa 85       	ldd	r26, Y+10	; 0x0a
    57fe:	bb 85       	ldd	r27, Y+11	; 0x0b
    5800:	f9 01       	movw	r30, r18
    5802:	83 a7       	std	Z+43, r24	; 0x2b
    5804:	94 a7       	std	Z+44, r25	; 0x2c
    5806:	a5 a7       	std	Z+45, r26	; 0x2d
    5808:	b6 a7       	std	Z+46, r27	; 0x2e
    580a:	03 c0       	rjmp	.+6      	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    580c:	19 82       	std	Y+1, r1	; 0x01
    580e:	01 c0       	rjmp	.+2      	; 0x5812 <xTaskGenericNotifyFromISR+0x130>
    5810:	00 00       	nop
    5812:	8d 81       	ldd	r24, Y+5	; 0x05
    5814:	81 30       	cpi	r24, 0x01	; 1
    5816:	09 f0       	breq	.+2      	; 0x581a <xTaskGenericNotifyFromISR+0x138>
    5818:	4e c0       	rjmp	.+156    	; 0x58b6 <xTaskGenericNotifyFromISR+0x1d4>
    581a:	80 91 eb 17 	lds	r24, 0x17EB	; 0x8017eb <uxSchedulerSuspended>
    581e:	88 23       	and	r24, r24
    5820:	51 f5       	brne	.+84     	; 0x5876 <xTaskGenericNotifyFromISR+0x194>
    5822:	8a 81       	ldd	r24, Y+2	; 0x02
    5824:	9b 81       	ldd	r25, Y+3	; 0x03
    5826:	02 96       	adiw	r24, 0x02	; 2
    5828:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    582c:	8a 81       	ldd	r24, Y+2	; 0x02
    582e:	9b 81       	ldd	r25, Y+3	; 0x03
    5830:	fc 01       	movw	r30, r24
    5832:	92 8d       	ldd	r25, Z+26	; 0x1a
    5834:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <uxTopReadyPriority>
    5838:	89 17       	cp	r24, r25
    583a:	30 f4       	brcc	.+12     	; 0x5848 <xTaskGenericNotifyFromISR+0x166>
    583c:	8a 81       	ldd	r24, Y+2	; 0x02
    583e:	9b 81       	ldd	r25, Y+3	; 0x03
    5840:	fc 01       	movw	r30, r24
    5842:	82 8d       	ldd	r24, Z+26	; 0x1a
    5844:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <uxTopReadyPriority>
    5848:	8a 81       	ldd	r24, Y+2	; 0x02
    584a:	9b 81       	ldd	r25, Y+3	; 0x03
    584c:	ac 01       	movw	r20, r24
    584e:	4e 5f       	subi	r20, 0xFE	; 254
    5850:	5f 4f       	sbci	r21, 0xFF	; 255
    5852:	8a 81       	ldd	r24, Y+2	; 0x02
    5854:	9b 81       	ldd	r25, Y+3	; 0x03
    5856:	fc 01       	movw	r30, r24
    5858:	82 8d       	ldd	r24, Z+26	; 0x1a
    585a:	28 2f       	mov	r18, r24
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	6b e0       	ldi	r22, 0x0B	; 11
    5860:	62 9f       	mul	r22, r18
    5862:	c0 01       	movw	r24, r0
    5864:	63 9f       	mul	r22, r19
    5866:	90 0d       	add	r25, r0
    5868:	11 24       	eor	r1, r1
    586a:	8e 58       	subi	r24, 0x8E	; 142
    586c:	98 4e       	sbci	r25, 0xE8	; 232
    586e:	ba 01       	movw	r22, r20
    5870:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    5874:	08 c0       	rjmp	.+16     	; 0x5886 <xTaskGenericNotifyFromISR+0x1a4>
    5876:	8a 81       	ldd	r24, Y+2	; 0x02
    5878:	9b 81       	ldd	r25, Y+3	; 0x03
    587a:	0e 96       	adiw	r24, 0x0e	; 14
    587c:	bc 01       	movw	r22, r24
    587e:	88 eb       	ldi	r24, 0xB8	; 184
    5880:	97 e1       	ldi	r25, 0x17	; 23
    5882:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>
    5886:	8a 81       	ldd	r24, Y+2	; 0x02
    5888:	9b 81       	ldd	r25, Y+3	; 0x03
    588a:	fc 01       	movw	r30, r24
    588c:	22 8d       	ldd	r18, Z+26	; 0x1a
    588e:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5892:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5896:	fc 01       	movw	r30, r24
    5898:	82 8d       	ldd	r24, Z+26	; 0x1a
    589a:	82 17       	cp	r24, r18
    589c:	60 f4       	brcc	.+24     	; 0x58b6 <xTaskGenericNotifyFromISR+0x1d4>
    589e:	8f 85       	ldd	r24, Y+15	; 0x0f
    58a0:	98 89       	ldd	r25, Y+16	; 0x10
    58a2:	89 2b       	or	r24, r25
    58a4:	29 f0       	breq	.+10     	; 0x58b0 <xTaskGenericNotifyFromISR+0x1ce>
    58a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    58a8:	98 89       	ldd	r25, Y+16	; 0x10
    58aa:	21 e0       	ldi	r18, 0x01	; 1
    58ac:	fc 01       	movw	r30, r24
    58ae:	20 83       	st	Z, r18
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	80 93 e2 17 	sts	0x17E2, r24	; 0x8017e2 <xYieldPending>
    58b6:	89 81       	ldd	r24, Y+1	; 0x01
    58b8:	60 96       	adiw	r28, 0x10	; 16
    58ba:	0f b6       	in	r0, 0x3f	; 63
    58bc:	f8 94       	cli
    58be:	de bf       	out	0x3e, r29	; 62
    58c0:	0f be       	out	0x3f, r0	; 63
    58c2:	cd bf       	out	0x3d, r28	; 61
    58c4:	df 91       	pop	r29
    58c6:	cf 91       	pop	r28
    58c8:	1f 91       	pop	r17
    58ca:	0f 91       	pop	r16
    58cc:	ff 90       	pop	r15
    58ce:	ef 90       	pop	r14
    58d0:	08 95       	ret

000058d2 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
    {
    58d2:	cf 93       	push	r28
    58d4:	df 93       	push	r29
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <xTaskNotifyStateClear+0x6>
    58d8:	1f 92       	push	r1
    58da:	1f 92       	push	r1
    58dc:	cd b7       	in	r28, 0x3d	; 61
    58de:	de b7       	in	r29, 0x3e	; 62
    58e0:	9d 83       	std	Y+5, r25	; 0x05
    58e2:	8c 83       	std	Y+4, r24	; 0x04
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    58e4:	8c 81       	ldd	r24, Y+4	; 0x04
    58e6:	9d 81       	ldd	r25, Y+5	; 0x05
    58e8:	89 2b       	or	r24, r25
    58ea:	29 f4       	brne	.+10     	; 0x58f6 <xTaskNotifyStateClear+0x24>
    58ec:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    58f0:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    58f4:	02 c0       	rjmp	.+4      	; 0x58fa <xTaskNotifyStateClear+0x28>
    58f6:	8c 81       	ldd	r24, Y+4	; 0x04
    58f8:	9d 81       	ldd	r25, Y+5	; 0x05
    58fa:	9b 83       	std	Y+3, r25	; 0x03
    58fc:	8a 83       	std	Y+2, r24	; 0x02

        taskENTER_CRITICAL();
    58fe:	0f b6       	in	r0, 0x3f	; 63
    5900:	f8 94       	cli
    5902:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    5904:	8a 81       	ldd	r24, Y+2	; 0x02
    5906:	9b 81       	ldd	r25, Y+3	; 0x03
    5908:	fc 01       	movw	r30, r24
    590a:	87 a5       	ldd	r24, Z+47	; 0x2f
    590c:	82 30       	cpi	r24, 0x02	; 2
    590e:	39 f4       	brne	.+14     	; 0x591e <xTaskNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    5910:	8a 81       	ldd	r24, Y+2	; 0x02
    5912:	9b 81       	ldd	r25, Y+3	; 0x03
    5914:	fc 01       	movw	r30, r24
    5916:	17 a6       	std	Z+47, r1	; 0x2f
                xReturn = pdPASS;
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	89 83       	std	Y+1, r24	; 0x01
    591c:	01 c0       	rjmp	.+2      	; 0x5920 <xTaskNotifyStateClear+0x4e>
            }
            else
            {
                xReturn = pdFAIL;
    591e:	19 82       	std	Y+1, r1	; 0x01
            }
        }
        taskEXIT_CRITICAL();
    5920:	0f 90       	pop	r0
    5922:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    5924:	89 81       	ldd	r24, Y+1	; 0x01
    }
    5926:	0f 90       	pop	r0
    5928:	0f 90       	pop	r0
    592a:	0f 90       	pop	r0
    592c:	0f 90       	pop	r0
    592e:	0f 90       	pop	r0
    5930:	df 91       	pop	r29
    5932:	cf 91       	pop	r28
    5934:	08 95       	ret

00005936 <prvAddCurrentTaskToDelayedList>:
    }
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    5936:	cf 93       	push	r28
    5938:	df 93       	push	r29
    593a:	cd b7       	in	r28, 0x3d	; 61
    593c:	de b7       	in	r29, 0x3e	; 62
    593e:	2d 97       	sbiw	r28, 0x0d	; 13
    5940:	0f b6       	in	r0, 0x3f	; 63
    5942:	f8 94       	cli
    5944:	de bf       	out	0x3e, r29	; 62
    5946:	0f be       	out	0x3f, r0	; 63
    5948:	cd bf       	out	0x3d, r28	; 61
    594a:	69 87       	std	Y+9, r22	; 0x09
    594c:	7a 87       	std	Y+10, r23	; 0x0a
    594e:	8b 87       	std	Y+11, r24	; 0x0b
    5950:	9c 87       	std	Y+12, r25	; 0x0c
    5952:	4d 87       	std	Y+13, r20	; 0x0d
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    5954:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <xTickCount>
    5958:	90 91 dc 17 	lds	r25, 0x17DC	; 0x8017dc <xTickCount+0x1>
    595c:	a0 91 dd 17 	lds	r26, 0x17DD	; 0x8017dd <xTickCount+0x2>
    5960:	b0 91 de 17 	lds	r27, 0x17DE	; 0x8017de <xTickCount+0x3>
    5964:	89 83       	std	Y+1, r24	; 0x01
    5966:	9a 83       	std	Y+2, r25	; 0x02
    5968:	ab 83       	std	Y+3, r26	; 0x03
    596a:	bc 83       	std	Y+4, r27	; 0x04
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
    as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    596c:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5970:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5974:	02 96       	adiw	r24, 0x02	; 2
    5976:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    597a:	89 85       	ldd	r24, Y+9	; 0x09
    597c:	9a 85       	ldd	r25, Y+10	; 0x0a
    597e:	ab 85       	ldd	r26, Y+11	; 0x0b
    5980:	bc 85       	ldd	r27, Y+12	; 0x0c
    5982:	8f 3f       	cpi	r24, 0xFF	; 255
    5984:	9f 4f       	sbci	r25, 0xFF	; 255
    5986:	af 4f       	sbci	r26, 0xFF	; 255
    5988:	bf 4f       	sbci	r27, 0xFF	; 255
    598a:	71 f4       	brne	.+28     	; 0x59a8 <prvAddCurrentTaskToDelayedList+0x72>
    598c:	8d 85       	ldd	r24, Y+13	; 0x0d
    598e:	88 23       	and	r24, r24
    5990:	59 f0       	breq	.+22     	; 0x59a8 <prvAddCurrentTaskToDelayedList+0x72>
        {
            /* Add the task to the suspended task list instead of a delayed task
            list to ensure it is not woken by a timing event.  It will block
            indefinitely. */
            vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5992:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5996:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    599a:	02 96       	adiw	r24, 0x02	; 2
    599c:	bc 01       	movw	r22, r24
    599e:	8f ec       	ldi	r24, 0xCF	; 207
    59a0:	97 e1       	ldi	r25, 0x17	; 23
    59a2:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <vListInsertEnd>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    59a6:	64 c0       	rjmp	.+200    	; 0x5a70 <prvAddCurrentTaskToDelayedList+0x13a>
        else
        {
            /* Calculate the time at which the task should be woken if the event
            does not occur.  This may overflow but this doesn't matter, the
            kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;
    59a8:	29 81       	ldd	r18, Y+1	; 0x01
    59aa:	3a 81       	ldd	r19, Y+2	; 0x02
    59ac:	4b 81       	ldd	r20, Y+3	; 0x03
    59ae:	5c 81       	ldd	r21, Y+4	; 0x04
    59b0:	89 85       	ldd	r24, Y+9	; 0x09
    59b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    59b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    59b8:	82 0f       	add	r24, r18
    59ba:	93 1f       	adc	r25, r19
    59bc:	a4 1f       	adc	r26, r20
    59be:	b5 1f       	adc	r27, r21
    59c0:	8d 83       	std	Y+5, r24	; 0x05
    59c2:	9e 83       	std	Y+6, r25	; 0x06
    59c4:	af 83       	std	Y+7, r26	; 0x07
    59c6:	b8 87       	std	Y+8, r27	; 0x08

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    59c8:	20 91 70 17 	lds	r18, 0x1770	; 0x801770 <pxCurrentTCB>
    59cc:	30 91 71 17 	lds	r19, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    59d0:	8d 81       	ldd	r24, Y+5	; 0x05
    59d2:	9e 81       	ldd	r25, Y+6	; 0x06
    59d4:	af 81       	ldd	r26, Y+7	; 0x07
    59d6:	b8 85       	ldd	r27, Y+8	; 0x08
    59d8:	f9 01       	movw	r30, r18
    59da:	82 83       	std	Z+2, r24	; 0x02
    59dc:	93 83       	std	Z+3, r25	; 0x03
    59de:	a4 83       	std	Z+4, r26	; 0x04
    59e0:	b5 83       	std	Z+5, r27	; 0x05

            if( xTimeToWake < xConstTickCount )
    59e2:	2d 81       	ldd	r18, Y+5	; 0x05
    59e4:	3e 81       	ldd	r19, Y+6	; 0x06
    59e6:	4f 81       	ldd	r20, Y+7	; 0x07
    59e8:	58 85       	ldd	r21, Y+8	; 0x08
    59ea:	89 81       	ldd	r24, Y+1	; 0x01
    59ec:	9a 81       	ldd	r25, Y+2	; 0x02
    59ee:	ab 81       	ldd	r26, Y+3	; 0x03
    59f0:	bc 81       	ldd	r27, Y+4	; 0x04
    59f2:	28 17       	cp	r18, r24
    59f4:	39 07       	cpc	r19, r25
    59f6:	4a 07       	cpc	r20, r26
    59f8:	5b 07       	cpc	r21, r27
    59fa:	78 f4       	brcc	.+30     	; 0x5a1a <prvAddCurrentTaskToDelayedList+0xe4>
            {
                /* Wake time has overflowed.  Place this item in the overflow
                list. */
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    59fc:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5a00:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5a04:	9c 01       	movw	r18, r24
    5a06:	2e 5f       	subi	r18, 0xFE	; 254
    5a08:	3f 4f       	sbci	r19, 0xFF	; 255
    5a0a:	80 91 b6 17 	lds	r24, 0x17B6	; 0x8017b6 <pxOverflowDelayedTaskList>
    5a0e:	90 91 b7 17 	lds	r25, 0x17B7	; 0x8017b7 <pxOverflowDelayedTaskList+0x1>
    5a12:	b9 01       	movw	r22, r18
    5a14:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    5a18:	2b c0       	rjmp	.+86     	; 0x5a70 <prvAddCurrentTaskToDelayedList+0x13a>
            }
            else
            {
                /* The wake time has not overflowed, so the current block list
                is used. */
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    5a1a:	80 91 70 17 	lds	r24, 0x1770	; 0x801770 <pxCurrentTCB>
    5a1e:	90 91 71 17 	lds	r25, 0x1771	; 0x801771 <pxCurrentTCB+0x1>
    5a22:	9c 01       	movw	r18, r24
    5a24:	2e 5f       	subi	r18, 0xFE	; 254
    5a26:	3f 4f       	sbci	r19, 0xFF	; 255
    5a28:	80 91 b4 17 	lds	r24, 0x17B4	; 0x8017b4 <pxDelayedTaskList>
    5a2c:	90 91 b5 17 	lds	r25, 0x17B5	; 0x8017b5 <pxDelayedTaskList+0x1>
    5a30:	b9 01       	movw	r22, r18
    5a32:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>

                /* If the task entering the blocked state was placed at the
                head of the list of blocked tasks then xNextTaskUnblockTime
                needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
    5a36:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <xNextTaskUnblockTime>
    5a3a:	90 91 e6 17 	lds	r25, 0x17E6	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    5a3e:	a0 91 e7 17 	lds	r26, 0x17E7	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    5a42:	b0 91 e8 17 	lds	r27, 0x17E8	; 0x8017e8 <xNextTaskUnblockTime+0x3>
    5a46:	2d 81       	ldd	r18, Y+5	; 0x05
    5a48:	3e 81       	ldd	r19, Y+6	; 0x06
    5a4a:	4f 81       	ldd	r20, Y+7	; 0x07
    5a4c:	58 85       	ldd	r21, Y+8	; 0x08
    5a4e:	28 17       	cp	r18, r24
    5a50:	39 07       	cpc	r19, r25
    5a52:	4a 07       	cpc	r20, r26
    5a54:	5b 07       	cpc	r21, r27
    5a56:	60 f4       	brcc	.+24     	; 0x5a70 <prvAddCurrentTaskToDelayedList+0x13a>
                {
                    xNextTaskUnblockTime = xTimeToWake;
    5a58:	8d 81       	ldd	r24, Y+5	; 0x05
    5a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a5c:	af 81       	ldd	r26, Y+7	; 0x07
    5a5e:	b8 85       	ldd	r27, Y+8	; 0x08
    5a60:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <xNextTaskUnblockTime>
    5a64:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <xNextTaskUnblockTime+0x1>
    5a68:	a0 93 e7 17 	sts	0x17E7, r26	; 0x8017e7 <xNextTaskUnblockTime+0x2>
    5a6c:	b0 93 e8 17 	sts	0x17E8, r27	; 0x8017e8 <xNextTaskUnblockTime+0x3>

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
    5a70:	00 00       	nop
    5a72:	2d 96       	adiw	r28, 0x0d	; 13
    5a74:	0f b6       	in	r0, 0x3f	; 63
    5a76:	f8 94       	cli
    5a78:	de bf       	out	0x3e, r29	; 62
    5a7a:	0f be       	out	0x3f, r0	; 63
    5a7c:	cd bf       	out	0x3d, r28	; 61
    5a7e:	df 91       	pop	r29
    5a80:	cf 91       	pop	r28
    5a82:	08 95       	ret

00005a84 <xTimerCreateTimerTask>:
    5a84:	ef 92       	push	r14
    5a86:	ff 92       	push	r15
    5a88:	0f 93       	push	r16
    5a8a:	cf 93       	push	r28
    5a8c:	df 93       	push	r29
    5a8e:	1f 92       	push	r1
    5a90:	cd b7       	in	r28, 0x3d	; 61
    5a92:	de b7       	in	r29, 0x3e	; 62
    5a94:	19 82       	std	Y+1, r1	; 0x01
    5a96:	ae d4       	rcall	.+2396   	; 0x63f4 <prvCheckForValidListAndQueue>
    5a98:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    5a9c:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5aa0:	89 2b       	or	r24, r25
    5aa2:	91 f0       	breq	.+36     	; 0x5ac8 <xTimerCreateTimerTask+0x44>
    5aa4:	0f 2e       	mov	r0, r31
    5aa6:	f8 e0       	ldi	r31, 0x08	; 8
    5aa8:	ef 2e       	mov	r14, r31
    5aaa:	f8 e1       	ldi	r31, 0x18	; 24
    5aac:	ff 2e       	mov	r15, r31
    5aae:	f0 2d       	mov	r31, r0
    5ab0:	03 e0       	ldi	r16, 0x03	; 3
    5ab2:	20 e0       	ldi	r18, 0x00	; 0
    5ab4:	30 e0       	ldi	r19, 0x00	; 0
    5ab6:	45 e5       	ldi	r20, 0x55	; 85
    5ab8:	50 e0       	ldi	r21, 0x00	; 0
    5aba:	6a ed       	ldi	r22, 0xDA	; 218
    5abc:	73 e0       	ldi	r23, 0x03	; 3
    5abe:	81 e6       	ldi	r24, 0x61	; 97
    5ac0:	91 e0       	ldi	r25, 0x01	; 1
    5ac2:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
    5ac6:	89 83       	std	Y+1, r24	; 0x01
    5ac8:	89 81       	ldd	r24, Y+1	; 0x01
    5aca:	0f 90       	pop	r0
    5acc:	df 91       	pop	r29
    5ace:	cf 91       	pop	r28
    5ad0:	0f 91       	pop	r16
    5ad2:	ff 90       	pop	r15
    5ad4:	ef 90       	pop	r14
    5ad6:	08 95       	ret

00005ad8 <xTimerGenericCommand>:
    5ad8:	cf 92       	push	r12
    5ada:	df 92       	push	r13
    5adc:	ef 92       	push	r14
    5ade:	ff 92       	push	r15
    5ae0:	0f 93       	push	r16
    5ae2:	1f 93       	push	r17
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	cd b7       	in	r28, 0x3d	; 61
    5aea:	de b7       	in	r29, 0x3e	; 62
    5aec:	65 97       	sbiw	r28, 0x15	; 21
    5aee:	0f b6       	in	r0, 0x3f	; 63
    5af0:	f8 94       	cli
    5af2:	de bf       	out	0x3e, r29	; 62
    5af4:	0f be       	out	0x3f, r0	; 63
    5af6:	cd bf       	out	0x3d, r28	; 61
    5af8:	9a 87       	std	Y+10, r25	; 0x0a
    5afa:	89 87       	std	Y+9, r24	; 0x09
    5afc:	6b 87       	std	Y+11, r22	; 0x0b
    5afe:	2c 87       	std	Y+12, r18	; 0x0c
    5b00:	3d 87       	std	Y+13, r19	; 0x0d
    5b02:	4e 87       	std	Y+14, r20	; 0x0e
    5b04:	5f 87       	std	Y+15, r21	; 0x0f
    5b06:	19 8b       	std	Y+17, r17	; 0x11
    5b08:	08 8b       	std	Y+16, r16	; 0x10
    5b0a:	ca 8a       	std	Y+18, r12	; 0x12
    5b0c:	db 8a       	std	Y+19, r13	; 0x13
    5b0e:	ec 8a       	std	Y+20, r14	; 0x14
    5b10:	fd 8a       	std	Y+21, r15	; 0x15
    5b12:	19 82       	std	Y+1, r1	; 0x01
    5b14:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    5b18:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5b1c:	89 2b       	or	r24, r25
    5b1e:	09 f4       	brne	.+2      	; 0x5b22 <xTimerGenericCommand+0x4a>
    5b20:	43 c0       	rjmp	.+134    	; 0x5ba8 <xTimerGenericCommand+0xd0>
    5b22:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b24:	8a 83       	std	Y+2, r24	; 0x02
    5b26:	8c 85       	ldd	r24, Y+12	; 0x0c
    5b28:	9d 85       	ldd	r25, Y+13	; 0x0d
    5b2a:	ae 85       	ldd	r26, Y+14	; 0x0e
    5b2c:	bf 85       	ldd	r27, Y+15	; 0x0f
    5b2e:	8b 83       	std	Y+3, r24	; 0x03
    5b30:	9c 83       	std	Y+4, r25	; 0x04
    5b32:	ad 83       	std	Y+5, r26	; 0x05
    5b34:	be 83       	std	Y+6, r27	; 0x06
    5b36:	89 85       	ldd	r24, Y+9	; 0x09
    5b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b3a:	98 87       	std	Y+8, r25	; 0x08
    5b3c:	8f 83       	std	Y+7, r24	; 0x07
    5b3e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b40:	86 30       	cpi	r24, 0x06	; 6
    5b42:	2c f5       	brge	.+74     	; 0x5b8e <xTimerGenericCommand+0xb6>
    5b44:	c9 d9       	rcall	.-3182   	; 0x4ed8 <xTaskGetSchedulerState>
    5b46:	82 30       	cpi	r24, 0x02	; 2
    5b48:	99 f4       	brne	.+38     	; 0x5b70 <xTimerGenericCommand+0x98>
    5b4a:	e0 91 06 18 	lds	r30, 0x1806	; 0x801806 <xTimerQueue>
    5b4e:	f0 91 07 18 	lds	r31, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5b52:	8a 89       	ldd	r24, Y+18	; 0x12
    5b54:	9b 89       	ldd	r25, Y+19	; 0x13
    5b56:	ac 89       	ldd	r26, Y+20	; 0x14
    5b58:	bd 89       	ldd	r27, Y+21	; 0x15
    5b5a:	be 01       	movw	r22, r28
    5b5c:	6e 5f       	subi	r22, 0xFE	; 254
    5b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b60:	00 e0       	ldi	r16, 0x00	; 0
    5b62:	9c 01       	movw	r18, r24
    5b64:	ad 01       	movw	r20, r26
    5b66:	cf 01       	movw	r24, r30
    5b68:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
    5b6c:	89 83       	std	Y+1, r24	; 0x01
    5b6e:	1c c0       	rjmp	.+56     	; 0x5ba8 <xTimerGenericCommand+0xd0>
    5b70:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    5b74:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5b78:	be 01       	movw	r22, r28
    5b7a:	6e 5f       	subi	r22, 0xFE	; 254
    5b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b7e:	00 e0       	ldi	r16, 0x00	; 0
    5b80:	20 e0       	ldi	r18, 0x00	; 0
    5b82:	30 e0       	ldi	r19, 0x00	; 0
    5b84:	a9 01       	movw	r20, r18
    5b86:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xQueueGenericSend>
    5b8a:	89 83       	std	Y+1, r24	; 0x01
    5b8c:	0d c0       	rjmp	.+26     	; 0x5ba8 <xTimerGenericCommand+0xd0>
    5b8e:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    5b92:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5b96:	48 89       	ldd	r20, Y+16	; 0x10
    5b98:	59 89       	ldd	r21, Y+17	; 0x11
    5b9a:	be 01       	movw	r22, r28
    5b9c:	6e 5f       	subi	r22, 0xFE	; 254
    5b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba0:	20 e0       	ldi	r18, 0x00	; 0
    5ba2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xQueueGenericSendFromISR>
    5ba6:	89 83       	std	Y+1, r24	; 0x01
    5ba8:	89 81       	ldd	r24, Y+1	; 0x01
    5baa:	65 96       	adiw	r28, 0x15	; 21
    5bac:	0f b6       	in	r0, 0x3f	; 63
    5bae:	f8 94       	cli
    5bb0:	de bf       	out	0x3e, r29	; 62
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	cd bf       	out	0x3d, r28	; 61
    5bb6:	df 91       	pop	r29
    5bb8:	cf 91       	pop	r28
    5bba:	1f 91       	pop	r17
    5bbc:	0f 91       	pop	r16
    5bbe:	ff 90       	pop	r15
    5bc0:	ef 90       	pop	r14
    5bc2:	df 90       	pop	r13
    5bc4:	cf 90       	pop	r12
    5bc6:	08 95       	ret

00005bc8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
    5bc8:	cf 92       	push	r12
    5bca:	df 92       	push	r13
    5bcc:	ef 92       	push	r14
    5bce:	ff 92       	push	r15
    5bd0:	0f 93       	push	r16
    5bd2:	1f 93       	push	r17
    5bd4:	cf 93       	push	r28
    5bd6:	df 93       	push	r29
    5bd8:	cd b7       	in	r28, 0x3d	; 61
    5bda:	de b7       	in	r29, 0x3e	; 62
    5bdc:	2b 97       	sbiw	r28, 0x0b	; 11
    5bde:	0f b6       	in	r0, 0x3f	; 63
    5be0:	f8 94       	cli
    5be2:	de bf       	out	0x3e, r29	; 62
    5be4:	0f be       	out	0x3f, r0	; 63
    5be6:	cd bf       	out	0x3d, r28	; 61
    5be8:	6c 83       	std	Y+4, r22	; 0x04
    5bea:	7d 83       	std	Y+5, r23	; 0x05
    5bec:	8e 83       	std	Y+6, r24	; 0x06
    5bee:	9f 83       	std	Y+7, r25	; 0x07
    5bf0:	28 87       	std	Y+8, r18	; 0x08
    5bf2:	39 87       	std	Y+9, r19	; 0x09
    5bf4:	4a 87       	std	Y+10, r20	; 0x0a
    5bf6:	5b 87       	std	Y+11, r21	; 0x0b
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    5bf8:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    5bfc:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    5c00:	fc 01       	movw	r30, r24
    5c02:	87 81       	ldd	r24, Z+7	; 0x07
    5c04:	90 85       	ldd	r25, Z+8	; 0x08
    5c06:	fc 01       	movw	r30, r24
    5c08:	80 85       	ldd	r24, Z+8	; 0x08
    5c0a:	91 85       	ldd	r25, Z+9	; 0x09
    5c0c:	9a 83       	std	Y+2, r25	; 0x02
    5c0e:	89 83       	std	Y+1, r24	; 0x01

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    5c10:	89 81       	ldd	r24, Y+1	; 0x01
    5c12:	9a 81       	ldd	r25, Y+2	; 0x02
    5c14:	02 96       	adiw	r24, 0x02	; 2
    5c16:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    5c1a:	89 81       	ldd	r24, Y+1	; 0x01
    5c1c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c1e:	fc 01       	movw	r30, r24
    5c20:	87 89       	ldd	r24, Z+23	; 0x17
    5c22:	88 2f       	mov	r24, r24
    5c24:	90 e0       	ldi	r25, 0x00	; 0
    5c26:	84 70       	andi	r24, 0x04	; 4
    5c28:	99 27       	eor	r25, r25
    5c2a:	89 2b       	or	r24, r25
    5c2c:	a9 f1       	breq	.+106    	; 0x5c98 <prvProcessExpiredTimer+0xd0>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    5c2e:	89 81       	ldd	r24, Y+1	; 0x01
    5c30:	9a 81       	ldd	r25, Y+2	; 0x02
    5c32:	fc 01       	movw	r30, r24
    5c34:	26 85       	ldd	r18, Z+14	; 0x0e
    5c36:	37 85       	ldd	r19, Z+15	; 0x0f
    5c38:	40 89       	ldd	r20, Z+16	; 0x10
    5c3a:	51 89       	ldd	r21, Z+17	; 0x11
    5c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    5c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    5c40:	ae 81       	ldd	r26, Y+6	; 0x06
    5c42:	bf 81       	ldd	r27, Y+7	; 0x07
    5c44:	82 0f       	add	r24, r18
    5c46:	93 1f       	adc	r25, r19
    5c48:	a4 1f       	adc	r26, r20
    5c4a:	b5 1f       	adc	r27, r21
    5c4c:	ec 80       	ldd	r14, Y+4	; 0x04
    5c4e:	fd 80       	ldd	r15, Y+5	; 0x05
    5c50:	0e 81       	ldd	r16, Y+6	; 0x06
    5c52:	1f 81       	ldd	r17, Y+7	; 0x07
    5c54:	28 85       	ldd	r18, Y+8	; 0x08
    5c56:	39 85       	ldd	r19, Y+9	; 0x09
    5c58:	4a 85       	ldd	r20, Y+10	; 0x0a
    5c5a:	5b 85       	ldd	r21, Y+11	; 0x0b
    5c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    5c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    5c60:	67 01       	movw	r12, r14
    5c62:	78 01       	movw	r14, r16
    5c64:	89 01       	movw	r16, r18
    5c66:	9a 01       	movw	r18, r20
    5c68:	ac 01       	movw	r20, r24
    5c6a:	bd 01       	movw	r22, r26
    5c6c:	cf 01       	movw	r24, r30
    5c6e:	3e d1       	rcall	.+636    	; 0x5eec <prvInsertTimerInActiveList>
    5c70:	88 23       	and	r24, r24
    5c72:	e1 f0       	breq	.+56     	; 0x5cac <prvProcessExpiredTimer+0xe4>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    5c74:	8c 81       	ldd	r24, Y+4	; 0x04
    5c76:	9d 81       	ldd	r25, Y+5	; 0x05
    5c78:	ae 81       	ldd	r26, Y+6	; 0x06
    5c7a:	bf 81       	ldd	r27, Y+7	; 0x07
    5c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    5c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    5c80:	c1 2c       	mov	r12, r1
    5c82:	d1 2c       	mov	r13, r1
    5c84:	76 01       	movw	r14, r12
    5c86:	00 e0       	ldi	r16, 0x00	; 0
    5c88:	10 e0       	ldi	r17, 0x00	; 0
    5c8a:	9c 01       	movw	r18, r24
    5c8c:	ad 01       	movw	r20, r26
    5c8e:	60 e0       	ldi	r22, 0x00	; 0
    5c90:	cf 01       	movw	r24, r30
    5c92:	22 df       	rcall	.-444    	; 0x5ad8 <xTimerGenericCommand>
    5c94:	8b 83       	std	Y+3, r24	; 0x03
    5c96:	0a c0       	rjmp	.+20     	; 0x5cac <prvProcessExpiredTimer+0xe4>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    5c98:	89 81       	ldd	r24, Y+1	; 0x01
    5c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    5c9c:	fc 01       	movw	r30, r24
    5c9e:	87 89       	ldd	r24, Z+23	; 0x17
    5ca0:	28 2f       	mov	r18, r24
    5ca2:	2e 7f       	andi	r18, 0xFE	; 254
    5ca4:	89 81       	ldd	r24, Y+1	; 0x01
    5ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ca8:	fc 01       	movw	r30, r24
    5caa:	27 8b       	std	Z+23, r18	; 0x17
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    5cac:	89 81       	ldd	r24, Y+1	; 0x01
    5cae:	9a 81       	ldd	r25, Y+2	; 0x02
    5cb0:	fc 01       	movw	r30, r24
    5cb2:	24 89       	ldd	r18, Z+20	; 0x14
    5cb4:	35 89       	ldd	r19, Z+21	; 0x15
    5cb6:	89 81       	ldd	r24, Y+1	; 0x01
    5cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    5cba:	f9 01       	movw	r30, r18
    5cbc:	19 95       	eicall
}
    5cbe:	00 00       	nop
    5cc0:	2b 96       	adiw	r28, 0x0b	; 11
    5cc2:	0f b6       	in	r0, 0x3f	; 63
    5cc4:	f8 94       	cli
    5cc6:	de bf       	out	0x3e, r29	; 62
    5cc8:	0f be       	out	0x3f, r0	; 63
    5cca:	cd bf       	out	0x3d, r28	; 61
    5ccc:	df 91       	pop	r29
    5cce:	cf 91       	pop	r28
    5cd0:	1f 91       	pop	r17
    5cd2:	0f 91       	pop	r16
    5cd4:	ff 90       	pop	r15
    5cd6:	ef 90       	pop	r14
    5cd8:	df 90       	pop	r13
    5cda:	cf 90       	pop	r12
    5cdc:	08 95       	ret

00005cde <prvProcessTimerOrBlockTask>:
    }
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
    5cde:	ef 92       	push	r14
    5ce0:	ff 92       	push	r15
    5ce2:	0f 93       	push	r16
    5ce4:	1f 93       	push	r17
    5ce6:	cf 93       	push	r28
    5ce8:	df 93       	push	r29
    5cea:	cd b7       	in	r28, 0x3d	; 61
    5cec:	de b7       	in	r29, 0x3e	; 62
    5cee:	2a 97       	sbiw	r28, 0x0a	; 10
    5cf0:	0f b6       	in	r0, 0x3f	; 63
    5cf2:	f8 94       	cli
    5cf4:	de bf       	out	0x3e, r29	; 62
    5cf6:	0f be       	out	0x3f, r0	; 63
    5cf8:	cd bf       	out	0x3d, r28	; 61
    5cfa:	6e 83       	std	Y+6, r22	; 0x06
    5cfc:	7f 83       	std	Y+7, r23	; 0x07
    5cfe:	88 87       	std	Y+8, r24	; 0x08
    5d00:	99 87       	std	Y+9, r25	; 0x09
    5d02:	4a 87       	std	Y+10, r20	; 0x0a
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    5d04:	0e 94 a4 21 	call	0x4348	; 0x4348 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    5d08:	ce 01       	movw	r24, r28
    5d0a:	05 96       	adiw	r24, 0x05	; 5
    5d0c:	a8 d0       	rcall	.+336    	; 0x5e5e <prvSampleTimeNow>
    5d0e:	dc 01       	movw	r26, r24
    5d10:	cb 01       	movw	r24, r22
    5d12:	89 83       	std	Y+1, r24	; 0x01
    5d14:	9a 83       	std	Y+2, r25	; 0x02
    5d16:	ab 83       	std	Y+3, r26	; 0x03
    5d18:	bc 83       	std	Y+4, r27	; 0x04
        if( xTimerListsWereSwitched == pdFALSE )
    5d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    5d1c:	88 23       	and	r24, r24
    5d1e:	09 f0       	breq	.+2      	; 0x5d22 <prvProcessTimerOrBlockTask+0x44>
    5d20:	4d c0       	rjmp	.+154    	; 0x5dbc <prvProcessTimerOrBlockTask+0xde>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    5d22:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d24:	88 23       	and	r24, r24
    5d26:	d9 f4       	brne	.+54     	; 0x5d5e <prvProcessTimerOrBlockTask+0x80>
    5d28:	2e 81       	ldd	r18, Y+6	; 0x06
    5d2a:	3f 81       	ldd	r19, Y+7	; 0x07
    5d2c:	48 85       	ldd	r20, Y+8	; 0x08
    5d2e:	59 85       	ldd	r21, Y+9	; 0x09
    5d30:	89 81       	ldd	r24, Y+1	; 0x01
    5d32:	9a 81       	ldd	r25, Y+2	; 0x02
    5d34:	ab 81       	ldd	r26, Y+3	; 0x03
    5d36:	bc 81       	ldd	r27, Y+4	; 0x04
    5d38:	82 17       	cp	r24, r18
    5d3a:	93 07       	cpc	r25, r19
    5d3c:	a4 07       	cpc	r26, r20
    5d3e:	b5 07       	cpc	r27, r21
    5d40:	70 f0       	brcs	.+28     	; 0x5d5e <prvProcessTimerOrBlockTask+0x80>
            {
                ( void ) xTaskResumeAll();
    5d42:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
                prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    5d46:	29 81       	ldd	r18, Y+1	; 0x01
    5d48:	3a 81       	ldd	r19, Y+2	; 0x02
    5d4a:	4b 81       	ldd	r20, Y+3	; 0x03
    5d4c:	5c 81       	ldd	r21, Y+4	; 0x04
    5d4e:	8e 81       	ldd	r24, Y+6	; 0x06
    5d50:	9f 81       	ldd	r25, Y+7	; 0x07
    5d52:	a8 85       	ldd	r26, Y+8	; 0x08
    5d54:	b9 85       	ldd	r27, Y+9	; 0x09
    5d56:	bc 01       	movw	r22, r24
    5d58:	cd 01       	movw	r24, r26
    5d5a:	36 df       	rcall	.-404    	; 0x5bc8 <prvProcessExpiredTimer>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    5d5c:	31 c0       	rjmp	.+98     	; 0x5dc0 <prvProcessTimerOrBlockTask+0xe2>
                time has not been reached yet.  This task should therefore
                block to wait for the next expire time or a command to be
                received - whichever comes first.  The following line cannot
                be reached unless xNextExpireTime > xTimeNow, except in the
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
    5d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5d60:	88 23       	and	r24, r24
    5d62:	59 f0       	breq	.+22     	; 0x5d7a <prvProcessTimerOrBlockTask+0x9c>
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    5d64:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <pxOverflowTimerList>
    5d68:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <pxOverflowTimerList+0x1>
    5d6c:	fc 01       	movw	r30, r24
    5d6e:	90 81       	ld	r25, Z
    5d70:	81 e0       	ldi	r24, 0x01	; 1
    5d72:	99 23       	and	r25, r25
    5d74:	09 f0       	breq	.+2      	; 0x5d78 <prvProcessTimerOrBlockTask+0x9a>
    5d76:	80 e0       	ldi	r24, 0x00	; 0
    5d78:	8a 87       	std	Y+10, r24	; 0x0a
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    5d7a:	2e 81       	ldd	r18, Y+6	; 0x06
    5d7c:	3f 81       	ldd	r19, Y+7	; 0x07
    5d7e:	48 85       	ldd	r20, Y+8	; 0x08
    5d80:	59 85       	ldd	r21, Y+9	; 0x09
    5d82:	89 81       	ldd	r24, Y+1	; 0x01
    5d84:	9a 81       	ldd	r25, Y+2	; 0x02
    5d86:	ab 81       	ldd	r26, Y+3	; 0x03
    5d88:	bc 81       	ldd	r27, Y+4	; 0x04
    5d8a:	79 01       	movw	r14, r18
    5d8c:	8a 01       	movw	r16, r20
    5d8e:	e8 1a       	sub	r14, r24
    5d90:	f9 0a       	sbc	r15, r25
    5d92:	0a 0b       	sbc	r16, r26
    5d94:	1b 0b       	sbc	r17, r27
    5d96:	d8 01       	movw	r26, r16
    5d98:	c7 01       	movw	r24, r14
    5d9a:	e0 91 06 18 	lds	r30, 0x1806	; 0x801806 <xTimerQueue>
    5d9e:	f0 91 07 18 	lds	r31, 0x1807	; 0x801807 <xTimerQueue+0x1>
    5da2:	2a 85       	ldd	r18, Y+10	; 0x0a
    5da4:	ac 01       	movw	r20, r24
    5da6:	bd 01       	movw	r22, r26
    5da8:	cf 01       	movw	r24, r30
    5daa:	0e 94 71 19 	call	0x32e2	; 0x32e2 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    5dae:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
    5db2:	88 23       	and	r24, r24
    5db4:	29 f4       	brne	.+10     	; 0x5dc0 <prvProcessTimerOrBlockTask+0xe2>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    5db6:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
        else
        {
            ( void ) xTaskResumeAll();
        }
    }
}
    5dba:	02 c0       	rjmp	.+4      	; 0x5dc0 <prvProcessTimerOrBlockTask+0xe2>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    5dbc:	0e 94 b1 21 	call	0x4362	; 0x4362 <xTaskResumeAll>
        }
    }
}
    5dc0:	00 00       	nop
    5dc2:	2a 96       	adiw	r28, 0x0a	; 10
    5dc4:	0f b6       	in	r0, 0x3f	; 63
    5dc6:	f8 94       	cli
    5dc8:	de bf       	out	0x3e, r29	; 62
    5dca:	0f be       	out	0x3f, r0	; 63
    5dcc:	cd bf       	out	0x3d, r28	; 61
    5dce:	df 91       	pop	r29
    5dd0:	cf 91       	pop	r28
    5dd2:	1f 91       	pop	r17
    5dd4:	0f 91       	pop	r16
    5dd6:	ff 90       	pop	r15
    5dd8:	ef 90       	pop	r14
    5dda:	08 95       	ret

00005ddc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
    5ddc:	cf 93       	push	r28
    5dde:	df 93       	push	r29
    5de0:	00 d0       	rcall	.+0      	; 0x5de2 <prvGetNextExpireTime+0x6>
    5de2:	00 d0       	rcall	.+0      	; 0x5de4 <prvGetNextExpireTime+0x8>
    5de4:	cd b7       	in	r28, 0x3d	; 61
    5de6:	de b7       	in	r29, 0x3e	; 62
    5de8:	9e 83       	std	Y+6, r25	; 0x06
    5dea:	8d 83       	std	Y+5, r24	; 0x05
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    5dec:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    5df0:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    5df4:	fc 01       	movw	r30, r24
    5df6:	90 81       	ld	r25, Z
    5df8:	81 e0       	ldi	r24, 0x01	; 1
    5dfa:	99 23       	and	r25, r25
    5dfc:	09 f0       	breq	.+2      	; 0x5e00 <prvGetNextExpireTime+0x24>
    5dfe:	80 e0       	ldi	r24, 0x00	; 0
    5e00:	28 2f       	mov	r18, r24
    5e02:	8d 81       	ldd	r24, Y+5	; 0x05
    5e04:	9e 81       	ldd	r25, Y+6	; 0x06
    5e06:	fc 01       	movw	r30, r24
    5e08:	20 83       	st	Z, r18
    if( *pxListWasEmpty == pdFALSE )
    5e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    5e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    5e0e:	fc 01       	movw	r30, r24
    5e10:	80 81       	ld	r24, Z
    5e12:	88 23       	and	r24, r24
    5e14:	89 f4       	brne	.+34     	; 0x5e38 <prvGetNextExpireTime+0x5c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    5e16:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    5e1a:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    5e1e:	fc 01       	movw	r30, r24
    5e20:	87 81       	ldd	r24, Z+7	; 0x07
    5e22:	90 85       	ldd	r25, Z+8	; 0x08
    5e24:	fc 01       	movw	r30, r24
    5e26:	80 81       	ld	r24, Z
    5e28:	91 81       	ldd	r25, Z+1	; 0x01
    5e2a:	a2 81       	ldd	r26, Z+2	; 0x02
    5e2c:	b3 81       	ldd	r27, Z+3	; 0x03
    5e2e:	89 83       	std	Y+1, r24	; 0x01
    5e30:	9a 83       	std	Y+2, r25	; 0x02
    5e32:	ab 83       	std	Y+3, r26	; 0x03
    5e34:	bc 83       	std	Y+4, r27	; 0x04
    5e36:	04 c0       	rjmp	.+8      	; 0x5e40 <prvGetNextExpireTime+0x64>
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    5e38:	19 82       	std	Y+1, r1	; 0x01
    5e3a:	1a 82       	std	Y+2, r1	; 0x02
    5e3c:	1b 82       	std	Y+3, r1	; 0x03
    5e3e:	1c 82       	std	Y+4, r1	; 0x04
    }

    return xNextExpireTime;
    5e40:	89 81       	ldd	r24, Y+1	; 0x01
    5e42:	9a 81       	ldd	r25, Y+2	; 0x02
    5e44:	ab 81       	ldd	r26, Y+3	; 0x03
    5e46:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5e48:	bc 01       	movw	r22, r24
    5e4a:	cd 01       	movw	r24, r26
    5e4c:	26 96       	adiw	r28, 0x06	; 6
    5e4e:	0f b6       	in	r0, 0x3f	; 63
    5e50:	f8 94       	cli
    5e52:	de bf       	out	0x3e, r29	; 62
    5e54:	0f be       	out	0x3f, r0	; 63
    5e56:	cd bf       	out	0x3d, r28	; 61
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	08 95       	ret

00005e5e <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    5e5e:	cf 93       	push	r28
    5e60:	df 93       	push	r29
    5e62:	00 d0       	rcall	.+0      	; 0x5e64 <prvSampleTimeNow+0x6>
    5e64:	00 d0       	rcall	.+0      	; 0x5e66 <prvSampleTimeNow+0x8>
    5e66:	cd b7       	in	r28, 0x3d	; 61
    5e68:	de b7       	in	r29, 0x3e	; 62
    5e6a:	9e 83       	std	Y+6, r25	; 0x06
    5e6c:	8d 83       	std	Y+5, r24	; 0x05
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    5e6e:	0e 94 43 22 	call	0x4486	; 0x4486 <xTaskGetTickCount>
    5e72:	dc 01       	movw	r26, r24
    5e74:	cb 01       	movw	r24, r22
    5e76:	89 83       	std	Y+1, r24	; 0x01
    5e78:	9a 83       	std	Y+2, r25	; 0x02
    5e7a:	ab 83       	std	Y+3, r26	; 0x03
    5e7c:	bc 83       	std	Y+4, r27	; 0x04

    if( xTimeNow < xLastTime )
    5e7e:	80 91 0a 18 	lds	r24, 0x180A	; 0x80180a <xLastTime.2432>
    5e82:	90 91 0b 18 	lds	r25, 0x180B	; 0x80180b <xLastTime.2432+0x1>
    5e86:	a0 91 0c 18 	lds	r26, 0x180C	; 0x80180c <xLastTime.2432+0x2>
    5e8a:	b0 91 0d 18 	lds	r27, 0x180D	; 0x80180d <xLastTime.2432+0x3>
    5e8e:	29 81       	ldd	r18, Y+1	; 0x01
    5e90:	3a 81       	ldd	r19, Y+2	; 0x02
    5e92:	4b 81       	ldd	r20, Y+3	; 0x03
    5e94:	5c 81       	ldd	r21, Y+4	; 0x04
    5e96:	28 17       	cp	r18, r24
    5e98:	39 07       	cpc	r19, r25
    5e9a:	4a 07       	cpc	r20, r26
    5e9c:	5b 07       	cpc	r21, r27
    5e9e:	38 f4       	brcc	.+14     	; 0x5eae <prvSampleTimeNow+0x50>
    {
        prvSwitchTimerLists();
    5ea0:	e6 d1       	rcall	.+972    	; 0x626e <prvSwitchTimerLists>
        *pxTimerListsWereSwitched = pdTRUE;
    5ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    5ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea6:	21 e0       	ldi	r18, 0x01	; 1
    5ea8:	fc 01       	movw	r30, r24
    5eaa:	20 83       	st	Z, r18
    5eac:	04 c0       	rjmp	.+8      	; 0x5eb6 <prvSampleTimeNow+0x58>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    5eae:	8d 81       	ldd	r24, Y+5	; 0x05
    5eb0:	9e 81       	ldd	r25, Y+6	; 0x06
    5eb2:	fc 01       	movw	r30, r24
    5eb4:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    5eb6:	89 81       	ldd	r24, Y+1	; 0x01
    5eb8:	9a 81       	ldd	r25, Y+2	; 0x02
    5eba:	ab 81       	ldd	r26, Y+3	; 0x03
    5ebc:	bc 81       	ldd	r27, Y+4	; 0x04
    5ebe:	80 93 0a 18 	sts	0x180A, r24	; 0x80180a <xLastTime.2432>
    5ec2:	90 93 0b 18 	sts	0x180B, r25	; 0x80180b <xLastTime.2432+0x1>
    5ec6:	a0 93 0c 18 	sts	0x180C, r26	; 0x80180c <xLastTime.2432+0x2>
    5eca:	b0 93 0d 18 	sts	0x180D, r27	; 0x80180d <xLastTime.2432+0x3>

    return xTimeNow;
    5ece:	89 81       	ldd	r24, Y+1	; 0x01
    5ed0:	9a 81       	ldd	r25, Y+2	; 0x02
    5ed2:	ab 81       	ldd	r26, Y+3	; 0x03
    5ed4:	bc 81       	ldd	r27, Y+4	; 0x04
}
    5ed6:	bc 01       	movw	r22, r24
    5ed8:	cd 01       	movw	r24, r26
    5eda:	26 96       	adiw	r28, 0x06	; 6
    5edc:	0f b6       	in	r0, 0x3f	; 63
    5ede:	f8 94       	cli
    5ee0:	de bf       	out	0x3e, r29	; 62
    5ee2:	0f be       	out	0x3f, r0	; 63
    5ee4:	cd bf       	out	0x3d, r28	; 61
    5ee6:	df 91       	pop	r29
    5ee8:	cf 91       	pop	r28
    5eea:	08 95       	ret

00005eec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    5eec:	cf 92       	push	r12
    5eee:	df 92       	push	r13
    5ef0:	ef 92       	push	r14
    5ef2:	ff 92       	push	r15
    5ef4:	0f 93       	push	r16
    5ef6:	1f 93       	push	r17
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	cd b7       	in	r28, 0x3d	; 61
    5efe:	de b7       	in	r29, 0x3e	; 62
    5f00:	2f 97       	sbiw	r28, 0x0f	; 15
    5f02:	0f b6       	in	r0, 0x3f	; 63
    5f04:	f8 94       	cli
    5f06:	de bf       	out	0x3e, r29	; 62
    5f08:	0f be       	out	0x3f, r0	; 63
    5f0a:	cd bf       	out	0x3d, r28	; 61
    5f0c:	9b 83       	std	Y+3, r25	; 0x03
    5f0e:	8a 83       	std	Y+2, r24	; 0x02
    5f10:	4c 83       	std	Y+4, r20	; 0x04
    5f12:	5d 83       	std	Y+5, r21	; 0x05
    5f14:	6e 83       	std	Y+6, r22	; 0x06
    5f16:	7f 83       	std	Y+7, r23	; 0x07
    5f18:	08 87       	std	Y+8, r16	; 0x08
    5f1a:	19 87       	std	Y+9, r17	; 0x09
    5f1c:	2a 87       	std	Y+10, r18	; 0x0a
    5f1e:	3b 87       	std	Y+11, r19	; 0x0b
    5f20:	cc 86       	std	Y+12, r12	; 0x0c
    5f22:	dd 86       	std	Y+13, r13	; 0x0d
    5f24:	ee 86       	std	Y+14, r14	; 0x0e
    5f26:	ff 86       	std	Y+15, r15	; 0x0f
BaseType_t xProcessTimerNow = pdFALSE;
    5f28:	19 82       	std	Y+1, r1	; 0x01

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    5f2a:	2a 81       	ldd	r18, Y+2	; 0x02
    5f2c:	3b 81       	ldd	r19, Y+3	; 0x03
    5f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5f30:	9d 81       	ldd	r25, Y+5	; 0x05
    5f32:	ae 81       	ldd	r26, Y+6	; 0x06
    5f34:	bf 81       	ldd	r27, Y+7	; 0x07
    5f36:	f9 01       	movw	r30, r18
    5f38:	82 83       	std	Z+2, r24	; 0x02
    5f3a:	93 83       	std	Z+3, r25	; 0x03
    5f3c:	a4 83       	std	Z+4, r26	; 0x04
    5f3e:	b5 83       	std	Z+5, r27	; 0x05
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    5f40:	8a 81       	ldd	r24, Y+2	; 0x02
    5f42:	9b 81       	ldd	r25, Y+3	; 0x03
    5f44:	2a 81       	ldd	r18, Y+2	; 0x02
    5f46:	3b 81       	ldd	r19, Y+3	; 0x03
    5f48:	fc 01       	movw	r30, r24
    5f4a:	33 87       	std	Z+11, r19	; 0x0b
    5f4c:	22 87       	std	Z+10, r18	; 0x0a

    if( xNextExpiryTime <= xTimeNow )
    5f4e:	2c 81       	ldd	r18, Y+4	; 0x04
    5f50:	3d 81       	ldd	r19, Y+5	; 0x05
    5f52:	4e 81       	ldd	r20, Y+6	; 0x06
    5f54:	5f 81       	ldd	r21, Y+7	; 0x07
    5f56:	88 85       	ldd	r24, Y+8	; 0x08
    5f58:	99 85       	ldd	r25, Y+9	; 0x09
    5f5a:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f5c:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f5e:	82 17       	cp	r24, r18
    5f60:	93 07       	cpc	r25, r19
    5f62:	a4 07       	cpc	r26, r20
    5f64:	b5 07       	cpc	r27, r21
    5f66:	40 f1       	brcs	.+80     	; 0x5fb8 <prvInsertTimerInActiveList+0xcc>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    5f68:	28 85       	ldd	r18, Y+8	; 0x08
    5f6a:	39 85       	ldd	r19, Y+9	; 0x09
    5f6c:	4a 85       	ldd	r20, Y+10	; 0x0a
    5f6e:	5b 85       	ldd	r21, Y+11	; 0x0b
    5f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    5f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    5f74:	ae 85       	ldd	r26, Y+14	; 0x0e
    5f76:	bf 85       	ldd	r27, Y+15	; 0x0f
    5f78:	28 1b       	sub	r18, r24
    5f7a:	39 0b       	sbc	r19, r25
    5f7c:	4a 0b       	sbc	r20, r26
    5f7e:	5b 0b       	sbc	r21, r27
    5f80:	8a 81       	ldd	r24, Y+2	; 0x02
    5f82:	9b 81       	ldd	r25, Y+3	; 0x03
    5f84:	fc 01       	movw	r30, r24
    5f86:	86 85       	ldd	r24, Z+14	; 0x0e
    5f88:	97 85       	ldd	r25, Z+15	; 0x0f
    5f8a:	a0 89       	ldd	r26, Z+16	; 0x10
    5f8c:	b1 89       	ldd	r27, Z+17	; 0x11
    5f8e:	28 17       	cp	r18, r24
    5f90:	39 07       	cpc	r19, r25
    5f92:	4a 07       	cpc	r20, r26
    5f94:	5b 07       	cpc	r21, r27
    5f96:	18 f0       	brcs	.+6      	; 0x5f9e <prvInsertTimerInActiveList+0xb2>
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    5f98:	81 e0       	ldi	r24, 0x01	; 1
    5f9a:	89 83       	std	Y+1, r24	; 0x01
    5f9c:	36 c0       	rjmp	.+108    	; 0x600a <prvInsertTimerInActiveList+0x11e>
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    5f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    5fa2:	9c 01       	movw	r18, r24
    5fa4:	2e 5f       	subi	r18, 0xFE	; 254
    5fa6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fa8:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <pxOverflowTimerList>
    5fac:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <pxOverflowTimerList+0x1>
    5fb0:	b9 01       	movw	r22, r18
    5fb2:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>
    5fb6:	29 c0       	rjmp	.+82     	; 0x600a <prvInsertTimerInActiveList+0x11e>
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    5fb8:	28 85       	ldd	r18, Y+8	; 0x08
    5fba:	39 85       	ldd	r19, Y+9	; 0x09
    5fbc:	4a 85       	ldd	r20, Y+10	; 0x0a
    5fbe:	5b 85       	ldd	r21, Y+11	; 0x0b
    5fc0:	8c 85       	ldd	r24, Y+12	; 0x0c
    5fc2:	9d 85       	ldd	r25, Y+13	; 0x0d
    5fc4:	ae 85       	ldd	r26, Y+14	; 0x0e
    5fc6:	bf 85       	ldd	r27, Y+15	; 0x0f
    5fc8:	28 17       	cp	r18, r24
    5fca:	39 07       	cpc	r19, r25
    5fcc:	4a 07       	cpc	r20, r26
    5fce:	5b 07       	cpc	r21, r27
    5fd0:	80 f4       	brcc	.+32     	; 0x5ff2 <prvInsertTimerInActiveList+0x106>
    5fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    5fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    5fd6:	4e 81       	ldd	r20, Y+6	; 0x06
    5fd8:	5f 81       	ldd	r21, Y+7	; 0x07
    5fda:	8c 85       	ldd	r24, Y+12	; 0x0c
    5fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    5fde:	ae 85       	ldd	r26, Y+14	; 0x0e
    5fe0:	bf 85       	ldd	r27, Y+15	; 0x0f
    5fe2:	28 17       	cp	r18, r24
    5fe4:	39 07       	cpc	r19, r25
    5fe6:	4a 07       	cpc	r20, r26
    5fe8:	5b 07       	cpc	r21, r27
    5fea:	18 f0       	brcs	.+6      	; 0x5ff2 <prvInsertTimerInActiveList+0x106>
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    5fec:	81 e0       	ldi	r24, 0x01	; 1
    5fee:	89 83       	std	Y+1, r24	; 0x01
    5ff0:	0c c0       	rjmp	.+24     	; 0x600a <prvInsertTimerInActiveList+0x11e>
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    5ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    5ff4:	9b 81       	ldd	r25, Y+3	; 0x03
    5ff6:	9c 01       	movw	r18, r24
    5ff8:	2e 5f       	subi	r18, 0xFE	; 254
    5ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    5ffc:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    6000:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    6004:	b9 01       	movw	r22, r18
    6006:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>
        }
    }

    return xProcessTimerNow;
    600a:	89 81       	ldd	r24, Y+1	; 0x01
}
    600c:	2f 96       	adiw	r28, 0x0f	; 15
    600e:	0f b6       	in	r0, 0x3f	; 63
    6010:	f8 94       	cli
    6012:	de bf       	out	0x3e, r29	; 62
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	cd bf       	out	0x3d, r28	; 61
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	1f 91       	pop	r17
    601e:	0f 91       	pop	r16
    6020:	ff 90       	pop	r15
    6022:	ef 90       	pop	r14
    6024:	df 90       	pop	r13
    6026:	cf 90       	pop	r12
    6028:	08 95       	ret

0000602a <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void    prvProcessReceivedCommands( void )
{
    602a:	cf 92       	push	r12
    602c:	df 92       	push	r13
    602e:	ef 92       	push	r14
    6030:	ff 92       	push	r15
    6032:	0f 93       	push	r16
    6034:	1f 93       	push	r17
    6036:	cf 93       	push	r28
    6038:	df 93       	push	r29
    603a:	cd b7       	in	r28, 0x3d	; 61
    603c:	de b7       	in	r29, 0x3e	; 62
    603e:	2f 97       	sbiw	r28, 0x0f	; 15
    6040:	0f b6       	in	r0, 0x3f	; 63
    6042:	f8 94       	cli
    6044:	de bf       	out	0x3e, r29	; 62
    6046:	0f be       	out	0x3f, r0	; 63
    6048:	cd bf       	out	0x3d, r28	; 61
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    604a:	f2 c0       	rjmp	.+484    	; 0x6230 <prvProcessReceivedCommands+0x206>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    604c:	88 85       	ldd	r24, Y+8	; 0x08
    604e:	88 23       	and	r24, r24
    6050:	0c f4       	brge	.+2      	; 0x6054 <prvProcessReceivedCommands+0x2a>
    6052:	ee c0       	rjmp	.+476    	; 0x6230 <prvProcessReceivedCommands+0x206>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    6054:	8d 85       	ldd	r24, Y+13	; 0x0d
    6056:	9e 85       	ldd	r25, Y+14	; 0x0e
    6058:	9a 83       	std	Y+2, r25	; 0x02
    605a:	89 83       	std	Y+1, r24	; 0x01

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    605c:	89 81       	ldd	r24, Y+1	; 0x01
    605e:	9a 81       	ldd	r25, Y+2	; 0x02
    6060:	fc 01       	movw	r30, r24
    6062:	84 85       	ldd	r24, Z+12	; 0x0c
    6064:	95 85       	ldd	r25, Z+13	; 0x0d
    6066:	89 2b       	or	r24, r25
    6068:	29 f0       	breq	.+10     	; 0x6074 <prvProcessReceivedCommands+0x4a>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    606a:	89 81       	ldd	r24, Y+1	; 0x01
    606c:	9a 81       	ldd	r25, Y+2	; 0x02
    606e:	02 96       	adiw	r24, 0x02	; 2
    6070:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    6074:	ce 01       	movw	r24, r28
    6076:	0f 96       	adiw	r24, 0x0f	; 15
    6078:	f2 de       	rcall	.-540    	; 0x5e5e <prvSampleTimeNow>
    607a:	dc 01       	movw	r26, r24
    607c:	cb 01       	movw	r24, r22
    607e:	8b 83       	std	Y+3, r24	; 0x03
    6080:	9c 83       	std	Y+4, r25	; 0x04
    6082:	ad 83       	std	Y+5, r26	; 0x05
    6084:	be 83       	std	Y+6, r27	; 0x06

            switch( xMessage.xMessageID )
    6086:	88 85       	ldd	r24, Y+8	; 0x08
    6088:	08 2e       	mov	r0, r24
    608a:	00 0c       	add	r0, r0
    608c:	99 0b       	sbc	r25, r25
    608e:	09 2e       	mov	r0, r25
    6090:	00 0c       	add	r0, r0
    6092:	aa 0b       	sbc	r26, r26
    6094:	bb 0b       	sbc	r27, r27
    6096:	40 e0       	ldi	r20, 0x00	; 0
    6098:	50 e0       	ldi	r21, 0x00	; 0
    609a:	29 e0       	ldi	r18, 0x09	; 9
    609c:	30 e0       	ldi	r19, 0x00	; 0
    609e:	84 1b       	sub	r24, r20
    60a0:	95 0b       	sbc	r25, r21
    60a2:	28 17       	cp	r18, r24
    60a4:	39 07       	cpc	r19, r25
    60a6:	08 f4       	brcc	.+2      	; 0x60aa <prvProcessReceivedCommands+0x80>
    60a8:	c2 c0       	rjmp	.+388    	; 0x622e <prvProcessReceivedCommands+0x204>
    60aa:	fc 01       	movw	r30, r24
    60ac:	88 27       	eor	r24, r24
    60ae:	ee 58       	subi	r30, 0x8E	; 142
    60b0:	ff 4f       	sbci	r31, 0xFF	; 255
    60b2:	8f 4f       	sbci	r24, 0xFF	; 255
    60b4:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    60b8:	89 81       	ldd	r24, Y+1	; 0x01
    60ba:	9a 81       	ldd	r25, Y+2	; 0x02
    60bc:	fc 01       	movw	r30, r24
    60be:	87 89       	ldd	r24, Z+23	; 0x17
    60c0:	28 2f       	mov	r18, r24
    60c2:	21 60       	ori	r18, 0x01	; 1
    60c4:	89 81       	ldd	r24, Y+1	; 0x01
    60c6:	9a 81       	ldd	r25, Y+2	; 0x02
    60c8:	fc 01       	movw	r30, r24
    60ca:	27 8b       	std	Z+23, r18	; 0x17
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    60cc:	e9 84       	ldd	r14, Y+9	; 0x09
    60ce:	fa 84       	ldd	r15, Y+10	; 0x0a
    60d0:	0b 85       	ldd	r16, Y+11	; 0x0b
    60d2:	1c 85       	ldd	r17, Y+12	; 0x0c
    60d4:	29 85       	ldd	r18, Y+9	; 0x09
    60d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    60d8:	4b 85       	ldd	r20, Y+11	; 0x0b
    60da:	5c 85       	ldd	r21, Y+12	; 0x0c
    60dc:	89 81       	ldd	r24, Y+1	; 0x01
    60de:	9a 81       	ldd	r25, Y+2	; 0x02
    60e0:	fc 01       	movw	r30, r24
    60e2:	86 85       	ldd	r24, Z+14	; 0x0e
    60e4:	97 85       	ldd	r25, Z+15	; 0x0f
    60e6:	a0 89       	ldd	r26, Z+16	; 0x10
    60e8:	b1 89       	ldd	r27, Z+17	; 0x11
    60ea:	82 0f       	add	r24, r18
    60ec:	93 1f       	adc	r25, r19
    60ee:	a4 1f       	adc	r26, r20
    60f0:	b5 1f       	adc	r27, r21
    60f2:	2b 81       	ldd	r18, Y+3	; 0x03
    60f4:	3c 81       	ldd	r19, Y+4	; 0x04
    60f6:	4d 81       	ldd	r20, Y+5	; 0x05
    60f8:	5e 81       	ldd	r21, Y+6	; 0x06
    60fa:	e9 81       	ldd	r30, Y+1	; 0x01
    60fc:	fa 81       	ldd	r31, Y+2	; 0x02
    60fe:	67 01       	movw	r12, r14
    6100:	78 01       	movw	r14, r16
    6102:	89 01       	movw	r16, r18
    6104:	9a 01       	movw	r18, r20
    6106:	ac 01       	movw	r20, r24
    6108:	bd 01       	movw	r22, r26
    610a:	cf 01       	movw	r24, r30
    610c:	ef de       	rcall	.-546    	; 0x5eec <prvInsertTimerInActiveList>
    610e:	88 23       	and	r24, r24
    6110:	09 f4       	brne	.+2      	; 0x6114 <prvProcessReceivedCommands+0xea>
    6112:	8e c0       	rjmp	.+284    	; 0x6230 <prvProcessReceivedCommands+0x206>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    6114:	89 81       	ldd	r24, Y+1	; 0x01
    6116:	9a 81       	ldd	r25, Y+2	; 0x02
    6118:	fc 01       	movw	r30, r24
    611a:	24 89       	ldd	r18, Z+20	; 0x14
    611c:	35 89       	ldd	r19, Z+21	; 0x15
    611e:	89 81       	ldd	r24, Y+1	; 0x01
    6120:	9a 81       	ldd	r25, Y+2	; 0x02
    6122:	f9 01       	movw	r30, r18
    6124:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    6126:	89 81       	ldd	r24, Y+1	; 0x01
    6128:	9a 81       	ldd	r25, Y+2	; 0x02
    612a:	fc 01       	movw	r30, r24
    612c:	87 89       	ldd	r24, Z+23	; 0x17
    612e:	88 2f       	mov	r24, r24
    6130:	90 e0       	ldi	r25, 0x00	; 0
    6132:	84 70       	andi	r24, 0x04	; 4
    6134:	99 27       	eor	r25, r25
    6136:	89 2b       	or	r24, r25
    6138:	09 f4       	brne	.+2      	; 0x613c <prvProcessReceivedCommands+0x112>
    613a:	7a c0       	rjmp	.+244    	; 0x6230 <prvProcessReceivedCommands+0x206>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    613c:	29 85       	ldd	r18, Y+9	; 0x09
    613e:	3a 85       	ldd	r19, Y+10	; 0x0a
    6140:	4b 85       	ldd	r20, Y+11	; 0x0b
    6142:	5c 85       	ldd	r21, Y+12	; 0x0c
    6144:	89 81       	ldd	r24, Y+1	; 0x01
    6146:	9a 81       	ldd	r25, Y+2	; 0x02
    6148:	fc 01       	movw	r30, r24
    614a:	86 85       	ldd	r24, Z+14	; 0x0e
    614c:	97 85       	ldd	r25, Z+15	; 0x0f
    614e:	a0 89       	ldd	r26, Z+16	; 0x10
    6150:	b1 89       	ldd	r27, Z+17	; 0x11
    6152:	82 0f       	add	r24, r18
    6154:	93 1f       	adc	r25, r19
    6156:	a4 1f       	adc	r26, r20
    6158:	b5 1f       	adc	r27, r21
    615a:	e9 81       	ldd	r30, Y+1	; 0x01
    615c:	fa 81       	ldd	r31, Y+2	; 0x02
    615e:	c1 2c       	mov	r12, r1
    6160:	d1 2c       	mov	r13, r1
    6162:	76 01       	movw	r14, r12
    6164:	00 e0       	ldi	r16, 0x00	; 0
    6166:	10 e0       	ldi	r17, 0x00	; 0
    6168:	9c 01       	movw	r18, r24
    616a:	ad 01       	movw	r20, r26
    616c:	60 e0       	ldi	r22, 0x00	; 0
    616e:	cf 01       	movw	r24, r30
    6170:	b3 dc       	rcall	.-1690   	; 0x5ad8 <xTimerGenericCommand>
    6172:	8f 83       	std	Y+7, r24	; 0x07
                    }
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                    break;
    6174:	5d c0       	rjmp	.+186    	; 0x6230 <prvProcessReceivedCommands+0x206>

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6176:	89 81       	ldd	r24, Y+1	; 0x01
    6178:	9a 81       	ldd	r25, Y+2	; 0x02
    617a:	fc 01       	movw	r30, r24
    617c:	87 89       	ldd	r24, Z+23	; 0x17
    617e:	28 2f       	mov	r18, r24
    6180:	2e 7f       	andi	r18, 0xFE	; 254
    6182:	89 81       	ldd	r24, Y+1	; 0x01
    6184:	9a 81       	ldd	r25, Y+2	; 0x02
    6186:	fc 01       	movw	r30, r24
    6188:	27 8b       	std	Z+23, r18	; 0x17
                    break;
    618a:	52 c0       	rjmp	.+164    	; 0x6230 <prvProcessReceivedCommands+0x206>

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    618c:	89 81       	ldd	r24, Y+1	; 0x01
    618e:	9a 81       	ldd	r25, Y+2	; 0x02
    6190:	fc 01       	movw	r30, r24
    6192:	87 89       	ldd	r24, Z+23	; 0x17
    6194:	28 2f       	mov	r18, r24
    6196:	21 60       	ori	r18, 0x01	; 1
    6198:	89 81       	ldd	r24, Y+1	; 0x01
    619a:	9a 81       	ldd	r25, Y+2	; 0x02
    619c:	fc 01       	movw	r30, r24
    619e:	27 8b       	std	Z+23, r18	; 0x17
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    61a0:	89 85       	ldd	r24, Y+9	; 0x09
    61a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a4:	ab 85       	ldd	r26, Y+11	; 0x0b
    61a6:	bc 85       	ldd	r27, Y+12	; 0x0c
    61a8:	29 81       	ldd	r18, Y+1	; 0x01
    61aa:	3a 81       	ldd	r19, Y+2	; 0x02
    61ac:	f9 01       	movw	r30, r18
    61ae:	86 87       	std	Z+14, r24	; 0x0e
    61b0:	97 87       	std	Z+15, r25	; 0x0f
    61b2:	a0 8b       	std	Z+16, r26	; 0x10
    61b4:	b1 8b       	std	Z+17, r27	; 0x11
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    61b6:	89 81       	ldd	r24, Y+1	; 0x01
    61b8:	9a 81       	ldd	r25, Y+2	; 0x02
    61ba:	fc 01       	movw	r30, r24
    61bc:	26 85       	ldd	r18, Z+14	; 0x0e
    61be:	37 85       	ldd	r19, Z+15	; 0x0f
    61c0:	40 89       	ldd	r20, Z+16	; 0x10
    61c2:	51 89       	ldd	r21, Z+17	; 0x11
    61c4:	8b 81       	ldd	r24, Y+3	; 0x03
    61c6:	9c 81       	ldd	r25, Y+4	; 0x04
    61c8:	ad 81       	ldd	r26, Y+5	; 0x05
    61ca:	be 81       	ldd	r27, Y+6	; 0x06
    61cc:	82 0f       	add	r24, r18
    61ce:	93 1f       	adc	r25, r19
    61d0:	a4 1f       	adc	r26, r20
    61d2:	b5 1f       	adc	r27, r21
    61d4:	eb 80       	ldd	r14, Y+3	; 0x03
    61d6:	fc 80       	ldd	r15, Y+4	; 0x04
    61d8:	0d 81       	ldd	r16, Y+5	; 0x05
    61da:	1e 81       	ldd	r17, Y+6	; 0x06
    61dc:	2b 81       	ldd	r18, Y+3	; 0x03
    61de:	3c 81       	ldd	r19, Y+4	; 0x04
    61e0:	4d 81       	ldd	r20, Y+5	; 0x05
    61e2:	5e 81       	ldd	r21, Y+6	; 0x06
    61e4:	e9 81       	ldd	r30, Y+1	; 0x01
    61e6:	fa 81       	ldd	r31, Y+2	; 0x02
    61e8:	67 01       	movw	r12, r14
    61ea:	78 01       	movw	r14, r16
    61ec:	89 01       	movw	r16, r18
    61ee:	9a 01       	movw	r18, r20
    61f0:	ac 01       	movw	r20, r24
    61f2:	bd 01       	movw	r22, r26
    61f4:	cf 01       	movw	r24, r30
    61f6:	7a de       	rcall	.-780    	; 0x5eec <prvInsertTimerInActiveList>
                    break;
    61f8:	1b c0       	rjmp	.+54     	; 0x6230 <prvProcessReceivedCommands+0x206>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    61fa:	89 81       	ldd	r24, Y+1	; 0x01
    61fc:	9a 81       	ldd	r25, Y+2	; 0x02
    61fe:	fc 01       	movw	r30, r24
    6200:	87 89       	ldd	r24, Z+23	; 0x17
    6202:	88 2f       	mov	r24, r24
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	82 70       	andi	r24, 0x02	; 2
    6208:	99 27       	eor	r25, r25
    620a:	89 2b       	or	r24, r25
    620c:	29 f4       	brne	.+10     	; 0x6218 <prvProcessReceivedCommands+0x1ee>
                        {
                            vPortFree( pxTimer );
    620e:	89 81       	ldd	r24, Y+1	; 0x01
    6210:	9a 81       	ldd	r25, Y+2	; 0x02
    6212:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <vPortFree>
    6216:	0c c0       	rjmp	.+24     	; 0x6230 <prvProcessReceivedCommands+0x206>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    6218:	89 81       	ldd	r24, Y+1	; 0x01
    621a:	9a 81       	ldd	r25, Y+2	; 0x02
    621c:	fc 01       	movw	r30, r24
    621e:	87 89       	ldd	r24, Z+23	; 0x17
    6220:	28 2f       	mov	r18, r24
    6222:	2e 7f       	andi	r18, 0xFE	; 254
    6224:	89 81       	ldd	r24, Y+1	; 0x01
    6226:	9a 81       	ldd	r25, Y+2	; 0x02
    6228:	fc 01       	movw	r30, r24
    622a:	27 8b       	std	Z+23, r18	; 0x17
                        no need to free the memory - just mark the timer as
                        "not active". */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                    }
                    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                    break;
    622c:	01 c0       	rjmp	.+2      	; 0x6230 <prvProcessReceivedCommands+0x206>

                default    :
                    /* Don't expect to get here. */
                    break;
    622e:	00 00       	nop
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    6230:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    6234:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    6238:	be 01       	movw	r22, r28
    623a:	68 5f       	subi	r22, 0xF8	; 248
    623c:	7f 4f       	sbci	r23, 0xFF	; 255
    623e:	20 e0       	ldi	r18, 0x00	; 0
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	a9 01       	movw	r20, r18
    6244:	0e 94 f7 15 	call	0x2bee	; 0x2bee <xQueueReceive>
    6248:	88 23       	and	r24, r24
    624a:	09 f0       	breq	.+2      	; 0x624e <prvProcessReceivedCommands+0x224>
    624c:	ff ce       	rjmp	.-514    	; 0x604c <prvProcessReceivedCommands+0x22>
                    /* Don't expect to get here. */
                    break;
            }
        }
    }
}
    624e:	00 00       	nop
    6250:	2f 96       	adiw	r28, 0x0f	; 15
    6252:	0f b6       	in	r0, 0x3f	; 63
    6254:	f8 94       	cli
    6256:	de bf       	out	0x3e, r29	; 62
    6258:	0f be       	out	0x3f, r0	; 63
    625a:	cd bf       	out	0x3d, r28	; 61
    625c:	df 91       	pop	r29
    625e:	cf 91       	pop	r28
    6260:	1f 91       	pop	r17
    6262:	0f 91       	pop	r16
    6264:	ff 90       	pop	r15
    6266:	ef 90       	pop	r14
    6268:	df 90       	pop	r13
    626a:	cf 90       	pop	r12
    626c:	08 95       	ret

0000626e <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
    626e:	cf 92       	push	r12
    6270:	df 92       	push	r13
    6272:	ef 92       	push	r14
    6274:	ff 92       	push	r15
    6276:	0f 93       	push	r16
    6278:	1f 93       	push	r17
    627a:	cf 93       	push	r28
    627c:	df 93       	push	r29
    627e:	cd b7       	in	r28, 0x3d	; 61
    6280:	de b7       	in	r29, 0x3e	; 62
    6282:	2d 97       	sbiw	r28, 0x0d	; 13
    6284:	0f b6       	in	r0, 0x3f	; 63
    6286:	f8 94       	cli
    6288:	de bf       	out	0x3e, r29	; 62
    628a:	0f be       	out	0x3f, r0	; 63
    628c:	cd bf       	out	0x3d, r28	; 61

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    628e:	85 c0       	rjmp	.+266    	; 0x639a <prvSwitchTimerLists+0x12c>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    6290:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    6294:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    6298:	fc 01       	movw	r30, r24
    629a:	87 81       	ldd	r24, Z+7	; 0x07
    629c:	90 85       	ldd	r25, Z+8	; 0x08
    629e:	fc 01       	movw	r30, r24
    62a0:	80 81       	ld	r24, Z
    62a2:	91 81       	ldd	r25, Z+1	; 0x01
    62a4:	a2 81       	ldd	r26, Z+2	; 0x02
    62a6:	b3 81       	ldd	r27, Z+3	; 0x03
    62a8:	89 83       	std	Y+1, r24	; 0x01
    62aa:	9a 83       	std	Y+2, r25	; 0x02
    62ac:	ab 83       	std	Y+3, r26	; 0x03
    62ae:	bc 83       	std	Y+4, r27	; 0x04

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    62b0:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    62b4:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    62b8:	fc 01       	movw	r30, r24
    62ba:	87 81       	ldd	r24, Z+7	; 0x07
    62bc:	90 85       	ldd	r25, Z+8	; 0x08
    62be:	fc 01       	movw	r30, r24
    62c0:	80 85       	ldd	r24, Z+8	; 0x08
    62c2:	91 85       	ldd	r25, Z+9	; 0x09
    62c4:	9e 83       	std	Y+6, r25	; 0x06
    62c6:	8d 83       	std	Y+5, r24	; 0x05
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    62c8:	8d 81       	ldd	r24, Y+5	; 0x05
    62ca:	9e 81       	ldd	r25, Y+6	; 0x06
    62cc:	02 96       	adiw	r24, 0x02	; 2
    62ce:	0e 94 37 10 	call	0x206e	; 0x206e <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    62d2:	8d 81       	ldd	r24, Y+5	; 0x05
    62d4:	9e 81       	ldd	r25, Y+6	; 0x06
    62d6:	fc 01       	movw	r30, r24
    62d8:	24 89       	ldd	r18, Z+20	; 0x14
    62da:	35 89       	ldd	r19, Z+21	; 0x15
    62dc:	8d 81       	ldd	r24, Y+5	; 0x05
    62de:	9e 81       	ldd	r25, Y+6	; 0x06
    62e0:	f9 01       	movw	r30, r18
    62e2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    62e4:	8d 81       	ldd	r24, Y+5	; 0x05
    62e6:	9e 81       	ldd	r25, Y+6	; 0x06
    62e8:	fc 01       	movw	r30, r24
    62ea:	87 89       	ldd	r24, Z+23	; 0x17
    62ec:	88 2f       	mov	r24, r24
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	84 70       	andi	r24, 0x04	; 4
    62f2:	99 27       	eor	r25, r25
    62f4:	89 2b       	or	r24, r25
    62f6:	09 f4       	brne	.+2      	; 0x62fa <prvSwitchTimerLists+0x8c>
    62f8:	50 c0       	rjmp	.+160    	; 0x639a <prvSwitchTimerLists+0x12c>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    62fa:	8d 81       	ldd	r24, Y+5	; 0x05
    62fc:	9e 81       	ldd	r25, Y+6	; 0x06
    62fe:	fc 01       	movw	r30, r24
    6300:	26 85       	ldd	r18, Z+14	; 0x0e
    6302:	37 85       	ldd	r19, Z+15	; 0x0f
    6304:	40 89       	ldd	r20, Z+16	; 0x10
    6306:	51 89       	ldd	r21, Z+17	; 0x11
    6308:	89 81       	ldd	r24, Y+1	; 0x01
    630a:	9a 81       	ldd	r25, Y+2	; 0x02
    630c:	ab 81       	ldd	r26, Y+3	; 0x03
    630e:	bc 81       	ldd	r27, Y+4	; 0x04
    6310:	82 0f       	add	r24, r18
    6312:	93 1f       	adc	r25, r19
    6314:	a4 1f       	adc	r26, r20
    6316:	b5 1f       	adc	r27, r21
    6318:	8f 83       	std	Y+7, r24	; 0x07
    631a:	98 87       	std	Y+8, r25	; 0x08
    631c:	a9 87       	std	Y+9, r26	; 0x09
    631e:	ba 87       	std	Y+10, r27	; 0x0a
            if( xReloadTime > xNextExpireTime )
    6320:	2f 81       	ldd	r18, Y+7	; 0x07
    6322:	38 85       	ldd	r19, Y+8	; 0x08
    6324:	49 85       	ldd	r20, Y+9	; 0x09
    6326:	5a 85       	ldd	r21, Y+10	; 0x0a
    6328:	89 81       	ldd	r24, Y+1	; 0x01
    632a:	9a 81       	ldd	r25, Y+2	; 0x02
    632c:	ab 81       	ldd	r26, Y+3	; 0x03
    632e:	bc 81       	ldd	r27, Y+4	; 0x04
    6330:	82 17       	cp	r24, r18
    6332:	93 07       	cpc	r25, r19
    6334:	a4 07       	cpc	r26, r20
    6336:	b5 07       	cpc	r27, r21
    6338:	f8 f4       	brcc	.+62     	; 0x6378 <prvSwitchTimerLists+0x10a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    633a:	2d 81       	ldd	r18, Y+5	; 0x05
    633c:	3e 81       	ldd	r19, Y+6	; 0x06
    633e:	8f 81       	ldd	r24, Y+7	; 0x07
    6340:	98 85       	ldd	r25, Y+8	; 0x08
    6342:	a9 85       	ldd	r26, Y+9	; 0x09
    6344:	ba 85       	ldd	r27, Y+10	; 0x0a
    6346:	f9 01       	movw	r30, r18
    6348:	82 83       	std	Z+2, r24	; 0x02
    634a:	93 83       	std	Z+3, r25	; 0x03
    634c:	a4 83       	std	Z+4, r26	; 0x04
    634e:	b5 83       	std	Z+5, r27	; 0x05
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    6350:	8d 81       	ldd	r24, Y+5	; 0x05
    6352:	9e 81       	ldd	r25, Y+6	; 0x06
    6354:	2d 81       	ldd	r18, Y+5	; 0x05
    6356:	3e 81       	ldd	r19, Y+6	; 0x06
    6358:	fc 01       	movw	r30, r24
    635a:	33 87       	std	Z+11, r19	; 0x0b
    635c:	22 87       	std	Z+10, r18	; 0x0a
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    635e:	8d 81       	ldd	r24, Y+5	; 0x05
    6360:	9e 81       	ldd	r25, Y+6	; 0x06
    6362:	9c 01       	movw	r18, r24
    6364:	2e 5f       	subi	r18, 0xFE	; 254
    6366:	3f 4f       	sbci	r19, 0xFF	; 255
    6368:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    636c:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    6370:	b9 01       	movw	r22, r18
    6372:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <vListInsert>
    6376:	11 c0       	rjmp	.+34     	; 0x639a <prvSwitchTimerLists+0x12c>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    6378:	89 81       	ldd	r24, Y+1	; 0x01
    637a:	9a 81       	ldd	r25, Y+2	; 0x02
    637c:	ab 81       	ldd	r26, Y+3	; 0x03
    637e:	bc 81       	ldd	r27, Y+4	; 0x04
    6380:	ed 81       	ldd	r30, Y+5	; 0x05
    6382:	fe 81       	ldd	r31, Y+6	; 0x06
    6384:	c1 2c       	mov	r12, r1
    6386:	d1 2c       	mov	r13, r1
    6388:	76 01       	movw	r14, r12
    638a:	00 e0       	ldi	r16, 0x00	; 0
    638c:	10 e0       	ldi	r17, 0x00	; 0
    638e:	9c 01       	movw	r18, r24
    6390:	ad 01       	movw	r20, r26
    6392:	60 e0       	ldi	r22, 0x00	; 0
    6394:	cf 01       	movw	r24, r30
    6396:	a0 db       	rcall	.-2240   	; 0x5ad8 <xTimerGenericCommand>
    6398:	8b 87       	std	Y+11, r24	; 0x0b

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    639a:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    639e:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    63a2:	fc 01       	movw	r30, r24
    63a4:	80 81       	ld	r24, Z
    63a6:	88 23       	and	r24, r24
    63a8:	09 f0       	breq	.+2      	; 0x63ac <prvSwitchTimerLists+0x13e>
    63aa:	72 cf       	rjmp	.-284    	; 0x6290 <prvSwitchTimerLists+0x22>
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    63ac:	80 91 02 18 	lds	r24, 0x1802	; 0x801802 <pxCurrentTimerList>
    63b0:	90 91 03 18 	lds	r25, 0x1803	; 0x801803 <pxCurrentTimerList+0x1>
    63b4:	9d 87       	std	Y+13, r25	; 0x0d
    63b6:	8c 87       	std	Y+12, r24	; 0x0c
    pxCurrentTimerList = pxOverflowTimerList;
    63b8:	80 91 04 18 	lds	r24, 0x1804	; 0x801804 <pxOverflowTimerList>
    63bc:	90 91 05 18 	lds	r25, 0x1805	; 0x801805 <pxOverflowTimerList+0x1>
    63c0:	90 93 03 18 	sts	0x1803, r25	; 0x801803 <pxCurrentTimerList+0x1>
    63c4:	80 93 02 18 	sts	0x1802, r24	; 0x801802 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    63c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    63ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    63cc:	90 93 05 18 	sts	0x1805, r25	; 0x801805 <pxOverflowTimerList+0x1>
    63d0:	80 93 04 18 	sts	0x1804, r24	; 0x801804 <pxOverflowTimerList>
}
    63d4:	00 00       	nop
    63d6:	2d 96       	adiw	r28, 0x0d	; 13
    63d8:	0f b6       	in	r0, 0x3f	; 63
    63da:	f8 94       	cli
    63dc:	de bf       	out	0x3e, r29	; 62
    63de:	0f be       	out	0x3f, r0	; 63
    63e0:	cd bf       	out	0x3d, r28	; 61
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	1f 91       	pop	r17
    63e8:	0f 91       	pop	r16
    63ea:	ff 90       	pop	r15
    63ec:	ef 90       	pop	r14
    63ee:	df 90       	pop	r13
    63f0:	cf 90       	pop	r12
    63f2:	08 95       	ret

000063f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
    63f4:	cf 93       	push	r28
    63f6:	df 93       	push	r29
    63f8:	cd b7       	in	r28, 0x3d	; 61
    63fa:	de b7       	in	r29, 0x3e	; 62
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    63fc:	0f b6       	in	r0, 0x3f	; 63
    63fe:	f8 94       	cli
    6400:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    6402:	80 91 06 18 	lds	r24, 0x1806	; 0x801806 <xTimerQueue>
    6406:	90 91 07 18 	lds	r25, 0x1807	; 0x801807 <xTimerQueue+0x1>
    640a:	89 2b       	or	r24, r25
    640c:	e9 f4       	brne	.+58     	; 0x6448 <prvCheckForValidListAndQueue+0x54>
        {
            vListInitialise( &xActiveTimerList1 );
    640e:	8c ee       	ldi	r24, 0xEC	; 236
    6410:	97 e1       	ldi	r25, 0x17	; 23
    6412:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    6416:	87 ef       	ldi	r24, 0xF7	; 247
    6418:	97 e1       	ldi	r25, 0x17	; 23
    641a:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    641e:	8c ee       	ldi	r24, 0xEC	; 236
    6420:	97 e1       	ldi	r25, 0x17	; 23
    6422:	90 93 03 18 	sts	0x1803, r25	; 0x801803 <pxCurrentTimerList+0x1>
    6426:	80 93 02 18 	sts	0x1802, r24	; 0x801802 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    642a:	87 ef       	ldi	r24, 0xF7	; 247
    642c:	97 e1       	ldi	r25, 0x17	; 23
    642e:	90 93 05 18 	sts	0x1805, r25	; 0x801805 <pxOverflowTimerList+0x1>
    6432:	80 93 04 18 	sts	0x1804, r24	; 0x801804 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    6436:	40 e0       	ldi	r20, 0x00	; 0
    6438:	67 e0       	ldi	r22, 0x07	; 7
    643a:	8a e0       	ldi	r24, 0x0A	; 10
    643c:	0e 94 08 14 	call	0x2810	; 0x2810 <xQueueGenericCreate>
    6440:	90 93 07 18 	sts	0x1807, r25	; 0x801807 <xTimerQueue+0x1>
    6444:	80 93 06 18 	sts	0x1806, r24	; 0x801806 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    6448:	0f 90       	pop	r0
    644a:	0f be       	out	0x3f, r0	; 63
}
    644c:	00 00       	nop
    644e:	df 91       	pop	r29
    6450:	cf 91       	pop	r28
    6452:	08 95       	ret

00006454 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    6454:	cf 93       	push	r28
    6456:	df 93       	push	r29
    6458:	cd b7       	in	r28, 0x3d	; 61
    645a:	de b7       	in	r29, 0x3e	; 62
//     if (serialEventRun) serialEventRun();
}
    645c:	00 00       	nop
    645e:	df 91       	pop	r29
    6460:	cf 91       	pop	r28
    6462:	08 95       	ret

00006464 <vApplicationMallocFailedHook>:
    This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    6464:	cf 93       	push	r28
    6466:	df 93       	push	r29
    6468:	cd b7       	in	r28, 0x3d	; 61
    646a:	de b7       	in	r29, 0x3e	; 62
    646c:	2e 97       	sbiw	r28, 0x0e	; 14
    646e:	0f b6       	in	r0, 0x3f	; 63
    6470:	f8 94       	cli
    6472:	de bf       	out	0x3e, r29	; 62
    6474:	0f be       	out	0x3f, r0	; 63
    6476:	cd bf       	out	0x3d, r28	; 61
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    6478:	84 e2       	ldi	r24, 0x24	; 36
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	24 e2       	ldi	r18, 0x24	; 36
    647e:	30 e0       	ldi	r19, 0x00	; 0
    6480:	f9 01       	movw	r30, r18
    6482:	20 81       	ld	r18, Z
    6484:	20 68       	ori	r18, 0x80	; 128
    6486:	fc 01       	movw	r30, r24
    6488:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    648a:	85 e2       	ldi	r24, 0x25	; 37
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	25 e2       	ldi	r18, 0x25	; 37
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	f9 01       	movw	r30, r18
    6494:	20 81       	ld	r18, Z
    6496:	20 68       	ori	r18, 0x80	; 128
    6498:	fc 01       	movw	r30, r24
    649a:	20 83       	st	Z, r18
    649c:	80 e0       	ldi	r24, 0x00	; 0
    649e:	90 e0       	ldi	r25, 0x00	; 0
    64a0:	a8 e4       	ldi	r26, 0x48	; 72
    64a2:	b2 e4       	ldi	r27, 0x42	; 66
    64a4:	89 83       	std	Y+1, r24	; 0x01
    64a6:	9a 83       	std	Y+2, r25	; 0x02
    64a8:	ab 83       	std	Y+3, r26	; 0x03
    64aa:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    64ac:	20 e0       	ldi	r18, 0x00	; 0
    64ae:	30 e0       	ldi	r19, 0x00	; 0
    64b0:	4a e7       	ldi	r20, 0x7A	; 122
    64b2:	55 e4       	ldi	r21, 0x45	; 69
    64b4:	69 81       	ldd	r22, Y+1	; 0x01
    64b6:	7a 81       	ldd	r23, Y+2	; 0x02
    64b8:	8b 81       	ldd	r24, Y+3	; 0x03
    64ba:	9c 81       	ldd	r25, Y+4	; 0x04
    64bc:	7c d1       	rcall	.+760    	; 0x67b6 <__mulsf3>
    64be:	dc 01       	movw	r26, r24
    64c0:	cb 01       	movw	r24, r22
    64c2:	8d 83       	std	Y+5, r24	; 0x05
    64c4:	9e 83       	std	Y+6, r25	; 0x06
    64c6:	af 83       	std	Y+7, r26	; 0x07
    64c8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    64ca:	20 e0       	ldi	r18, 0x00	; 0
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	40 e8       	ldi	r20, 0x80	; 128
    64d0:	5f e3       	ldi	r21, 0x3F	; 63
    64d2:	6d 81       	ldd	r22, Y+5	; 0x05
    64d4:	7e 81       	ldd	r23, Y+6	; 0x06
    64d6:	8f 81       	ldd	r24, Y+7	; 0x07
    64d8:	98 85       	ldd	r25, Y+8	; 0x08
    64da:	ec d0       	rcall	.+472    	; 0x66b4 <__cmpsf2>
    64dc:	88 23       	and	r24, r24
    64de:	2c f4       	brge	.+10     	; 0x64ea <vApplicationMallocFailedHook+0x86>
		__ticks = 1;
    64e0:	81 e0       	ldi	r24, 0x01	; 1
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	9a 87       	std	Y+10, r25	; 0x0a
    64e6:	89 87       	std	Y+9, r24	; 0x09
    64e8:	3b c0       	rjmp	.+118    	; 0x6560 <vApplicationMallocFailedHook+0xfc>
	else if (__tmp > 65535)
    64ea:	20 e0       	ldi	r18, 0x00	; 0
    64ec:	3f ef       	ldi	r19, 0xFF	; 255
    64ee:	4f e7       	ldi	r20, 0x7F	; 127
    64f0:	57 e4       	ldi	r21, 0x47	; 71
    64f2:	6d 81       	ldd	r22, Y+5	; 0x05
    64f4:	7e 81       	ldd	r23, Y+6	; 0x06
    64f6:	8f 81       	ldd	r24, Y+7	; 0x07
    64f8:	98 85       	ldd	r25, Y+8	; 0x08
    64fa:	59 d1       	rcall	.+690    	; 0x67ae <__gesf2>
    64fc:	18 16       	cp	r1, r24
    64fe:	3c f5       	brge	.+78     	; 0x654e <vApplicationMallocFailedHook+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6500:	20 e0       	ldi	r18, 0x00	; 0
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	40 e2       	ldi	r20, 0x20	; 32
    6506:	51 e4       	ldi	r21, 0x41	; 65
    6508:	69 81       	ldd	r22, Y+1	; 0x01
    650a:	7a 81       	ldd	r23, Y+2	; 0x02
    650c:	8b 81       	ldd	r24, Y+3	; 0x03
    650e:	9c 81       	ldd	r25, Y+4	; 0x04
    6510:	52 d1       	rcall	.+676    	; 0x67b6 <__mulsf3>
    6512:	dc 01       	movw	r26, r24
    6514:	cb 01       	movw	r24, r22
    6516:	bc 01       	movw	r22, r24
    6518:	cd 01       	movw	r24, r26
    651a:	d0 d0       	rcall	.+416    	; 0x66bc <__fixunssfsi>
    651c:	dc 01       	movw	r26, r24
    651e:	cb 01       	movw	r24, r22
    6520:	9a 87       	std	Y+10, r25	; 0x0a
    6522:	89 87       	std	Y+9, r24	; 0x09
    6524:	0f c0       	rjmp	.+30     	; 0x6544 <vApplicationMallocFailedHook+0xe0>
    6526:	80 e9       	ldi	r24, 0x90	; 144
    6528:	91 e0       	ldi	r25, 0x01	; 1
    652a:	9c 87       	std	Y+12, r25	; 0x0c
    652c:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    652e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6530:	9c 85       	ldd	r25, Y+12	; 0x0c
    6532:	01 97       	sbiw	r24, 0x01	; 1
    6534:	f1 f7       	brne	.-4      	; 0x6532 <vApplicationMallocFailedHook+0xce>
    6536:	9c 87       	std	Y+12, r25	; 0x0c
    6538:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    653a:	89 85       	ldd	r24, Y+9	; 0x09
    653c:	9a 85       	ldd	r25, Y+10	; 0x0a
    653e:	01 97       	sbiw	r24, 0x01	; 1
    6540:	9a 87       	std	Y+10, r25	; 0x0a
    6542:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6544:	89 85       	ldd	r24, Y+9	; 0x09
    6546:	9a 85       	ldd	r25, Y+10	; 0x0a
    6548:	89 2b       	or	r24, r25
    654a:	69 f7       	brne	.-38     	; 0x6526 <vApplicationMallocFailedHook+0xc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    654c:	13 c0       	rjmp	.+38     	; 0x6574 <vApplicationMallocFailedHook+0x110>
    654e:	6d 81       	ldd	r22, Y+5	; 0x05
    6550:	7e 81       	ldd	r23, Y+6	; 0x06
    6552:	8f 81       	ldd	r24, Y+7	; 0x07
    6554:	98 85       	ldd	r25, Y+8	; 0x08
    6556:	b2 d0       	rcall	.+356    	; 0x66bc <__fixunssfsi>
    6558:	dc 01       	movw	r26, r24
    655a:	cb 01       	movw	r24, r22
    655c:	9a 87       	std	Y+10, r25	; 0x0a
    655e:	89 87       	std	Y+9, r24	; 0x09
    6560:	89 85       	ldd	r24, Y+9	; 0x09
    6562:	9a 85       	ldd	r25, Y+10	; 0x0a
    6564:	9e 87       	std	Y+14, r25	; 0x0e
    6566:	8d 87       	std	Y+13, r24	; 0x0d
    6568:	8d 85       	ldd	r24, Y+13	; 0x0d
    656a:	9e 85       	ldd	r25, Y+14	; 0x0e
    656c:	01 97       	sbiw	r24, 0x01	; 1
    656e:	f1 f7       	brne	.-4      	; 0x656c <vApplicationMallocFailedHook+0x108>
    6570:	9e 87       	std	Y+14, r25	; 0x0e
    6572:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    6574:	83 e2       	ldi	r24, 0x23	; 35
    6576:	90 e0       	ldi	r25, 0x00	; 0
    6578:	23 e2       	ldi	r18, 0x23	; 35
    657a:	30 e0       	ldi	r19, 0x00	; 0
    657c:	f9 01       	movw	r30, r18
    657e:	20 81       	ld	r18, Z
    6580:	20 68       	ori	r18, 0x80	; 128
    6582:	fc 01       	movw	r30, r24
    6584:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED fast blink.

#endif

    }
    6586:	8a cf       	rjmp	.-236    	; 0x649c <vApplicationMallocFailedHook+0x38>

00006588 <vApplicationStackOverflowHook>:
   This routine is referenced in the task.c file of FreeRTOS as an extern.
\*---------------------------------------------------------------------------*/
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	cd b7       	in	r28, 0x3d	; 61
    658e:	de b7       	in	r29, 0x3e	; 62
    6590:	62 97       	sbiw	r28, 0x12	; 18
    6592:	0f b6       	in	r0, 0x3f	; 63
    6594:	f8 94       	cli
    6596:	de bf       	out	0x3e, r29	; 62
    6598:	0f be       	out	0x3f, r0	; 63
    659a:	cd bf       	out	0x3d, r28	; 61
    659c:	98 8b       	std	Y+16, r25	; 0x10
    659e:	8f 87       	std	Y+15, r24	; 0x0f
    65a0:	7a 8b       	std	Y+18, r23	; 0x12
    65a2:	69 8b       	std	Y+17, r22	; 0x11
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    65a4:	84 e2       	ldi	r24, 0x24	; 36
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	24 e2       	ldi	r18, 0x24	; 36
    65aa:	30 e0       	ldi	r19, 0x00	; 0
    65ac:	f9 01       	movw	r30, r18
    65ae:	20 81       	ld	r18, Z
    65b0:	20 68       	ori	r18, 0x80	; 128
    65b2:	fc 01       	movw	r30, r24
    65b4:	20 83       	st	Z, r18
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    65b6:	85 e2       	ldi	r24, 0x25	; 37
    65b8:	90 e0       	ldi	r25, 0x00	; 0
    65ba:	25 e2       	ldi	r18, 0x25	; 37
    65bc:	30 e0       	ldi	r19, 0x00	; 0
    65be:	f9 01       	movw	r30, r18
    65c0:	20 81       	ld	r18, Z
    65c2:	20 68       	ori	r18, 0x80	; 128
    65c4:	fc 01       	movw	r30, r24
    65c6:	20 83       	st	Z, r18
    65c8:	80 e0       	ldi	r24, 0x00	; 0
    65ca:	90 e0       	ldi	r25, 0x00	; 0
    65cc:	aa ef       	ldi	r26, 0xFA	; 250
    65ce:	b4 e4       	ldi	r27, 0x44	; 68
    65d0:	89 83       	std	Y+1, r24	; 0x01
    65d2:	9a 83       	std	Y+2, r25	; 0x02
    65d4:	ab 83       	std	Y+3, r26	; 0x03
    65d6:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    65d8:	20 e0       	ldi	r18, 0x00	; 0
    65da:	30 e0       	ldi	r19, 0x00	; 0
    65dc:	4a e7       	ldi	r20, 0x7A	; 122
    65de:	55 e4       	ldi	r21, 0x45	; 69
    65e0:	69 81       	ldd	r22, Y+1	; 0x01
    65e2:	7a 81       	ldd	r23, Y+2	; 0x02
    65e4:	8b 81       	ldd	r24, Y+3	; 0x03
    65e6:	9c 81       	ldd	r25, Y+4	; 0x04
    65e8:	e6 d0       	rcall	.+460    	; 0x67b6 <__mulsf3>
    65ea:	dc 01       	movw	r26, r24
    65ec:	cb 01       	movw	r24, r22
    65ee:	8d 83       	std	Y+5, r24	; 0x05
    65f0:	9e 83       	std	Y+6, r25	; 0x06
    65f2:	af 83       	std	Y+7, r26	; 0x07
    65f4:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    65f6:	20 e0       	ldi	r18, 0x00	; 0
    65f8:	30 e0       	ldi	r19, 0x00	; 0
    65fa:	40 e8       	ldi	r20, 0x80	; 128
    65fc:	5f e3       	ldi	r21, 0x3F	; 63
    65fe:	6d 81       	ldd	r22, Y+5	; 0x05
    6600:	7e 81       	ldd	r23, Y+6	; 0x06
    6602:	8f 81       	ldd	r24, Y+7	; 0x07
    6604:	98 85       	ldd	r25, Y+8	; 0x08
    6606:	56 d0       	rcall	.+172    	; 0x66b4 <__cmpsf2>
    6608:	88 23       	and	r24, r24
    660a:	2c f4       	brge	.+10     	; 0x6616 <vApplicationStackOverflowHook+0x8e>
		__ticks = 1;
    660c:	81 e0       	ldi	r24, 0x01	; 1
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	9a 87       	std	Y+10, r25	; 0x0a
    6612:	89 87       	std	Y+9, r24	; 0x09
    6614:	3b c0       	rjmp	.+118    	; 0x668c <vApplicationStackOverflowHook+0x104>
	else if (__tmp > 65535)
    6616:	20 e0       	ldi	r18, 0x00	; 0
    6618:	3f ef       	ldi	r19, 0xFF	; 255
    661a:	4f e7       	ldi	r20, 0x7F	; 127
    661c:	57 e4       	ldi	r21, 0x47	; 71
    661e:	6d 81       	ldd	r22, Y+5	; 0x05
    6620:	7e 81       	ldd	r23, Y+6	; 0x06
    6622:	8f 81       	ldd	r24, Y+7	; 0x07
    6624:	98 85       	ldd	r25, Y+8	; 0x08
    6626:	c3 d0       	rcall	.+390    	; 0x67ae <__gesf2>
    6628:	18 16       	cp	r1, r24
    662a:	3c f5       	brge	.+78     	; 0x667a <vApplicationStackOverflowHook+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    662c:	20 e0       	ldi	r18, 0x00	; 0
    662e:	30 e0       	ldi	r19, 0x00	; 0
    6630:	40 e2       	ldi	r20, 0x20	; 32
    6632:	51 e4       	ldi	r21, 0x41	; 65
    6634:	69 81       	ldd	r22, Y+1	; 0x01
    6636:	7a 81       	ldd	r23, Y+2	; 0x02
    6638:	8b 81       	ldd	r24, Y+3	; 0x03
    663a:	9c 81       	ldd	r25, Y+4	; 0x04
    663c:	bc d0       	rcall	.+376    	; 0x67b6 <__mulsf3>
    663e:	dc 01       	movw	r26, r24
    6640:	cb 01       	movw	r24, r22
    6642:	bc 01       	movw	r22, r24
    6644:	cd 01       	movw	r24, r26
    6646:	3a d0       	rcall	.+116    	; 0x66bc <__fixunssfsi>
    6648:	dc 01       	movw	r26, r24
    664a:	cb 01       	movw	r24, r22
    664c:	9a 87       	std	Y+10, r25	; 0x0a
    664e:	89 87       	std	Y+9, r24	; 0x09
    6650:	0f c0       	rjmp	.+30     	; 0x6670 <vApplicationStackOverflowHook+0xe8>
    6652:	80 e9       	ldi	r24, 0x90	; 144
    6654:	91 e0       	ldi	r25, 0x01	; 1
    6656:	9c 87       	std	Y+12, r25	; 0x0c
    6658:	8b 87       	std	Y+11, r24	; 0x0b
    665a:	8b 85       	ldd	r24, Y+11	; 0x0b
    665c:	9c 85       	ldd	r25, Y+12	; 0x0c
    665e:	01 97       	sbiw	r24, 0x01	; 1
    6660:	f1 f7       	brne	.-4      	; 0x665e <vApplicationStackOverflowHook+0xd6>
    6662:	9c 87       	std	Y+12, r25	; 0x0c
    6664:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6666:	89 85       	ldd	r24, Y+9	; 0x09
    6668:	9a 85       	ldd	r25, Y+10	; 0x0a
    666a:	01 97       	sbiw	r24, 0x01	; 1
    666c:	9a 87       	std	Y+10, r25	; 0x0a
    666e:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6670:	89 85       	ldd	r24, Y+9	; 0x09
    6672:	9a 85       	ldd	r25, Y+10	; 0x0a
    6674:	89 2b       	or	r24, r25
    6676:	69 f7       	brne	.-38     	; 0x6652 <vApplicationStackOverflowHook+0xca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6678:	13 c0       	rjmp	.+38     	; 0x66a0 <vApplicationStackOverflowHook+0x118>
    667a:	6d 81       	ldd	r22, Y+5	; 0x05
    667c:	7e 81       	ldd	r23, Y+6	; 0x06
    667e:	8f 81       	ldd	r24, Y+7	; 0x07
    6680:	98 85       	ldd	r25, Y+8	; 0x08
    6682:	1c d0       	rcall	.+56     	; 0x66bc <__fixunssfsi>
    6684:	dc 01       	movw	r26, r24
    6686:	cb 01       	movw	r24, r22
    6688:	9a 87       	std	Y+10, r25	; 0x0a
    668a:	89 87       	std	Y+9, r24	; 0x09
    668c:	89 85       	ldd	r24, Y+9	; 0x09
    668e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6690:	9e 87       	std	Y+14, r25	; 0x0e
    6692:	8d 87       	std	Y+13, r24	; 0x0d
    6694:	8d 85       	ldd	r24, Y+13	; 0x0d
    6696:	9e 85       	ldd	r25, Y+14	; 0x0e
    6698:	01 97       	sbiw	r24, 0x01	; 1
    669a:	f1 f7       	brne	.-4      	; 0x6698 <vApplicationStackOverflowHook+0x110>
    669c:	9e 87       	std	Y+14, r25	; 0x0e
    669e:	8d 87       	std	Y+13, r24	; 0x0d
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    66a0:	83 e2       	ldi	r24, 0x23	; 35
    66a2:	90 e0       	ldi	r25, 0x00	; 0
    66a4:	23 e2       	ldi	r18, 0x23	; 35
    66a6:	30 e0       	ldi	r19, 0x00	; 0
    66a8:	f9 01       	movw	r30, r18
    66aa:	20 81       	ld	r18, Z
    66ac:	20 68       	ori	r18, 0x80	; 128
    66ae:	fc 01       	movw	r30, r24
    66b0:	20 83       	st	Z, r18
#elif defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega16U4__) // assume we're using an Arduino Leonardo with 32u4
        PINC  |= _BV(PINC7);       // Main (red PC7) LED toggle. Main LED slow blink.

#endif

    }
    66b2:	8a cf       	rjmp	.-236    	; 0x65c8 <vApplicationStackOverflowHook+0x40>

000066b4 <__cmpsf2>:
    66b4:	2f d0       	rcall	.+94     	; 0x6714 <__fp_cmp>
    66b6:	08 f4       	brcc	.+2      	; 0x66ba <__cmpsf2+0x6>
    66b8:	81 e0       	ldi	r24, 0x01	; 1
    66ba:	08 95       	ret

000066bc <__fixunssfsi>:
    66bc:	57 d0       	rcall	.+174    	; 0x676c <__fp_splitA>
    66be:	88 f0       	brcs	.+34     	; 0x66e2 <__fixunssfsi+0x26>
    66c0:	9f 57       	subi	r25, 0x7F	; 127
    66c2:	90 f0       	brcs	.+36     	; 0x66e8 <__fixunssfsi+0x2c>
    66c4:	b9 2f       	mov	r27, r25
    66c6:	99 27       	eor	r25, r25
    66c8:	b7 51       	subi	r27, 0x17	; 23
    66ca:	a0 f0       	brcs	.+40     	; 0x66f4 <__fixunssfsi+0x38>
    66cc:	d1 f0       	breq	.+52     	; 0x6702 <__fixunssfsi+0x46>
    66ce:	66 0f       	add	r22, r22
    66d0:	77 1f       	adc	r23, r23
    66d2:	88 1f       	adc	r24, r24
    66d4:	99 1f       	adc	r25, r25
    66d6:	1a f0       	brmi	.+6      	; 0x66de <__fixunssfsi+0x22>
    66d8:	ba 95       	dec	r27
    66da:	c9 f7       	brne	.-14     	; 0x66ce <__fixunssfsi+0x12>
    66dc:	12 c0       	rjmp	.+36     	; 0x6702 <__fixunssfsi+0x46>
    66de:	b1 30       	cpi	r27, 0x01	; 1
    66e0:	81 f0       	breq	.+32     	; 0x6702 <__fixunssfsi+0x46>
    66e2:	5e d0       	rcall	.+188    	; 0x67a0 <__fp_zero>
    66e4:	b1 e0       	ldi	r27, 0x01	; 1
    66e6:	08 95       	ret
    66e8:	5b c0       	rjmp	.+182    	; 0x67a0 <__fp_zero>
    66ea:	67 2f       	mov	r22, r23
    66ec:	78 2f       	mov	r23, r24
    66ee:	88 27       	eor	r24, r24
    66f0:	b8 5f       	subi	r27, 0xF8	; 248
    66f2:	39 f0       	breq	.+14     	; 0x6702 <__fixunssfsi+0x46>
    66f4:	b9 3f       	cpi	r27, 0xF9	; 249
    66f6:	cc f3       	brlt	.-14     	; 0x66ea <__fixunssfsi+0x2e>
    66f8:	86 95       	lsr	r24
    66fa:	77 95       	ror	r23
    66fc:	67 95       	ror	r22
    66fe:	b3 95       	inc	r27
    6700:	d9 f7       	brne	.-10     	; 0x66f8 <__fixunssfsi+0x3c>
    6702:	3e f4       	brtc	.+14     	; 0x6712 <__fixunssfsi+0x56>
    6704:	90 95       	com	r25
    6706:	80 95       	com	r24
    6708:	70 95       	com	r23
    670a:	61 95       	neg	r22
    670c:	7f 4f       	sbci	r23, 0xFF	; 255
    670e:	8f 4f       	sbci	r24, 0xFF	; 255
    6710:	9f 4f       	sbci	r25, 0xFF	; 255
    6712:	08 95       	ret

00006714 <__fp_cmp>:
    6714:	99 0f       	add	r25, r25
    6716:	00 08       	sbc	r0, r0
    6718:	55 0f       	add	r21, r21
    671a:	aa 0b       	sbc	r26, r26
    671c:	e0 e8       	ldi	r30, 0x80	; 128
    671e:	fe ef       	ldi	r31, 0xFE	; 254
    6720:	16 16       	cp	r1, r22
    6722:	17 06       	cpc	r1, r23
    6724:	e8 07       	cpc	r30, r24
    6726:	f9 07       	cpc	r31, r25
    6728:	c0 f0       	brcs	.+48     	; 0x675a <__fp_cmp+0x46>
    672a:	12 16       	cp	r1, r18
    672c:	13 06       	cpc	r1, r19
    672e:	e4 07       	cpc	r30, r20
    6730:	f5 07       	cpc	r31, r21
    6732:	98 f0       	brcs	.+38     	; 0x675a <__fp_cmp+0x46>
    6734:	62 1b       	sub	r22, r18
    6736:	73 0b       	sbc	r23, r19
    6738:	84 0b       	sbc	r24, r20
    673a:	95 0b       	sbc	r25, r21
    673c:	39 f4       	brne	.+14     	; 0x674c <__fp_cmp+0x38>
    673e:	0a 26       	eor	r0, r26
    6740:	61 f0       	breq	.+24     	; 0x675a <__fp_cmp+0x46>
    6742:	23 2b       	or	r18, r19
    6744:	24 2b       	or	r18, r20
    6746:	25 2b       	or	r18, r21
    6748:	21 f4       	brne	.+8      	; 0x6752 <__fp_cmp+0x3e>
    674a:	08 95       	ret
    674c:	0a 26       	eor	r0, r26
    674e:	09 f4       	brne	.+2      	; 0x6752 <__fp_cmp+0x3e>
    6750:	a1 40       	sbci	r26, 0x01	; 1
    6752:	a6 95       	lsr	r26
    6754:	8f ef       	ldi	r24, 0xFF	; 255
    6756:	81 1d       	adc	r24, r1
    6758:	81 1d       	adc	r24, r1
    675a:	08 95       	ret

0000675c <__fp_split3>:
    675c:	57 fd       	sbrc	r21, 7
    675e:	90 58       	subi	r25, 0x80	; 128
    6760:	44 0f       	add	r20, r20
    6762:	55 1f       	adc	r21, r21
    6764:	59 f0       	breq	.+22     	; 0x677c <__fp_splitA+0x10>
    6766:	5f 3f       	cpi	r21, 0xFF	; 255
    6768:	71 f0       	breq	.+28     	; 0x6786 <__fp_splitA+0x1a>
    676a:	47 95       	ror	r20

0000676c <__fp_splitA>:
    676c:	88 0f       	add	r24, r24
    676e:	97 fb       	bst	r25, 7
    6770:	99 1f       	adc	r25, r25
    6772:	61 f0       	breq	.+24     	; 0x678c <__fp_splitA+0x20>
    6774:	9f 3f       	cpi	r25, 0xFF	; 255
    6776:	79 f0       	breq	.+30     	; 0x6796 <__fp_splitA+0x2a>
    6778:	87 95       	ror	r24
    677a:	08 95       	ret
    677c:	12 16       	cp	r1, r18
    677e:	13 06       	cpc	r1, r19
    6780:	14 06       	cpc	r1, r20
    6782:	55 1f       	adc	r21, r21
    6784:	f2 cf       	rjmp	.-28     	; 0x676a <__fp_split3+0xe>
    6786:	46 95       	lsr	r20
    6788:	f1 df       	rcall	.-30     	; 0x676c <__fp_splitA>
    678a:	08 c0       	rjmp	.+16     	; 0x679c <__fp_splitA+0x30>
    678c:	16 16       	cp	r1, r22
    678e:	17 06       	cpc	r1, r23
    6790:	18 06       	cpc	r1, r24
    6792:	99 1f       	adc	r25, r25
    6794:	f1 cf       	rjmp	.-30     	; 0x6778 <__fp_splitA+0xc>
    6796:	86 95       	lsr	r24
    6798:	71 05       	cpc	r23, r1
    679a:	61 05       	cpc	r22, r1
    679c:	08 94       	sec
    679e:	08 95       	ret

000067a0 <__fp_zero>:
    67a0:	e8 94       	clt

000067a2 <__fp_szero>:
    67a2:	bb 27       	eor	r27, r27
    67a4:	66 27       	eor	r22, r22
    67a6:	77 27       	eor	r23, r23
    67a8:	cb 01       	movw	r24, r22
    67aa:	97 f9       	bld	r25, 7
    67ac:	08 95       	ret

000067ae <__gesf2>:
    67ae:	b2 df       	rcall	.-156    	; 0x6714 <__fp_cmp>
    67b0:	08 f4       	brcc	.+2      	; 0x67b4 <__gesf2+0x6>
    67b2:	8f ef       	ldi	r24, 0xFF	; 255
    67b4:	08 95       	ret

000067b6 <__mulsf3>:
    67b6:	0b d0       	rcall	.+22     	; 0x67ce <__mulsf3x>
    67b8:	78 c0       	rjmp	.+240    	; 0x68aa <__fp_round>
    67ba:	69 d0       	rcall	.+210    	; 0x688e <__fp_pscA>
    67bc:	28 f0       	brcs	.+10     	; 0x67c8 <__mulsf3+0x12>
    67be:	6e d0       	rcall	.+220    	; 0x689c <__fp_pscB>
    67c0:	18 f0       	brcs	.+6      	; 0x67c8 <__mulsf3+0x12>
    67c2:	95 23       	and	r25, r21
    67c4:	09 f0       	breq	.+2      	; 0x67c8 <__mulsf3+0x12>
    67c6:	5a c0       	rjmp	.+180    	; 0x687c <__fp_inf>
    67c8:	5f c0       	rjmp	.+190    	; 0x6888 <__fp_nan>
    67ca:	11 24       	eor	r1, r1
    67cc:	ea cf       	rjmp	.-44     	; 0x67a2 <__fp_szero>

000067ce <__mulsf3x>:
    67ce:	c6 df       	rcall	.-116    	; 0x675c <__fp_split3>
    67d0:	a0 f3       	brcs	.-24     	; 0x67ba <__mulsf3+0x4>

000067d2 <__mulsf3_pse>:
    67d2:	95 9f       	mul	r25, r21
    67d4:	d1 f3       	breq	.-12     	; 0x67ca <__mulsf3+0x14>
    67d6:	95 0f       	add	r25, r21
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	55 1f       	adc	r21, r21
    67dc:	62 9f       	mul	r22, r18
    67de:	f0 01       	movw	r30, r0
    67e0:	72 9f       	mul	r23, r18
    67e2:	bb 27       	eor	r27, r27
    67e4:	f0 0d       	add	r31, r0
    67e6:	b1 1d       	adc	r27, r1
    67e8:	63 9f       	mul	r22, r19
    67ea:	aa 27       	eor	r26, r26
    67ec:	f0 0d       	add	r31, r0
    67ee:	b1 1d       	adc	r27, r1
    67f0:	aa 1f       	adc	r26, r26
    67f2:	64 9f       	mul	r22, r20
    67f4:	66 27       	eor	r22, r22
    67f6:	b0 0d       	add	r27, r0
    67f8:	a1 1d       	adc	r26, r1
    67fa:	66 1f       	adc	r22, r22
    67fc:	82 9f       	mul	r24, r18
    67fe:	22 27       	eor	r18, r18
    6800:	b0 0d       	add	r27, r0
    6802:	a1 1d       	adc	r26, r1
    6804:	62 1f       	adc	r22, r18
    6806:	73 9f       	mul	r23, r19
    6808:	b0 0d       	add	r27, r0
    680a:	a1 1d       	adc	r26, r1
    680c:	62 1f       	adc	r22, r18
    680e:	83 9f       	mul	r24, r19
    6810:	a0 0d       	add	r26, r0
    6812:	61 1d       	adc	r22, r1
    6814:	22 1f       	adc	r18, r18
    6816:	74 9f       	mul	r23, r20
    6818:	33 27       	eor	r19, r19
    681a:	a0 0d       	add	r26, r0
    681c:	61 1d       	adc	r22, r1
    681e:	23 1f       	adc	r18, r19
    6820:	84 9f       	mul	r24, r20
    6822:	60 0d       	add	r22, r0
    6824:	21 1d       	adc	r18, r1
    6826:	82 2f       	mov	r24, r18
    6828:	76 2f       	mov	r23, r22
    682a:	6a 2f       	mov	r22, r26
    682c:	11 24       	eor	r1, r1
    682e:	9f 57       	subi	r25, 0x7F	; 127
    6830:	50 40       	sbci	r21, 0x00	; 0
    6832:	8a f0       	brmi	.+34     	; 0x6856 <__mulsf3_pse+0x84>
    6834:	e1 f0       	breq	.+56     	; 0x686e <__mulsf3_pse+0x9c>
    6836:	88 23       	and	r24, r24
    6838:	4a f0       	brmi	.+18     	; 0x684c <__mulsf3_pse+0x7a>
    683a:	ee 0f       	add	r30, r30
    683c:	ff 1f       	adc	r31, r31
    683e:	bb 1f       	adc	r27, r27
    6840:	66 1f       	adc	r22, r22
    6842:	77 1f       	adc	r23, r23
    6844:	88 1f       	adc	r24, r24
    6846:	91 50       	subi	r25, 0x01	; 1
    6848:	50 40       	sbci	r21, 0x00	; 0
    684a:	a9 f7       	brne	.-22     	; 0x6836 <__mulsf3_pse+0x64>
    684c:	9e 3f       	cpi	r25, 0xFE	; 254
    684e:	51 05       	cpc	r21, r1
    6850:	70 f0       	brcs	.+28     	; 0x686e <__mulsf3_pse+0x9c>
    6852:	14 c0       	rjmp	.+40     	; 0x687c <__fp_inf>
    6854:	a6 cf       	rjmp	.-180    	; 0x67a2 <__fp_szero>
    6856:	5f 3f       	cpi	r21, 0xFF	; 255
    6858:	ec f3       	brlt	.-6      	; 0x6854 <__mulsf3_pse+0x82>
    685a:	98 3e       	cpi	r25, 0xE8	; 232
    685c:	dc f3       	brlt	.-10     	; 0x6854 <__mulsf3_pse+0x82>
    685e:	86 95       	lsr	r24
    6860:	77 95       	ror	r23
    6862:	67 95       	ror	r22
    6864:	b7 95       	ror	r27
    6866:	f7 95       	ror	r31
    6868:	e7 95       	ror	r30
    686a:	9f 5f       	subi	r25, 0xFF	; 255
    686c:	c1 f7       	brne	.-16     	; 0x685e <__mulsf3_pse+0x8c>
    686e:	fe 2b       	or	r31, r30
    6870:	88 0f       	add	r24, r24
    6872:	91 1d       	adc	r25, r1
    6874:	96 95       	lsr	r25
    6876:	87 95       	ror	r24
    6878:	97 f9       	bld	r25, 7
    687a:	08 95       	ret

0000687c <__fp_inf>:
    687c:	97 f9       	bld	r25, 7
    687e:	9f 67       	ori	r25, 0x7F	; 127
    6880:	80 e8       	ldi	r24, 0x80	; 128
    6882:	70 e0       	ldi	r23, 0x00	; 0
    6884:	60 e0       	ldi	r22, 0x00	; 0
    6886:	08 95       	ret

00006888 <__fp_nan>:
    6888:	9f ef       	ldi	r25, 0xFF	; 255
    688a:	80 ec       	ldi	r24, 0xC0	; 192
    688c:	08 95       	ret

0000688e <__fp_pscA>:
    688e:	00 24       	eor	r0, r0
    6890:	0a 94       	dec	r0
    6892:	16 16       	cp	r1, r22
    6894:	17 06       	cpc	r1, r23
    6896:	18 06       	cpc	r1, r24
    6898:	09 06       	cpc	r0, r25
    689a:	08 95       	ret

0000689c <__fp_pscB>:
    689c:	00 24       	eor	r0, r0
    689e:	0a 94       	dec	r0
    68a0:	12 16       	cp	r1, r18
    68a2:	13 06       	cpc	r1, r19
    68a4:	14 06       	cpc	r1, r20
    68a6:	05 06       	cpc	r0, r21
    68a8:	08 95       	ret

000068aa <__fp_round>:
    68aa:	09 2e       	mov	r0, r25
    68ac:	03 94       	inc	r0
    68ae:	00 0c       	add	r0, r0
    68b0:	11 f4       	brne	.+4      	; 0x68b6 <__fp_round+0xc>
    68b2:	88 23       	and	r24, r24
    68b4:	52 f0       	brmi	.+20     	; 0x68ca <__fp_round+0x20>
    68b6:	bb 0f       	add	r27, r27
    68b8:	40 f4       	brcc	.+16     	; 0x68ca <__fp_round+0x20>
    68ba:	bf 2b       	or	r27, r31
    68bc:	11 f4       	brne	.+4      	; 0x68c2 <__fp_round+0x18>
    68be:	60 ff       	sbrs	r22, 0
    68c0:	04 c0       	rjmp	.+8      	; 0x68ca <__fp_round+0x20>
    68c2:	6f 5f       	subi	r22, 0xFF	; 255
    68c4:	7f 4f       	sbci	r23, 0xFF	; 255
    68c6:	8f 4f       	sbci	r24, 0xFF	; 255
    68c8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ca:	08 95       	ret

000068cc <hal_create>:
    68cc:	e6 e7       	ldi	r30, 0x76	; 118
    68ce:	f9 e1       	ldi	r31, 0x19	; 25
    68d0:	28 e5       	ldi	r18, 0x58	; 88
    68d2:	3b e3       	ldi	r19, 0x3B	; 59
    68d4:	31 83       	std	Z+1, r19	; 0x01
    68d6:	20 83       	st	Z, r18
    68d8:	2b e5       	ldi	r18, 0x5B	; 91
    68da:	3b e3       	ldi	r19, 0x3B	; 59
    68dc:	33 83       	std	Z+3, r19	; 0x03
    68de:	22 83       	std	Z+2, r18	; 0x02
    68e0:	26 e6       	ldi	r18, 0x66	; 102
    68e2:	3b e3       	ldi	r19, 0x3B	; 59
    68e4:	35 83       	std	Z+5, r19	; 0x05
    68e6:	24 83       	std	Z+4, r18	; 0x04
    68e8:	2a e6       	ldi	r18, 0x6A	; 106
    68ea:	3b e3       	ldi	r19, 0x3B	; 59
    68ec:	37 83       	std	Z+7, r19	; 0x07
    68ee:	26 83       	std	Z+6, r18	; 0x06
    68f0:	20 e7       	ldi	r18, 0x70	; 112
    68f2:	3b e3       	ldi	r19, 0x3B	; 59
    68f4:	31 87       	std	Z+9, r19	; 0x09
    68f6:	20 87       	std	Z+8, r18	; 0x08
    68f8:	2c e7       	ldi	r18, 0x7C	; 124
    68fa:	3b e3       	ldi	r19, 0x3B	; 59
    68fc:	33 87       	std	Z+11, r19	; 0x0b
    68fe:	22 87       	std	Z+10, r18	; 0x0a
    6900:	21 e8       	ldi	r18, 0x81	; 129
    6902:	3b e3       	ldi	r19, 0x3B	; 59
    6904:	35 87       	std	Z+13, r19	; 0x0d
    6906:	24 87       	std	Z+12, r18	; 0x0c
    6908:	2d e8       	ldi	r18, 0x8D	; 141
    690a:	3b e3       	ldi	r19, 0x3B	; 59
    690c:	37 87       	std	Z+15, r19	; 0x0f
    690e:	26 87       	std	Z+14, r18	; 0x0e
    6910:	2d e6       	ldi	r18, 0x6D	; 109
    6912:	3b e3       	ldi	r19, 0x3B	; 59
    6914:	31 8b       	std	Z+17, r19	; 0x11
    6916:	20 8b       	std	Z+16, r18	; 0x10
    6918:	22 e9       	ldi	r18, 0x92	; 146
    691a:	3b e3       	ldi	r19, 0x3B	; 59
    691c:	33 8b       	std	Z+19, r19	; 0x13
    691e:	22 8b       	std	Z+18, r18	; 0x12
    6920:	2f e9       	ldi	r18, 0x9F	; 159
    6922:	3b e3       	ldi	r19, 0x3B	; 59
    6924:	35 8b       	std	Z+21, r19	; 0x15
    6926:	24 8b       	std	Z+20, r18	; 0x14
    6928:	68 2f       	mov	r22, r24
    692a:	cf 01       	movw	r24, r30
    692c:	38 c1       	rjmp	.+624    	; 0x6b9e <led_create>
    692e:	08 95       	ret

00006930 <_hihTwiCallback>:
    6930:	65 30       	cpi	r22, 0x05	; 5
    6932:	f1 f4       	brne	.+60     	; 0x6970 <_hihTwiCallback+0x40>
    6934:	fa 01       	movw	r30, r20
    6936:	80 81       	ld	r24, Z
    6938:	8f 73       	andi	r24, 0x3F	; 63
    693a:	90 e0       	ldi	r25, 0x00	; 0
    693c:	98 2f       	mov	r25, r24
    693e:	88 27       	eor	r24, r24
    6940:	21 81       	ldd	r18, Z+1	; 0x01
    6942:	82 2b       	or	r24, r18
    6944:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    6948:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    694c:	82 81       	ldd	r24, Z+2	; 0x02
    694e:	f0 e4       	ldi	r31, 0x40	; 64
    6950:	8f 9f       	mul	r24, r31
    6952:	c0 01       	movw	r24, r0
    6954:	11 24       	eor	r1, r1
    6956:	fa 01       	movw	r30, r20
    6958:	23 81       	ldd	r18, Z+3	; 0x03
    695a:	26 95       	lsr	r18
    695c:	26 95       	lsr	r18
    695e:	82 2b       	or	r24, r18
    6960:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    6964:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    6968:	81 e0       	ldi	r24, 0x01	; 1
    696a:	80 93 0e 18 	sts	0x180E, r24	; 0x80180e <_measuringIsReady>
    696e:	08 95       	ret
    6970:	64 30       	cpi	r22, 0x04	; 4
    6972:	51 f0       	breq	.+20     	; 0x6988 <_hihTwiCallback+0x58>
    6974:	80 e0       	ldi	r24, 0x00	; 0
    6976:	90 e4       	ldi	r25, 0x40	; 64
    6978:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    697c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    6980:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    6984:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    6988:	08 95       	ret

0000698a <hih8120Create>:
    698a:	0f 93       	push	r16
    698c:	1f 93       	push	r17
    698e:	08 e9       	ldi	r16, 0x98	; 152
    6990:	14 e3       	ldi	r17, 0x34	; 52
    6992:	20 e0       	ldi	r18, 0x00	; 0
    6994:	34 e2       	ldi	r19, 0x24	; 36
    6996:	44 ef       	ldi	r20, 0xF4	; 244
    6998:	50 e0       	ldi	r21, 0x00	; 0
    699a:	60 e0       	ldi	r22, 0x00	; 0
    699c:	87 e2       	ldi	r24, 0x27	; 39
    699e:	0e 94 bd 41 	call	0x837a	; 0x837a <twiCreate>
    69a2:	90 93 10 18 	sts	0x1810, r25	; 0x801810 <_hih8120Handler+0x1>
    69a6:	80 93 0f 18 	sts	0x180F, r24	; 0x80180f <_hih8120Handler>
    69aa:	21 e0       	ldi	r18, 0x01	; 1
    69ac:	89 2b       	or	r24, r25
    69ae:	09 f0       	breq	.+2      	; 0x69b2 <hih8120Create+0x28>
    69b0:	20 e0       	ldi	r18, 0x00	; 0
    69b2:	82 2f       	mov	r24, r18
    69b4:	1f 91       	pop	r17
    69b6:	0f 91       	pop	r16
    69b8:	08 95       	ret

000069ba <hih8120Wakeup>:
    69ba:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <_hih8120Handler>
    69be:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <_hih8120Handler+0x1>
    69c2:	00 97       	sbiw	r24, 0x00	; 0
    69c4:	59 f0       	breq	.+22     	; 0x69dc <hih8120Wakeup+0x22>
    69c6:	40 e0       	ldi	r20, 0x00	; 0
    69c8:	60 e0       	ldi	r22, 0x00	; 0
    69ca:	70 e0       	ldi	r23, 0x00	; 0
    69cc:	0e 94 0e 42 	call	0x841c	; 0x841c <twiTransmit>
    69d0:	84 30       	cpi	r24, 0x04	; 4
    69d2:	31 f4       	brne	.+12     	; 0x69e0 <hih8120Wakeup+0x26>
    69d4:	10 92 0e 18 	sts	0x180E, r1	; 0x80180e <_measuringIsReady>
    69d8:	80 e0       	ldi	r24, 0x00	; 0
    69da:	08 95       	ret
    69dc:	82 e0       	ldi	r24, 0x02	; 2
    69de:	08 95       	ret
    69e0:	83 e0       	ldi	r24, 0x03	; 3
    69e2:	08 95       	ret

000069e4 <hih8120Meassure>:
    69e4:	80 91 0f 18 	lds	r24, 0x180F	; 0x80180f <_hih8120Handler>
    69e8:	90 91 10 18 	lds	r25, 0x1810	; 0x801810 <_hih8120Handler+0x1>
    69ec:	00 97       	sbiw	r24, 0x00	; 0
    69ee:	39 f0       	breq	.+14     	; 0x69fe <hih8120Meassure+0x1a>
    69f0:	64 e0       	ldi	r22, 0x04	; 4
    69f2:	0e 94 5a 42 	call	0x84b4	; 0x84b4 <twiReceive>
    69f6:	85 30       	cpi	r24, 0x05	; 5
    69f8:	21 f0       	breq	.+8      	; 0x6a02 <hih8120Meassure+0x1e>
    69fa:	83 e0       	ldi	r24, 0x03	; 3
    69fc:	08 95       	ret
    69fe:	82 e0       	ldi	r24, 0x02	; 2
    6a00:	08 95       	ret
    6a02:	80 e0       	ldi	r24, 0x00	; 0
    6a04:	08 95       	ret

00006a06 <hih8120GetHumidity>:
    6a06:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    6a0a:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    6a0e:	80 e0       	ldi	r24, 0x00	; 0
    6a10:	90 e0       	ldi	r25, 0x00	; 0
    6a12:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <__floatunsisf>
    6a16:	20 e0       	ldi	r18, 0x00	; 0
    6a18:	30 e0       	ldi	r19, 0x00	; 0
    6a1a:	48 ec       	ldi	r20, 0xC8	; 200
    6a1c:	52 e4       	ldi	r21, 0x42	; 66
    6a1e:	cb de       	rcall	.-618    	; 0x67b6 <__mulsf3>
    6a20:	20 e0       	ldi	r18, 0x00	; 0
    6a22:	38 ef       	ldi	r19, 0xF8	; 248
    6a24:	4f e7       	ldi	r20, 0x7F	; 127
    6a26:	56 e4       	ldi	r21, 0x46	; 70
    6a28:	0c 94 5b 47 	jmp	0x8eb6	; 0x8eb6 <__divsf3>
    6a2c:	08 95       	ret

00006a2e <hih8120GetTemperature>:
    6a2e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    6a32:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    6a36:	80 e0       	ldi	r24, 0x00	; 0
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <__floatunsisf>
    6a3e:	20 e0       	ldi	r18, 0x00	; 0
    6a40:	30 e0       	ldi	r19, 0x00	; 0
    6a42:	45 e2       	ldi	r20, 0x25	; 37
    6a44:	53 e4       	ldi	r21, 0x43	; 67
    6a46:	b7 de       	rcall	.-658    	; 0x67b6 <__mulsf3>
    6a48:	20 e0       	ldi	r18, 0x00	; 0
    6a4a:	38 ef       	ldi	r19, 0xF8	; 248
    6a4c:	4f e7       	ldi	r20, 0x7F	; 127
    6a4e:	56 e4       	ldi	r21, 0x46	; 70
    6a50:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <__divsf3>
    6a54:	20 e0       	ldi	r18, 0x00	; 0
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	40 e2       	ldi	r20, 0x20	; 32
    6a5a:	52 e4       	ldi	r21, 0x42	; 66
    6a5c:	0c 94 ef 46 	jmp	0x8dde	; 0x8dde <__subsf3>
    6a60:	08 95       	ret

00006a62 <_turn_off>:
    6a62:	cf 93       	push	r28
    6a64:	df 93       	push	r29
    6a66:	90 e0       	ldi	r25, 0x00	; 0
    6a68:	fc 01       	movw	r30, r24
    6a6a:	ee 0f       	add	r30, r30
    6a6c:	ff 1f       	adc	r31, r31
    6a6e:	e8 0f       	add	r30, r24
    6a70:	f9 1f       	adc	r31, r25
    6a72:	ee 0f       	add	r30, r30
    6a74:	ff 1f       	adc	r31, r31
    6a76:	ef 5e       	subi	r30, 0xEF	; 239
    6a78:	f7 4e       	sbci	r31, 0xE7	; 231
    6a7a:	23 81       	ldd	r18, Z+3	; 0x03
    6a7c:	21 11       	cpse	r18, r1
    6a7e:	0a c0       	rjmp	.+20     	; 0x6a94 <_turn_off+0x32>
    6a80:	ef 01       	movw	r28, r30
    6a82:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <register_access+0x8>
    6a86:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <register_access+0x9>
    6a8a:	6a 81       	ldd	r22, Y+2	; 0x02
    6a8c:	88 81       	ld	r24, Y
    6a8e:	99 81       	ldd	r25, Y+1	; 0x01
    6a90:	19 95       	eicall
    6a92:	12 c0       	rjmp	.+36     	; 0x6ab8 <_turn_off+0x56>
    6a94:	dc 01       	movw	r26, r24
    6a96:	aa 0f       	add	r26, r26
    6a98:	bb 1f       	adc	r27, r27
    6a9a:	ed 01       	movw	r28, r26
    6a9c:	c8 0f       	add	r28, r24
    6a9e:	d9 1f       	adc	r29, r25
    6aa0:	cc 0f       	add	r28, r28
    6aa2:	dd 1f       	adc	r29, r29
    6aa4:	cf 5e       	subi	r28, 0xEF	; 239
    6aa6:	d7 4e       	sbci	r29, 0xE7	; 231
    6aa8:	e0 91 88 19 	lds	r30, 0x1988	; 0x801988 <register_access+0x12>
    6aac:	f0 91 89 19 	lds	r31, 0x1989	; 0x801989 <register_access+0x13>
    6ab0:	6a 81       	ldd	r22, Y+2	; 0x02
    6ab2:	88 81       	ld	r24, Y
    6ab4:	99 81       	ldd	r25, Y+1	; 0x01
    6ab6:	19 95       	eicall
    6ab8:	df 91       	pop	r29
    6aba:	cf 91       	pop	r28
    6abc:	08 95       	ret

00006abe <_turn_on>:
    6abe:	cf 93       	push	r28
    6ac0:	df 93       	push	r29
    6ac2:	90 e0       	ldi	r25, 0x00	; 0
    6ac4:	fc 01       	movw	r30, r24
    6ac6:	ee 0f       	add	r30, r30
    6ac8:	ff 1f       	adc	r31, r31
    6aca:	e8 0f       	add	r30, r24
    6acc:	f9 1f       	adc	r31, r25
    6ace:	ee 0f       	add	r30, r30
    6ad0:	ff 1f       	adc	r31, r31
    6ad2:	ef 5e       	subi	r30, 0xEF	; 239
    6ad4:	f7 4e       	sbci	r31, 0xE7	; 231
    6ad6:	23 81       	ldd	r18, Z+3	; 0x03
    6ad8:	21 11       	cpse	r18, r1
    6ada:	0a c0       	rjmp	.+20     	; 0x6af0 <_turn_on+0x32>
    6adc:	ef 01       	movw	r28, r30
    6ade:	e0 91 88 19 	lds	r30, 0x1988	; 0x801988 <register_access+0x12>
    6ae2:	f0 91 89 19 	lds	r31, 0x1989	; 0x801989 <register_access+0x13>
    6ae6:	6a 81       	ldd	r22, Y+2	; 0x02
    6ae8:	88 81       	ld	r24, Y
    6aea:	99 81       	ldd	r25, Y+1	; 0x01
    6aec:	19 95       	eicall
    6aee:	12 c0       	rjmp	.+36     	; 0x6b14 <_turn_on+0x56>
    6af0:	dc 01       	movw	r26, r24
    6af2:	aa 0f       	add	r26, r26
    6af4:	bb 1f       	adc	r27, r27
    6af6:	ed 01       	movw	r28, r26
    6af8:	c8 0f       	add	r28, r24
    6afa:	d9 1f       	adc	r29, r25
    6afc:	cc 0f       	add	r28, r28
    6afe:	dd 1f       	adc	r29, r29
    6b00:	cf 5e       	subi	r28, 0xEF	; 239
    6b02:	d7 4e       	sbci	r29, 0xE7	; 231
    6b04:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <register_access+0x8>
    6b08:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <register_access+0x9>
    6b0c:	6a 81       	ldd	r22, Y+2	; 0x02
    6b0e:	88 81       	ld	r24, Y
    6b10:	99 81       	ldd	r25, Y+1	; 0x01
    6b12:	19 95       	eicall
    6b14:	df 91       	pop	r29
    6b16:	cf 91       	pop	r28
    6b18:	08 95       	ret

00006b1a <_hal_led_task>:
    6b1a:	0f 2e       	mov	r0, r31
    6b1c:	f6 e7       	ldi	r31, 0x76	; 118
    6b1e:	cf 2e       	mov	r12, r31
    6b20:	f9 e1       	ldi	r31, 0x19	; 25
    6b22:	df 2e       	mov	r13, r31
    6b24:	f0 2d       	mov	r31, r0
    6b26:	04 e0       	ldi	r16, 0x04	; 4
    6b28:	c1 e1       	ldi	r28, 0x11	; 17
    6b2a:	d8 e1       	ldi	r29, 0x18	; 24
    6b2c:	10 e0       	ldi	r17, 0x00	; 0
    6b2e:	8c 81       	ldd	r24, Y+4	; 0x04
    6b30:	81 30       	cpi	r24, 0x01	; 1
    6b32:	69 f0       	breq	.+26     	; 0x6b4e <_hal_led_task+0x34>
    6b34:	e8 f0       	brcs	.+58     	; 0x6b70 <_hal_led_task+0x56>
    6b36:	82 30       	cpi	r24, 0x02	; 2
    6b38:	39 f5       	brne	.+78     	; 0x6b88 <_hal_led_task+0x6e>
    6b3a:	d6 01       	movw	r26, r12
    6b3c:	1c 96       	adiw	r26, 0x0c	; 12
    6b3e:	ed 91       	ld	r30, X+
    6b40:	fc 91       	ld	r31, X
    6b42:	1d 97       	sbiw	r26, 0x0d	; 13
    6b44:	6a 81       	ldd	r22, Y+2	; 0x02
    6b46:	88 81       	ld	r24, Y
    6b48:	99 81       	ldd	r25, Y+1	; 0x01
    6b4a:	19 95       	eicall
    6b4c:	1d c0       	rjmp	.+58     	; 0x6b88 <_hal_led_task+0x6e>
    6b4e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b50:	8f 5f       	subi	r24, 0xFF	; 255
    6b52:	8a 30       	cpi	r24, 0x0A	; 10
    6b54:	10 f4       	brcc	.+4      	; 0x6b5a <_hal_led_task+0x40>
    6b56:	8d 83       	std	Y+5, r24	; 0x05
    6b58:	17 c0       	rjmp	.+46     	; 0x6b88 <_hal_led_task+0x6e>
    6b5a:	1d 82       	std	Y+5, r1	; 0x05
    6b5c:	d6 01       	movw	r26, r12
    6b5e:	1c 96       	adiw	r26, 0x0c	; 12
    6b60:	ed 91       	ld	r30, X+
    6b62:	fc 91       	ld	r31, X
    6b64:	1d 97       	sbiw	r26, 0x0d	; 13
    6b66:	6a 81       	ldd	r22, Y+2	; 0x02
    6b68:	88 81       	ld	r24, Y
    6b6a:	99 81       	ldd	r25, Y+1	; 0x01
    6b6c:	19 95       	eicall
    6b6e:	0c c0       	rjmp	.+24     	; 0x6b88 <_hal_led_task+0x6e>
    6b70:	8d 81       	ldd	r24, Y+5	; 0x05
    6b72:	88 23       	and	r24, r24
    6b74:	31 f0       	breq	.+12     	; 0x6b82 <_hal_led_task+0x68>
    6b76:	81 2f       	mov	r24, r17
    6b78:	a2 df       	rcall	.-188    	; 0x6abe <_turn_on>
    6b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    6b7c:	81 50       	subi	r24, 0x01	; 1
    6b7e:	8d 83       	std	Y+5, r24	; 0x05
    6b80:	03 c0       	rjmp	.+6      	; 0x6b88 <_hal_led_task+0x6e>
    6b82:	0c 83       	std	Y+4, r16	; 0x04
    6b84:	81 2f       	mov	r24, r17
    6b86:	6d df       	rcall	.-294    	; 0x6a62 <_turn_off>
    6b88:	1f 5f       	subi	r17, 0xFF	; 255
    6b8a:	26 96       	adiw	r28, 0x06	; 6
    6b8c:	14 30       	cpi	r17, 0x04	; 4
    6b8e:	79 f6       	brne	.-98     	; 0x6b2e <_hal_led_task+0x14>
    6b90:	65 e0       	ldi	r22, 0x05	; 5
    6b92:	70 e0       	ldi	r23, 0x00	; 0
    6b94:	80 e0       	ldi	r24, 0x00	; 0
    6b96:	90 e0       	ldi	r25, 0x00	; 0
    6b98:	0e 94 2a 21 	call	0x4254	; 0x4254 <vTaskDelay>
    6b9c:	c5 cf       	rjmp	.-118    	; 0x6b28 <_hal_led_task+0xe>

00006b9e <led_create>:
    6b9e:	cf 92       	push	r12
    6ba0:	df 92       	push	r13
    6ba2:	ef 92       	push	r14
    6ba4:	ff 92       	push	r15
    6ba6:	0f 93       	push	r16
    6ba8:	1f 93       	push	r17
    6baa:	cf 93       	push	r28
    6bac:	df 93       	push	r29
    6bae:	06 2f       	mov	r16, r22
    6bb0:	0f 2e       	mov	r0, r31
    6bb2:	f6 e7       	ldi	r31, 0x76	; 118
    6bb4:	ef 2e       	mov	r14, r31
    6bb6:	f9 e1       	ldi	r31, 0x19	; 25
    6bb8:	ff 2e       	mov	r15, r31
    6bba:	f0 2d       	mov	r31, r0
    6bbc:	d7 01       	movw	r26, r14
    6bbe:	18 96       	adiw	r26, 0x08	; 8
    6bc0:	ed 91       	ld	r30, X+
    6bc2:	fc 91       	ld	r31, X
    6bc4:	19 97       	sbiw	r26, 0x09	; 9
    6bc6:	66 e0       	ldi	r22, 0x06	; 6
    6bc8:	87 e2       	ldi	r24, 0x27	; 39
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	19 95       	eicall
    6bce:	c1 e1       	ldi	r28, 0x11	; 17
    6bd0:	d8 e1       	ldi	r29, 0x18	; 24
    6bd2:	0f 2e       	mov	r0, r31
    6bd4:	f8 e2       	ldi	r31, 0x28	; 40
    6bd6:	cf 2e       	mov	r12, r31
    6bd8:	d1 2c       	mov	r13, r1
    6bda:	f0 2d       	mov	r31, r0
    6bdc:	d9 82       	std	Y+1, r13	; 0x01
    6bde:	c8 82       	st	Y, r12
    6be0:	86 e0       	ldi	r24, 0x06	; 6
    6be2:	8a 83       	std	Y+2, r24	; 0x02
    6be4:	1b 82       	std	Y+3, r1	; 0x03
    6be6:	14 e0       	ldi	r17, 0x04	; 4
    6be8:	1c 83       	std	Y+4, r17	; 0x04
    6bea:	80 e0       	ldi	r24, 0x00	; 0
    6bec:	3a df       	rcall	.-396    	; 0x6a62 <_turn_off>
    6bee:	d7 01       	movw	r26, r14
    6bf0:	18 96       	adiw	r26, 0x08	; 8
    6bf2:	ed 91       	ld	r30, X+
    6bf4:	fc 91       	ld	r31, X
    6bf6:	19 97       	sbiw	r26, 0x09	; 9
    6bf8:	67 e0       	ldi	r22, 0x07	; 7
    6bfa:	87 e2       	ldi	r24, 0x27	; 39
    6bfc:	90 e0       	ldi	r25, 0x00	; 0
    6bfe:	19 95       	eicall
    6c00:	df 82       	std	Y+7, r13	; 0x07
    6c02:	ce 82       	std	Y+6, r12	; 0x06
    6c04:	87 e0       	ldi	r24, 0x07	; 7
    6c06:	88 87       	std	Y+8, r24	; 0x08
    6c08:	19 86       	std	Y+9, r1	; 0x09
    6c0a:	1a 87       	std	Y+10, r17	; 0x0a
    6c0c:	81 e0       	ldi	r24, 0x01	; 1
    6c0e:	29 df       	rcall	.-430    	; 0x6a62 <_turn_off>
    6c10:	d7 01       	movw	r26, r14
    6c12:	18 96       	adiw	r26, 0x08	; 8
    6c14:	ed 91       	ld	r30, X+
    6c16:	fc 91       	ld	r31, X
    6c18:	19 97       	sbiw	r26, 0x09	; 9
    6c1a:	65 e0       	ldi	r22, 0x05	; 5
    6c1c:	83 e3       	ldi	r24, 0x33	; 51
    6c1e:	90 e0       	ldi	r25, 0x00	; 0
    6c20:	19 95       	eicall
    6c22:	d7 01       	movw	r26, r14
    6c24:	18 96       	adiw	r26, 0x08	; 8
    6c26:	ed 91       	ld	r30, X+
    6c28:	fc 91       	ld	r31, X
    6c2a:	19 97       	sbiw	r26, 0x09	; 9
    6c2c:	61 e0       	ldi	r22, 0x01	; 1
    6c2e:	84 e3       	ldi	r24, 0x34	; 52
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	19 95       	eicall
    6c34:	84 e3       	ldi	r24, 0x34	; 52
    6c36:	90 e0       	ldi	r25, 0x00	; 0
    6c38:	9d 87       	std	Y+13, r25	; 0x0d
    6c3a:	8c 87       	std	Y+12, r24	; 0x0c
    6c3c:	85 e0       	ldi	r24, 0x05	; 5
    6c3e:	8e 87       	std	Y+14, r24	; 0x0e
    6c40:	1f 86       	std	Y+15, r1	; 0x0f
    6c42:	18 8b       	std	Y+16, r17	; 0x10
    6c44:	82 e0       	ldi	r24, 0x02	; 2
    6c46:	0d df       	rcall	.-486    	; 0x6a62 <_turn_off>
    6c48:	d7 01       	movw	r26, r14
    6c4a:	18 96       	adiw	r26, 0x08	; 8
    6c4c:	ed 91       	ld	r30, X+
    6c4e:	fc 91       	ld	r31, X
    6c50:	19 97       	sbiw	r26, 0x09	; 9
    6c52:	64 e0       	ldi	r22, 0x04	; 4
    6c54:	81 e0       	ldi	r24, 0x01	; 1
    6c56:	91 e0       	ldi	r25, 0x01	; 1
    6c58:	19 95       	eicall
    6c5a:	d7 01       	movw	r26, r14
    6c5c:	18 96       	adiw	r26, 0x08	; 8
    6c5e:	ed 91       	ld	r30, X+
    6c60:	fc 91       	ld	r31, X
    6c62:	19 97       	sbiw	r26, 0x09	; 9
    6c64:	61 e0       	ldi	r22, 0x01	; 1
    6c66:	82 e0       	ldi	r24, 0x02	; 2
    6c68:	91 e0       	ldi	r25, 0x01	; 1
    6c6a:	19 95       	eicall
    6c6c:	82 e0       	ldi	r24, 0x02	; 2
    6c6e:	91 e0       	ldi	r25, 0x01	; 1
    6c70:	9b 8b       	std	Y+19, r25	; 0x13
    6c72:	8a 8b       	std	Y+18, r24	; 0x12
    6c74:	1c 8b       	std	Y+20, r17	; 0x14
    6c76:	1d 8a       	std	Y+21, r1	; 0x15
    6c78:	1e 8b       	std	Y+22, r17	; 0x16
    6c7a:	83 e0       	ldi	r24, 0x03	; 3
    6c7c:	f2 de       	rcall	.-540    	; 0x6a62 <_turn_off>
    6c7e:	e1 2c       	mov	r14, r1
    6c80:	f1 2c       	mov	r15, r1
    6c82:	20 e0       	ldi	r18, 0x00	; 0
    6c84:	30 e0       	ldi	r19, 0x00	; 0
    6c86:	40 ec       	ldi	r20, 0xC0	; 192
    6c88:	50 e0       	ldi	r21, 0x00	; 0
    6c8a:	6f e2       	ldi	r22, 0x2F	; 47
    6c8c:	74 e0       	ldi	r23, 0x04	; 4
    6c8e:	8d e8       	ldi	r24, 0x8D	; 141
    6c90:	95 e3       	ldi	r25, 0x35	; 53
    6c92:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <xTaskCreate>
    6c96:	df 91       	pop	r29
    6c98:	cf 91       	pop	r28
    6c9a:	1f 91       	pop	r17
    6c9c:	0f 91       	pop	r16
    6c9e:	ff 90       	pop	r15
    6ca0:	ef 90       	pop	r14
    6ca2:	df 90       	pop	r13
    6ca4:	cf 90       	pop	r12
    6ca6:	08 95       	ret

00006ca8 <led_slow_blink>:
    6ca8:	0f 93       	push	r16
    6caa:	1f 93       	push	r17
    6cac:	cf 93       	push	r28
    6cae:	df 93       	push	r29
    6cb0:	c8 2f       	mov	r28, r24
    6cb2:	d0 e0       	ldi	r29, 0x00	; 0
    6cb4:	8e 01       	movw	r16, r28
    6cb6:	00 0f       	add	r16, r16
    6cb8:	11 1f       	adc	r17, r17
    6cba:	d8 01       	movw	r26, r16
    6cbc:	ac 0f       	add	r26, r28
    6cbe:	bd 1f       	adc	r27, r29
    6cc0:	aa 0f       	add	r26, r26
    6cc2:	bb 1f       	adc	r27, r27
    6cc4:	af 5e       	subi	r26, 0xEF	; 239
    6cc6:	b7 4e       	sbci	r27, 0xE7	; 231
    6cc8:	e0 91 82 19 	lds	r30, 0x1982	; 0x801982 <register_access+0xc>
    6ccc:	f0 91 83 19 	lds	r31, 0x1983	; 0x801983 <register_access+0xd>
    6cd0:	12 96       	adiw	r26, 0x02	; 2
    6cd2:	6c 91       	ld	r22, X
    6cd4:	12 97       	sbiw	r26, 0x02	; 2
    6cd6:	8d 91       	ld	r24, X+
    6cd8:	9c 91       	ld	r25, X
    6cda:	19 95       	eicall
    6cdc:	c0 0f       	add	r28, r16
    6cde:	d1 1f       	adc	r29, r17
    6ce0:	cc 0f       	add	r28, r28
    6ce2:	dd 1f       	adc	r29, r29
    6ce4:	cf 5e       	subi	r28, 0xEF	; 239
    6ce6:	d7 4e       	sbci	r29, 0xE7	; 231
    6ce8:	81 e0       	ldi	r24, 0x01	; 1
    6cea:	8c 83       	std	Y+4, r24	; 0x04
    6cec:	df 91       	pop	r29
    6cee:	cf 91       	pop	r28
    6cf0:	1f 91       	pop	r17
    6cf2:	0f 91       	pop	r16
    6cf4:	08 95       	ret

00006cf6 <led_fast_blink>:
    6cf6:	0f 93       	push	r16
    6cf8:	1f 93       	push	r17
    6cfa:	cf 93       	push	r28
    6cfc:	df 93       	push	r29
    6cfe:	c8 2f       	mov	r28, r24
    6d00:	d0 e0       	ldi	r29, 0x00	; 0
    6d02:	8e 01       	movw	r16, r28
    6d04:	00 0f       	add	r16, r16
    6d06:	11 1f       	adc	r17, r17
    6d08:	d8 01       	movw	r26, r16
    6d0a:	ac 0f       	add	r26, r28
    6d0c:	bd 1f       	adc	r27, r29
    6d0e:	aa 0f       	add	r26, r26
    6d10:	bb 1f       	adc	r27, r27
    6d12:	af 5e       	subi	r26, 0xEF	; 239
    6d14:	b7 4e       	sbci	r27, 0xE7	; 231
    6d16:	e0 91 82 19 	lds	r30, 0x1982	; 0x801982 <register_access+0xc>
    6d1a:	f0 91 83 19 	lds	r31, 0x1983	; 0x801983 <register_access+0xd>
    6d1e:	12 96       	adiw	r26, 0x02	; 2
    6d20:	6c 91       	ld	r22, X
    6d22:	12 97       	sbiw	r26, 0x02	; 2
    6d24:	8d 91       	ld	r24, X+
    6d26:	9c 91       	ld	r25, X
    6d28:	19 95       	eicall
    6d2a:	c0 0f       	add	r28, r16
    6d2c:	d1 1f       	adc	r29, r17
    6d2e:	cc 0f       	add	r28, r28
    6d30:	dd 1f       	adc	r29, r29
    6d32:	cf 5e       	subi	r28, 0xEF	; 239
    6d34:	d7 4e       	sbci	r29, 0xE7	; 231
    6d36:	82 e0       	ldi	r24, 0x02	; 2
    6d38:	8c 83       	std	Y+4, r24	; 0x04
    6d3a:	df 91       	pop	r29
    6d3c:	cf 91       	pop	r28
    6d3e:	1f 91       	pop	r17
    6d40:	0f 91       	pop	r16
    6d42:	08 95       	ret

00006d44 <led_led_on>:
    6d44:	28 2f       	mov	r18, r24
    6d46:	30 e0       	ldi	r19, 0x00	; 0
    6d48:	f9 01       	movw	r30, r18
    6d4a:	ee 0f       	add	r30, r30
    6d4c:	ff 1f       	adc	r31, r31
    6d4e:	e2 0f       	add	r30, r18
    6d50:	f3 1f       	adc	r31, r19
    6d52:	ee 0f       	add	r30, r30
    6d54:	ff 1f       	adc	r31, r31
    6d56:	ef 5e       	subi	r30, 0xEF	; 239
    6d58:	f7 4e       	sbci	r31, 0xE7	; 231
    6d5a:	93 e0       	ldi	r25, 0x03	; 3
    6d5c:	94 83       	std	Z+4, r25	; 0x04
    6d5e:	af ce       	rjmp	.-674    	; 0x6abe <_turn_on>
    6d60:	08 95       	ret

00006d62 <led_led_off>:
    6d62:	28 2f       	mov	r18, r24
    6d64:	30 e0       	ldi	r19, 0x00	; 0
    6d66:	f9 01       	movw	r30, r18
    6d68:	ee 0f       	add	r30, r30
    6d6a:	ff 1f       	adc	r31, r31
    6d6c:	e2 0f       	add	r30, r18
    6d6e:	f3 1f       	adc	r31, r19
    6d70:	ee 0f       	add	r30, r30
    6d72:	ff 1f       	adc	r31, r31
    6d74:	ef 5e       	subi	r30, 0xEF	; 239
    6d76:	f7 4e       	sbci	r31, 0xE7	; 231
    6d78:	94 e0       	ldi	r25, 0x04	; 4
    6d7a:	94 83       	std	Z+4, r25	; 0x04
    6d7c:	72 ce       	rjmp	.-796    	; 0x6a62 <_turn_off>
    6d7e:	08 95       	ret

00006d80 <led_long_puls>:
    6d80:	90 e0       	ldi	r25, 0x00	; 0
    6d82:	fc 01       	movw	r30, r24
    6d84:	ee 0f       	add	r30, r30
    6d86:	ff 1f       	adc	r31, r31
    6d88:	df 01       	movw	r26, r30
    6d8a:	a8 0f       	add	r26, r24
    6d8c:	b9 1f       	adc	r27, r25
    6d8e:	aa 0f       	add	r26, r26
    6d90:	bb 1f       	adc	r27, r27
    6d92:	af 5e       	subi	r26, 0xEF	; 239
    6d94:	b7 4e       	sbci	r27, 0xE7	; 231
    6d96:	24 e0       	ldi	r18, 0x04	; 4
    6d98:	15 96       	adiw	r26, 0x05	; 5
    6d9a:	2c 93       	st	X, r18
    6d9c:	15 97       	sbiw	r26, 0x05	; 5
    6d9e:	fd 01       	movw	r30, r26
    6da0:	14 82       	std	Z+4, r1	; 0x04
    6da2:	08 95       	ret

00006da4 <led_short_puls>:
    6da4:	90 e0       	ldi	r25, 0x00	; 0
    6da6:	fc 01       	movw	r30, r24
    6da8:	ee 0f       	add	r30, r30
    6daa:	ff 1f       	adc	r31, r31
    6dac:	df 01       	movw	r26, r30
    6dae:	a8 0f       	add	r26, r24
    6db0:	b9 1f       	adc	r27, r25
    6db2:	aa 0f       	add	r26, r26
    6db4:	bb 1f       	adc	r27, r27
    6db6:	af 5e       	subi	r26, 0xEF	; 239
    6db8:	b7 4e       	sbci	r27, 0xE7	; 231
    6dba:	21 e0       	ldi	r18, 0x01	; 1
    6dbc:	15 96       	adiw	r26, 0x05	; 5
    6dbe:	2c 93       	st	X, r18
    6dc0:	15 97       	sbiw	r26, 0x05	; 5
    6dc2:	fd 01       	movw	r30, r26
    6dc4:	14 82       	std	Z+4, r1	; 0x04
    6dc6:	08 95       	ret

00006dc8 <_serial_call_back>:
    6dc8:	0f 93       	push	r16
    6dca:	1f 93       	push	r17
    6dcc:	cf 93       	push	r28
    6dce:	df 93       	push	r29
    6dd0:	1f 92       	push	r1
    6dd2:	1f 92       	push	r1
    6dd4:	cd b7       	in	r28, 0x3d	; 61
    6dd6:	de b7       	in	r29, 0x3e	; 62
    6dd8:	8c 01       	movw	r16, r24
    6dda:	19 82       	std	Y+1, r1	; 0x01
    6ddc:	2d c0       	rjmp	.+90     	; 0x6e38 <_serial_call_back+0x70>
    6dde:	e0 91 8d 18 	lds	r30, 0x188D	; 0x80188d <rec_buf_inp.2947>
    6de2:	ec 32       	cpi	r30, 0x2C	; 44
    6de4:	50 f4       	brcc	.+20     	; 0x6dfa <_serial_call_back+0x32>
    6de6:	81 e0       	ldi	r24, 0x01	; 1
    6de8:	8e 0f       	add	r24, r30
    6dea:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <rec_buf_inp.2947>
    6dee:	f0 e0       	ldi	r31, 0x00	; 0
    6df0:	e1 54       	subi	r30, 0x41	; 65
    6df2:	f7 4e       	sbci	r31, 0xE7	; 231
    6df4:	8a 81       	ldd	r24, Y+2	; 0x02
    6df6:	80 83       	st	Z, r24
    6df8:	02 c0       	rjmp	.+4      	; 0x6dfe <_serial_call_back+0x36>
    6dfa:	10 92 8d 18 	sts	0x188D, r1	; 0x80188d <rec_buf_inp.2947>
    6dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    6e00:	8a 30       	cpi	r24, 0x0A	; 10
    6e02:	d1 f4       	brne	.+52     	; 0x6e38 <_serial_call_back+0x70>
    6e04:	40 91 8d 18 	lds	r20, 0x188D	; 0x80188d <rec_buf_inp.2947>
    6e08:	50 e0       	ldi	r21, 0x00	; 0
    6e0a:	fa 01       	movw	r30, r20
    6e0c:	e3 54       	subi	r30, 0x43	; 67
    6e0e:	f7 4e       	sbci	r31, 0xE7	; 231
    6e10:	10 82       	st	Z, r1
    6e12:	41 50       	subi	r20, 0x01	; 1
    6e14:	51 09       	sbc	r21, r1
    6e16:	9e 01       	movw	r18, r28
    6e18:	2f 5f       	subi	r18, 0xFF	; 255
    6e1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6e1c:	6f eb       	ldi	r22, 0xBF	; 191
    6e1e:	78 e1       	ldi	r23, 0x18	; 24
    6e20:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    6e24:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    6e28:	0e 94 83 1b 	call	0x3706	; 0x3706 <xStreamBufferSendFromISR>
    6e2c:	89 81       	ldd	r24, Y+1	; 0x01
    6e2e:	81 11       	cpse	r24, r1
    6e30:	0e 94 8a 12 	call	0x2514	; 0x2514 <vPortYield>
    6e34:	10 92 8d 18 	sts	0x188D, r1	; 0x80188d <rec_buf_inp.2947>
    6e38:	be 01       	movw	r22, r28
    6e3a:	6e 5f       	subi	r22, 0xFE	; 254
    6e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3e:	c8 01       	movw	r24, r16
    6e40:	51 d6       	rcall	.+3234   	; 0x7ae4 <serial_get_byte>
    6e42:	88 23       	and	r24, r24
    6e44:	61 f2       	breq	.-104    	; 0x6dde <_serial_call_back+0x16>
    6e46:	0f 90       	pop	r0
    6e48:	0f 90       	pop	r0
    6e4a:	df 91       	pop	r29
    6e4c:	cf 91       	pop	r28
    6e4e:	1f 91       	pop	r17
    6e50:	0f 91       	pop	r16
    6e52:	08 95       	ret

00006e54 <_upload_message>:
    6e54:	0f 93       	push	r16
    6e56:	1f 93       	push	r17
    6e58:	cf 93       	push	r28
    6e5a:	df 93       	push	r29
    6e5c:	8c 01       	movw	r16, r24
    6e5e:	eb 01       	movw	r28, r22
    6e60:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    6e64:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    6e68:	0e 94 08 1a 	call	0x3410	; 0x3410 <xStreamBufferReset>
    6e6c:	b8 01       	movw	r22, r16
    6e6e:	89 e2       	ldi	r24, 0x29	; 41
    6e70:	98 e1       	ldi	r25, 0x18	; 24
    6e72:	0e 94 95 4a 	call	0x952a	; 0x952a <strcpy>
    6e76:	20 97       	sbiw	r28, 0x00	; 0
    6e78:	79 f0       	breq	.+30     	; 0x6e98 <_upload_message+0x44>
    6e7a:	e9 e2       	ldi	r30, 0x29	; 41
    6e7c:	f8 e1       	ldi	r31, 0x18	; 24
    6e7e:	01 90       	ld	r0, Z+
    6e80:	00 20       	and	r0, r0
    6e82:	e9 f7       	brne	.-6      	; 0x6e7e <_upload_message+0x2a>
    6e84:	31 97       	sbiw	r30, 0x01	; 1
    6e86:	80 e2       	ldi	r24, 0x20	; 32
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	91 83       	std	Z+1, r25	; 0x01
    6e8c:	80 83       	st	Z, r24
    6e8e:	be 01       	movw	r22, r28
    6e90:	89 e2       	ldi	r24, 0x29	; 41
    6e92:	98 e1       	ldi	r25, 0x18	; 24
    6e94:	0e 94 8a 4a 	call	0x9514	; 0x9514 <strcat>
    6e98:	e9 e2       	ldi	r30, 0x29	; 41
    6e9a:	f8 e1       	ldi	r31, 0x18	; 24
    6e9c:	df 01       	movw	r26, r30
    6e9e:	0d 90       	ld	r0, X+
    6ea0:	00 20       	and	r0, r0
    6ea2:	e9 f7       	brne	.-6      	; 0x6e9e <_upload_message+0x4a>
    6ea4:	11 97       	sbiw	r26, 0x01	; 1
    6ea6:	8d e0       	ldi	r24, 0x0D	; 13
    6ea8:	9a e0       	ldi	r25, 0x0A	; 10
    6eaa:	11 96       	adiw	r26, 0x01	; 1
    6eac:	9c 93       	st	X, r25
    6eae:	8e 93       	st	-X, r24
    6eb0:	12 96       	adiw	r26, 0x02	; 2
    6eb2:	1c 92       	st	X, r1
    6eb4:	01 90       	ld	r0, Z+
    6eb6:	00 20       	and	r0, r0
    6eb8:	e9 f7       	brne	.-6      	; 0x6eb4 <_upload_message+0x60>
    6eba:	31 97       	sbiw	r30, 0x01	; 1
    6ebc:	e9 52       	subi	r30, 0x29	; 41
    6ebe:	f8 41       	sbci	r31, 0x18	; 24
    6ec0:	ae 2f       	mov	r26, r30
    6ec2:	89 e2       	ldi	r24, 0x29	; 41
    6ec4:	98 e1       	ldi	r25, 0x18	; 24
    6ec6:	ac 01       	movw	r20, r24
    6ec8:	6a 2f       	mov	r22, r26
    6eca:	80 91 92 18 	lds	r24, 0x1892	; 0x801892 <_rn2483_serial>
    6ece:	90 91 93 18 	lds	r25, 0x1893	; 0x801893 <_rn2483_serial+0x1>
    6ed2:	b8 d5       	rcall	.+2928   	; 0x7a44 <serial_send_bytes>
    6ed4:	81 11       	cpse	r24, r1
    6ed6:	11 c0       	rjmp	.+34     	; 0x6efa <_upload_message+0xa6>
    6ed8:	08 e2       	ldi	r16, 0x28	; 40
    6eda:	15 e0       	ldi	r17, 0x05	; 5
    6edc:	20 e0       	ldi	r18, 0x00	; 0
    6ede:	30 e0       	ldi	r19, 0x00	; 0
    6ee0:	4d e2       	ldi	r20, 0x2D	; 45
    6ee2:	50 e0       	ldi	r21, 0x00	; 0
    6ee4:	69 e1       	ldi	r22, 0x19	; 25
    6ee6:	79 e1       	ldi	r23, 0x19	; 25
    6ee8:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    6eec:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    6ef0:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <xStreamBufferReceive>
    6ef4:	89 e1       	ldi	r24, 0x19	; 25
    6ef6:	99 e1       	ldi	r25, 0x19	; 25
    6ef8:	02 c0       	rjmp	.+4      	; 0x6efe <_upload_message+0xaa>
    6efa:	80 e0       	ldi	r24, 0x00	; 0
    6efc:	90 e0       	ldi	r25, 0x00	; 0
    6efe:	df 91       	pop	r29
    6f00:	cf 91       	pop	r28
    6f02:	1f 91       	pop	r17
    6f04:	0f 91       	pop	r16
    6f06:	08 95       	ret

00006f08 <_reply2return_code>:
    6f08:	2f 92       	push	r2
    6f0a:	3f 92       	push	r3
    6f0c:	4f 92       	push	r4
    6f0e:	5f 92       	push	r5
    6f10:	6f 92       	push	r6
    6f12:	7f 92       	push	r7
    6f14:	8f 92       	push	r8
    6f16:	9f 92       	push	r9
    6f18:	af 92       	push	r10
    6f1a:	bf 92       	push	r11
    6f1c:	cf 92       	push	r12
    6f1e:	df 92       	push	r13
    6f20:	ef 92       	push	r14
    6f22:	ff 92       	push	r15
    6f24:	0f 93       	push	r16
    6f26:	1f 93       	push	r17
    6f28:	cf 93       	push	r28
    6f2a:	df 93       	push	r29
    6f2c:	5c 01       	movw	r10, r24
    6f2e:	fc 01       	movw	r30, r24
    6f30:	01 90       	ld	r0, Z+
    6f32:	00 20       	and	r0, r0
    6f34:	e9 f7       	brne	.-6      	; 0x6f30 <_reply2return_code+0x28>
    6f36:	31 97       	sbiw	r30, 0x01	; 1
    6f38:	6f 01       	movw	r12, r30
    6f3a:	c8 1a       	sub	r12, r24
    6f3c:	d9 0a       	sbc	r13, r25
    6f3e:	5c 2c       	mov	r5, r12
    6f40:	0f 2e       	mov	r0, r31
    6f42:	f0 ed       	ldi	r31, 0xD0	; 208
    6f44:	8f 2e       	mov	r8, r31
    6f46:	f6 e0       	ldi	r31, 0x06	; 6
    6f48:	9f 2e       	mov	r9, r31
    6f4a:	f0 2d       	mov	r31, r0
    6f4c:	e1 2c       	mov	r14, r1
    6f4e:	f1 2c       	mov	r15, r1
    6f50:	4c 2c       	mov	r4, r12
    6f52:	37 01       	movw	r6, r14
    6f54:	f4 01       	movw	r30, r8
    6f56:	01 81       	ldd	r16, Z+1	; 0x01
    6f58:	12 81       	ldd	r17, Z+2	; 0x02
    6f5a:	e8 01       	movw	r28, r16
    6f5c:	09 90       	ld	r0, Y+
    6f5e:	00 20       	and	r0, r0
    6f60:	e9 f7       	brne	.-6      	; 0x6f5c <_reply2return_code+0x54>
    6f62:	21 97       	sbiw	r28, 0x01	; 1
    6f64:	c0 1b       	sub	r28, r16
    6f66:	d1 0b       	sbc	r29, r17
    6f68:	3c 2e       	mov	r3, r28
    6f6a:	f9 e0       	ldi	r31, 0x09	; 9
    6f6c:	cf 16       	cp	r12, r31
    6f6e:	d1 04       	cpc	r13, r1
    6f70:	58 f0       	brcs	.+22     	; 0x6f88 <_reply2return_code+0x80>
    6f72:	f4 01       	movw	r30, r8
    6f74:	20 80       	ld	r2, Z
    6f76:	fe e0       	ldi	r31, 0x0E	; 14
    6f78:	2f 12       	cpse	r2, r31
    6f7a:	06 c0       	rjmp	.+12     	; 0x6f88 <_reply2return_code+0x80>
    6f7c:	b8 01       	movw	r22, r16
    6f7e:	c5 01       	movw	r24, r10
    6f80:	0e 94 65 4a 	call	0x94ca	; 0x94ca <strcasestr>
    6f84:	89 2b       	or	r24, r25
    6f86:	09 f5       	brne	.+66     	; 0x6fca <_reply2return_code+0xc2>
    6f88:	44 2d       	mov	r20, r4
    6f8a:	35 14       	cp	r3, r5
    6f8c:	08 f4       	brcc	.+2      	; 0x6f90 <_reply2return_code+0x88>
    6f8e:	4c 2f       	mov	r20, r28
    6f90:	50 e0       	ldi	r21, 0x00	; 0
    6f92:	b8 01       	movw	r22, r16
    6f94:	c5 01       	movw	r24, r10
    6f96:	0e 94 9c 4a 	call	0x9538	; 0x9538 <strncasecmp>
    6f9a:	89 2b       	or	r24, r25
    6f9c:	49 f4       	brne	.+18     	; 0x6fb0 <_reply2return_code+0xa8>
    6f9e:	f3 01       	movw	r30, r6
    6fa0:	ee 0f       	add	r30, r30
    6fa2:	ff 1f       	adc	r31, r31
    6fa4:	e6 0d       	add	r30, r6
    6fa6:	f7 1d       	adc	r31, r7
    6fa8:	e0 53       	subi	r30, 0x30	; 48
    6faa:	f9 4f       	sbci	r31, 0xF9	; 249
    6fac:	20 80       	ld	r2, Z
    6fae:	0d c0       	rjmp	.+26     	; 0x6fca <_reply2return_code+0xc2>
    6fb0:	8f ef       	ldi	r24, 0xFF	; 255
    6fb2:	e8 1a       	sub	r14, r24
    6fb4:	f8 0a       	sbc	r15, r24
    6fb6:	e3 e0       	ldi	r30, 0x03	; 3
    6fb8:	8e 0e       	add	r8, r30
    6fba:	91 1c       	adc	r9, r1
    6fbc:	f1 e1       	ldi	r31, 0x11	; 17
    6fbe:	ef 16       	cp	r14, r31
    6fc0:	f1 04       	cpc	r15, r1
    6fc2:	39 f6       	brne	.-114    	; 0x6f52 <_reply2return_code+0x4a>
    6fc4:	68 94       	set
    6fc6:	22 24       	eor	r2, r2
    6fc8:	24 f8       	bld	r2, 4
    6fca:	82 2d       	mov	r24, r2
    6fcc:	df 91       	pop	r29
    6fce:	cf 91       	pop	r28
    6fd0:	1f 91       	pop	r17
    6fd2:	0f 91       	pop	r16
    6fd4:	ff 90       	pop	r15
    6fd6:	ef 90       	pop	r14
    6fd8:	df 90       	pop	r13
    6fda:	cf 90       	pop	r12
    6fdc:	bf 90       	pop	r11
    6fde:	af 90       	pop	r10
    6fe0:	9f 90       	pop	r9
    6fe2:	8f 90       	pop	r8
    6fe4:	7f 90       	pop	r7
    6fe6:	6f 90       	pop	r6
    6fe8:	5f 90       	pop	r5
    6fea:	4f 90       	pop	r4
    6fec:	3f 90       	pop	r3
    6fee:	2f 90       	pop	r2
    6ff0:	08 95       	ret

00006ff2 <_upload_message_rc>:
    6ff2:	30 df       	rcall	.-416    	; 0x6e54 <_upload_message>
    6ff4:	89 cf       	rjmp	.-238    	; 0x6f08 <_reply2return_code>
    6ff6:	08 95       	ret

00006ff8 <lora_driver_flush_buffers>:
    6ff8:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    6ffc:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    7000:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <xStreamBufferReset>
    7004:	08 95       	ret

00007006 <lora_driver_create>:
    7006:	8f 92       	push	r8
    7008:	9f 92       	push	r9
    700a:	af 92       	push	r10
    700c:	cf 92       	push	r12
    700e:	ef 92       	push	r14
    7010:	0f 93       	push	r16
    7012:	1f 93       	push	r17
    7014:	cf 93       	push	r28
    7016:	c8 2f       	mov	r28, r24
    7018:	8b 01       	movw	r16, r22
    701a:	41 e0       	ldi	r20, 0x01	; 1
    701c:	60 e0       	ldi	r22, 0x00	; 0
    701e:	70 e0       	ldi	r23, 0x00	; 0
    7020:	88 ec       	ldi	r24, 0xC8	; 200
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	0e 94 c0 19 	call	0x3380	; 0x3380 <xStreamBufferGenericCreate>
    7028:	90 93 91 18 	sts	0x1891, r25	; 0x801891 <_serial_reply_buffer_handle+0x1>
    702c:	80 93 90 18 	sts	0x1890, r24	; 0x801890 <_serial_reply_buffer_handle>
    7030:	10 93 8f 18 	sts	0x188F, r17	; 0x80188f <_downlinkMessageBuffer+0x1>
    7034:	00 93 8e 18 	sts	0x188E, r16	; 0x80188e <_downlinkMessageBuffer>
    7038:	0f 2e       	mov	r0, r31
    703a:	f4 ee       	ldi	r31, 0xE4	; 228
    703c:	8f 2e       	mov	r8, r31
    703e:	f6 e3       	ldi	r31, 0x36	; 54
    7040:	9f 2e       	mov	r9, r31
    7042:	f0 2d       	mov	r31, r0
    7044:	68 94       	set
    7046:	aa 24       	eor	r10, r10
    7048:	a6 f8       	bld	r10, 6
    704a:	68 94       	set
    704c:	cc 24       	eor	r12, r12
    704e:	c6 f8       	bld	r12, 6
    7050:	e1 2c       	mov	r14, r1
    7052:	00 e0       	ldi	r16, 0x00	; 0
    7054:	23 e0       	ldi	r18, 0x03	; 3
    7056:	40 e0       	ldi	r20, 0x00	; 0
    7058:	51 ee       	ldi	r21, 0xE1	; 225
    705a:	60 e0       	ldi	r22, 0x00	; 0
    705c:	70 e0       	ldi	r23, 0x00	; 0
    705e:	8c 2f       	mov	r24, r28
    7060:	2c d4       	rcall	.+2136   	; 0x78ba <serial_new_instance>
    7062:	90 93 93 18 	sts	0x1893, r25	; 0x801893 <_rn2483_serial+0x1>
    7066:	80 93 92 18 	sts	0x1892, r24	; 0x801892 <_rn2483_serial>
    706a:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <register_access+0x8>
    706e:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <register_access+0x9>
    7072:	64 e0       	ldi	r22, 0x04	; 4
    7074:	87 e0       	ldi	r24, 0x07	; 7
    7076:	91 e0       	ldi	r25, 0x01	; 1
    7078:	19 95       	eicall
    707a:	cf 91       	pop	r28
    707c:	1f 91       	pop	r17
    707e:	0f 91       	pop	r16
    7080:	ef 90       	pop	r14
    7082:	cf 90       	pop	r12
    7084:	af 90       	pop	r10
    7086:	9f 90       	pop	r9
    7088:	8f 90       	pop	r8
    708a:	08 95       	ret

0000708c <lora_driver_reset_rn2483>:
    708c:	88 23       	and	r24, r24
    708e:	49 f0       	breq	.+18     	; 0x70a2 <lora_driver_reset_rn2483+0x16>
    7090:	e0 91 88 19 	lds	r30, 0x1988	; 0x801988 <register_access+0x12>
    7094:	f0 91 89 19 	lds	r31, 0x1989	; 0x801989 <register_access+0x13>
    7098:	64 e0       	ldi	r22, 0x04	; 4
    709a:	88 e0       	ldi	r24, 0x08	; 8
    709c:	91 e0       	ldi	r25, 0x01	; 1
    709e:	19 95       	eicall
    70a0:	08 95       	ret
    70a2:	e0 91 7e 19 	lds	r30, 0x197E	; 0x80197e <register_access+0x8>
    70a6:	f0 91 7f 19 	lds	r31, 0x197F	; 0x80197f <register_access+0x9>
    70aa:	64 e0       	ldi	r22, 0x04	; 4
    70ac:	88 e0       	ldi	r24, 0x08	; 8
    70ae:	91 e0       	ldi	r25, 0x01	; 1
    70b0:	19 95       	eicall
    70b2:	08 95       	ret

000070b4 <lora_driver_rn2483_factory_reset>:
    70b4:	60 e0       	ldi	r22, 0x00	; 0
    70b6:	70 e0       	ldi	r23, 0x00	; 0
    70b8:	86 e5       	ldi	r24, 0x56	; 86
    70ba:	94 e0       	ldi	r25, 0x04	; 4
    70bc:	cb de       	rcall	.-618    	; 0x6e54 <_upload_message>
    70be:	e9 e1       	ldi	r30, 0x19	; 25
    70c0:	f9 e1       	ldi	r31, 0x19	; 25
    70c2:	01 90       	ld	r0, Z+
    70c4:	00 20       	and	r0, r0
    70c6:	e9 f7       	brne	.-6      	; 0x70c2 <lora_driver_rn2483_factory_reset+0xe>
    70c8:	31 97       	sbiw	r30, 0x01	; 1
    70ca:	e9 51       	subi	r30, 0x19	; 25
    70cc:	f9 41       	sbci	r31, 0x19	; 25
    70ce:	81 e0       	ldi	r24, 0x01	; 1
    70d0:	75 97       	sbiw	r30, 0x15	; 21
    70d2:	08 f0       	brcs	.+2      	; 0x70d6 <lora_driver_rn2483_factory_reset+0x22>
    70d4:	80 e0       	ldi	r24, 0x00	; 0
    70d6:	08 95       	ret

000070d8 <lora_driver_get_rn2483_hweui>:
    70d8:	cf 93       	push	r28
    70da:	df 93       	push	r29
    70dc:	ec 01       	movw	r28, r24
    70de:	60 e0       	ldi	r22, 0x00	; 0
    70e0:	70 e0       	ldi	r23, 0x00	; 0
    70e2:	87 e6       	ldi	r24, 0x67	; 103
    70e4:	94 e0       	ldi	r25, 0x04	; 4
    70e6:	b6 de       	rcall	.-660    	; 0x6e54 <_upload_message>
    70e8:	e9 e1       	ldi	r30, 0x19	; 25
    70ea:	f9 e1       	ldi	r31, 0x19	; 25
    70ec:	01 90       	ld	r0, Z+
    70ee:	00 20       	and	r0, r0
    70f0:	e9 f7       	brne	.-6      	; 0x70ec <lora_driver_get_rn2483_hweui+0x14>
    70f2:	ea 52       	subi	r30, 0x2A	; 42
    70f4:	f9 41       	sbci	r31, 0x19	; 25
    70f6:	39 f4       	brne	.+14     	; 0x7106 <lora_driver_get_rn2483_hweui+0x2e>
    70f8:	69 e1       	ldi	r22, 0x19	; 25
    70fa:	79 e1       	ldi	r23, 0x19	; 25
    70fc:	ce 01       	movw	r24, r28
    70fe:	0e 94 95 4a 	call	0x952a	; 0x952a <strcpy>
    7102:	80 e0       	ldi	r24, 0x00	; 0
    7104:	02 c0       	rjmp	.+4      	; 0x710a <lora_driver_get_rn2483_hweui+0x32>
    7106:	18 82       	st	Y, r1
    7108:	81 e0       	ldi	r24, 0x01	; 1
    710a:	df 91       	pop	r29
    710c:	cf 91       	pop	r28
    710e:	08 95       	ret

00007110 <lora_driver_set_device_identifier>:
    7110:	fc 01       	movw	r30, r24
    7112:	01 90       	ld	r0, Z+
    7114:	00 20       	and	r0, r0
    7116:	e9 f7       	brne	.-6      	; 0x7112 <lora_driver_set_device_identifier+0x2>
    7118:	9f 01       	movw	r18, r30
    711a:	21 51       	subi	r18, 0x11	; 17
    711c:	31 09       	sbc	r19, r1
    711e:	28 17       	cp	r18, r24
    7120:	39 07       	cpc	r19, r25
    7122:	29 f4       	brne	.+10     	; 0x712e <lora_driver_set_device_identifier+0x1e>
    7124:	bc 01       	movw	r22, r24
    7126:	85 e9       	ldi	r24, 0x95	; 149
    7128:	94 e0       	ldi	r25, 0x04	; 4
    712a:	63 cf       	rjmp	.-314    	; 0x6ff2 <_upload_message_rc>
    712c:	08 95       	ret
    712e:	89 e0       	ldi	r24, 0x09	; 9
    7130:	08 95       	ret

00007132 <lora_driver_set_application_identifier>:
    7132:	fc 01       	movw	r30, r24
    7134:	01 90       	ld	r0, Z+
    7136:	00 20       	and	r0, r0
    7138:	e9 f7       	brne	.-6      	; 0x7134 <lora_driver_set_application_identifier+0x2>
    713a:	9f 01       	movw	r18, r30
    713c:	21 51       	subi	r18, 0x11	; 17
    713e:	31 09       	sbc	r19, r1
    7140:	28 17       	cp	r18, r24
    7142:	39 07       	cpc	r19, r25
    7144:	29 f4       	brne	.+10     	; 0x7150 <lora_driver_set_application_identifier+0x1e>
    7146:	bc 01       	movw	r22, r24
    7148:	84 ea       	ldi	r24, 0xA4	; 164
    714a:	94 e0       	ldi	r25, 0x04	; 4
    714c:	52 cf       	rjmp	.-348    	; 0x6ff2 <_upload_message_rc>
    714e:	08 95       	ret
    7150:	89 e0       	ldi	r24, 0x09	; 9
    7152:	08 95       	ret

00007154 <lora_driver_set_application_key>:
    7154:	fc 01       	movw	r30, r24
    7156:	01 90       	ld	r0, Z+
    7158:	00 20       	and	r0, r0
    715a:	e9 f7       	brne	.-6      	; 0x7156 <lora_driver_set_application_key+0x2>
    715c:	9f 01       	movw	r18, r30
    715e:	21 52       	subi	r18, 0x21	; 33
    7160:	31 09       	sbc	r19, r1
    7162:	28 17       	cp	r18, r24
    7164:	39 07       	cpc	r19, r25
    7166:	29 f4       	brne	.+10     	; 0x7172 <lora_driver_set_application_key+0x1e>
    7168:	bc 01       	movw	r22, r24
    716a:	83 eb       	ldi	r24, 0xB3	; 179
    716c:	94 e0       	ldi	r25, 0x04	; 4
    716e:	41 cf       	rjmp	.-382    	; 0x6ff2 <_upload_message_rc>
    7170:	08 95       	ret
    7172:	89 e0       	ldi	r24, 0x09	; 9
    7174:	08 95       	ret

00007176 <lora_driver_save_mac>:
    7176:	60 e0       	ldi	r22, 0x00	; 0
    7178:	70 e0       	ldi	r23, 0x00	; 0
    717a:	82 ef       	ldi	r24, 0xF2	; 242
    717c:	94 e0       	ldi	r25, 0x04	; 4
    717e:	39 cf       	rjmp	.-398    	; 0x6ff2 <_upload_message_rc>
    7180:	08 95       	ret

00007182 <lora_driver_join>:
    7182:	0f 93       	push	r16
    7184:	1f 93       	push	r17
    7186:	e8 2f       	mov	r30, r24
    7188:	f0 e0       	ldi	r31, 0x00	; 0
    718a:	ee 0f       	add	r30, r30
    718c:	ff 1f       	adc	r31, r31
    718e:	e4 53       	subi	r30, 0x34	; 52
    7190:	f9 4f       	sbci	r31, 0xF9	; 249
    7192:	60 81       	ld	r22, Z
    7194:	71 81       	ldd	r23, Z+1	; 0x01
    7196:	8b ef       	ldi	r24, 0xFB	; 251
    7198:	94 e0       	ldi	r25, 0x04	; 4
    719a:	2b df       	rcall	.-426    	; 0x6ff2 <_upload_message_rc>
    719c:	81 11       	cpse	r24, r1
    719e:	14 c0       	rjmp	.+40     	; 0x71c8 <lora_driver_join+0x46>
    71a0:	08 e2       	ldi	r16, 0x28	; 40
    71a2:	15 e0       	ldi	r17, 0x05	; 5
    71a4:	20 e0       	ldi	r18, 0x00	; 0
    71a6:	30 e0       	ldi	r19, 0x00	; 0
    71a8:	4d e2       	ldi	r20, 0x2D	; 45
    71aa:	50 e0       	ldi	r21, 0x00	; 0
    71ac:	69 e1       	ldi	r22, 0x19	; 25
    71ae:	79 e1       	ldi	r23, 0x19	; 25
    71b0:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    71b4:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    71b8:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <xStreamBufferReceive>
    71bc:	88 23       	and	r24, r24
    71be:	21 f0       	breq	.+8      	; 0x71c8 <lora_driver_join+0x46>
    71c0:	89 e1       	ldi	r24, 0x19	; 25
    71c2:	99 e1       	ldi	r25, 0x19	; 25
    71c4:	a1 de       	rcall	.-702    	; 0x6f08 <_reply2return_code>
    71c6:	03 c0       	rjmp	.+6      	; 0x71ce <lora_driver_join+0x4c>
    71c8:	89 e1       	ldi	r24, 0x19	; 25
    71ca:	99 e1       	ldi	r25, 0x19	; 25
    71cc:	9d de       	rcall	.-710    	; 0x6f08 <_reply2return_code>
    71ce:	1f 91       	pop	r17
    71d0:	0f 91       	pop	r16
    71d2:	08 95       	ret

000071d4 <lora_driver_sent_upload_message>:
    71d4:	0f 93       	push	r16
    71d6:	1f 93       	push	r17
    71d8:	cf 93       	push	r28
    71da:	df 93       	push	r29
    71dc:	1f 92       	push	r1
    71de:	cd b7       	in	r28, 0x3d	; 61
    71e0:	de b7       	in	r29, 0x3e	; 62
    71e2:	db 01       	movw	r26, r22
    71e4:	11 96       	adiw	r26, 0x01	; 1
    71e6:	9c 91       	ld	r25, X
    71e8:	11 97       	sbiw	r26, 0x01	; 1
    71ea:	95 31       	cpi	r25, 0x15	; 21
    71ec:	08 f0       	brcs	.+2      	; 0x71f0 <lora_driver_sent_upload_message+0x1c>
    71ee:	b4 c0       	rjmp	.+360    	; 0x7358 <lora_driver_sent_upload_message+0x184>
    71f0:	99 23       	and	r25, r25
    71f2:	81 f1       	breq	.+96     	; 0x7254 <lora_driver_sent_upload_message+0x80>
    71f4:	60 e0       	ldi	r22, 0x00	; 0
    71f6:	70 e0       	ldi	r23, 0x00	; 0
    71f8:	27 2f       	mov	r18, r23
    71fa:	30 e0       	ldi	r19, 0x00	; 0
    71fc:	46 2f       	mov	r20, r22
    71fe:	50 e0       	ldi	r21, 0x00	; 0
    7200:	fd 01       	movw	r30, r26
    7202:	e4 0f       	add	r30, r20
    7204:	f5 1f       	adc	r31, r21
    7206:	92 81       	ldd	r25, Z+2	; 0x02
    7208:	92 95       	swap	r25
    720a:	9f 70       	andi	r25, 0x0F	; 15
    720c:	9a 30       	cpi	r25, 0x0A	; 10
    720e:	10 f0       	brcs	.+4      	; 0x7214 <lora_driver_sent_upload_message+0x40>
    7210:	99 5c       	subi	r25, 0xC9	; 201
    7212:	01 c0       	rjmp	.+2      	; 0x7216 <lora_driver_sent_upload_message+0x42>
    7214:	90 5d       	subi	r25, 0xD0	; 208
    7216:	f9 01       	movw	r30, r18
    7218:	e6 55       	subi	r30, 0x56	; 86
    721a:	f7 4e       	sbci	r31, 0xE7	; 231
    721c:	90 83       	st	Z, r25
    721e:	2f 5f       	subi	r18, 0xFF	; 255
    7220:	3f 4f       	sbci	r19, 0xFF	; 255
    7222:	fd 01       	movw	r30, r26
    7224:	e4 0f       	add	r30, r20
    7226:	f5 1f       	adc	r31, r21
    7228:	92 81       	ldd	r25, Z+2	; 0x02
    722a:	9f 70       	andi	r25, 0x0F	; 15
    722c:	49 2f       	mov	r20, r25
    722e:	50 e0       	ldi	r21, 0x00	; 0
    7230:	4a 30       	cpi	r20, 0x0A	; 10
    7232:	51 05       	cpc	r21, r1
    7234:	14 f0       	brlt	.+4      	; 0x723a <lora_driver_sent_upload_message+0x66>
    7236:	99 5c       	subi	r25, 0xC9	; 201
    7238:	01 c0       	rjmp	.+2      	; 0x723c <lora_driver_sent_upload_message+0x68>
    723a:	90 5d       	subi	r25, 0xD0	; 208
    723c:	f9 01       	movw	r30, r18
    723e:	e6 55       	subi	r30, 0x56	; 86
    7240:	f7 4e       	sbci	r31, 0xE7	; 231
    7242:	90 83       	st	Z, r25
    7244:	7e 5f       	subi	r23, 0xFE	; 254
    7246:	6f 5f       	subi	r22, 0xFF	; 255
    7248:	11 96       	adiw	r26, 0x01	; 1
    724a:	9c 91       	ld	r25, X
    724c:	11 97       	sbiw	r26, 0x01	; 1
    724e:	69 17       	cp	r22, r25
    7250:	98 f2       	brcs	.-90     	; 0x71f8 <lora_driver_sent_upload_message+0x24>
    7252:	01 c0       	rjmp	.+2      	; 0x7256 <lora_driver_sent_upload_message+0x82>
    7254:	70 e0       	ldi	r23, 0x00	; 0
    7256:	e7 2f       	mov	r30, r23
    7258:	f0 e0       	ldi	r31, 0x00	; 0
    725a:	e6 55       	subi	r30, 0x56	; 86
    725c:	f7 4e       	sbci	r31, 0xE7	; 231
    725e:	10 82       	st	Z, r1
    7260:	4c 91       	ld	r20, X
    7262:	81 11       	cpse	r24, r1
    7264:	03 c0       	rjmp	.+6      	; 0x726c <lora_driver_sent_upload_message+0x98>
    7266:	84 e0       	ldi	r24, 0x04	; 4
    7268:	95 e0       	ldi	r25, 0x05	; 5
    726a:	02 c0       	rjmp	.+4      	; 0x7270 <lora_driver_sent_upload_message+0x9c>
    726c:	86 e0       	ldi	r24, 0x06	; 6
    726e:	95 e0       	ldi	r25, 0x05	; 5
    7270:	2a ea       	ldi	r18, 0xAA	; 170
    7272:	38 e1       	ldi	r19, 0x18	; 24
    7274:	3f 93       	push	r19
    7276:	2f 93       	push	r18
    7278:	1f 92       	push	r1
    727a:	4f 93       	push	r20
    727c:	9f 93       	push	r25
    727e:	8f 93       	push	r24
    7280:	8a e0       	ldi	r24, 0x0A	; 10
    7282:	95 e0       	ldi	r25, 0x05	; 5
    7284:	9f 93       	push	r25
    7286:	8f 93       	push	r24
    7288:	8c ee       	ldi	r24, 0xEC	; 236
    728a:	98 e1       	ldi	r25, 0x18	; 24
    728c:	9f 93       	push	r25
    728e:	8f 93       	push	r24
    7290:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    7294:	60 e0       	ldi	r22, 0x00	; 0
    7296:	70 e0       	ldi	r23, 0x00	; 0
    7298:	8c ee       	ldi	r24, 0xEC	; 236
    729a:	98 e1       	ldi	r25, 0x18	; 24
    729c:	aa de       	rcall	.-684    	; 0x6ff2 <_upload_message_rc>
    729e:	0f b6       	in	r0, 0x3f	; 63
    72a0:	f8 94       	cli
    72a2:	de bf       	out	0x3e, r29	; 62
    72a4:	0f be       	out	0x3f, r0	; 63
    72a6:	cd bf       	out	0x3d, r28	; 61
    72a8:	81 11       	cpse	r24, r1
    72aa:	59 c0       	rjmp	.+178    	; 0x735e <lora_driver_sent_upload_message+0x18a>
    72ac:	08 e2       	ldi	r16, 0x28	; 40
    72ae:	15 e0       	ldi	r17, 0x05	; 5
    72b0:	20 e0       	ldi	r18, 0x00	; 0
    72b2:	30 e0       	ldi	r19, 0x00	; 0
    72b4:	4d e2       	ldi	r20, 0x2D	; 45
    72b6:	50 e0       	ldi	r21, 0x00	; 0
    72b8:	69 e1       	ldi	r22, 0x19	; 25
    72ba:	79 e1       	ldi	r23, 0x19	; 25
    72bc:	80 91 90 18 	lds	r24, 0x1890	; 0x801890 <_serial_reply_buffer_handle>
    72c0:	90 91 91 18 	lds	r25, 0x1891	; 0x801891 <_serial_reply_buffer_handle+0x1>
    72c4:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <xStreamBufferReceive>
    72c8:	88 23       	and	r24, r24
    72ca:	09 f4       	brne	.+2      	; 0x72ce <lora_driver_sent_upload_message+0xfa>
    72cc:	47 c0       	rjmp	.+142    	; 0x735c <lora_driver_sent_upload_message+0x188>
    72ce:	89 e1       	ldi	r24, 0x19	; 25
    72d0:	99 e1       	ldi	r25, 0x19	; 25
    72d2:	1a de       	rcall	.-972    	; 0x6f08 <_reply2return_code>
    72d4:	8e 30       	cpi	r24, 0x0E	; 14
    72d6:	09 f0       	breq	.+2      	; 0x72da <lora_driver_sent_upload_message+0x106>
    72d8:	42 c0       	rjmp	.+132    	; 0x735e <lora_driver_sent_upload_message+0x18a>
    72da:	87 e0       	ldi	r24, 0x07	; 7
    72dc:	89 83       	std	Y+1, r24	; 0x01
    72de:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <_downlinkMessageBuffer>
    72e2:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <_downlinkMessageBuffer+0x1>
    72e6:	89 2b       	or	r24, r25
    72e8:	a9 f1       	breq	.+106    	; 0x7354 <lora_driver_sent_upload_message+0x180>
    72ea:	be 01       	movw	r22, r28
    72ec:	6f 5f       	subi	r22, 0xFF	; 255
    72ee:	7f 4f       	sbci	r23, 0xFF	; 255
    72f0:	89 e1       	ldi	r24, 0x19	; 25
    72f2:	99 e1       	ldi	r25, 0x19	; 25
    72f4:	68 d1       	rcall	.+720    	; 0x75c6 <decode_port_no>
    72f6:	80 93 94 18 	sts	0x1894, r24	; 0x801894 <_downlink_payload>
    72fa:	e9 81       	ldd	r30, Y+1	; 0x01
    72fc:	f0 e0       	ldi	r31, 0x00	; 0
    72fe:	e7 5e       	subi	r30, 0xE7	; 231
    7300:	f6 4e       	sbci	r31, 0xE6	; 230
    7302:	df 01       	movw	r26, r30
    7304:	0d 90       	ld	r0, X+
    7306:	00 20       	and	r0, r0
    7308:	e9 f7       	brne	.-6      	; 0x7304 <lora_driver_sent_upload_message+0x130>
    730a:	11 97       	sbiw	r26, 0x01	; 1
    730c:	ae 1b       	sub	r26, r30
    730e:	bf 0b       	sbc	r27, r31
    7310:	aa 23       	and	r26, r26
    7312:	91 f0       	breq	.+36     	; 0x7338 <lora_driver_sent_upload_message+0x164>
    7314:	bb 27       	eor	r27, r27
    7316:	cd 01       	movw	r24, r26
    7318:	01 97       	sbiw	r24, 0x01	; 1
    731a:	9c 01       	movw	r18, r24
    731c:	12 f4       	brpl	.+4      	; 0x7322 <lora_driver_sent_upload_message+0x14e>
    731e:	2f 5f       	subi	r18, 0xFF	; 255
    7320:	3f 4f       	sbci	r19, 0xFF	; 255
    7322:	35 95       	asr	r19
    7324:	27 95       	ror	r18
    7326:	20 93 95 18 	sts	0x1895, r18	; 0x801895 <_downlink_payload+0x1>
    732a:	af 01       	movw	r20, r30
    732c:	4f 5f       	subi	r20, 0xFF	; 255
    732e:	5f 4f       	sbci	r21, 0xFF	; 255
    7330:	64 e1       	ldi	r22, 0x14	; 20
    7332:	86 e9       	ldi	r24, 0x96	; 150
    7334:	98 e1       	ldi	r25, 0x18	; 24
    7336:	73 d1       	rcall	.+742    	; 0x761e <decode_hexadecimal_string_bytes>
    7338:	01 e0       	ldi	r16, 0x01	; 1
    733a:	10 e0       	ldi	r17, 0x00	; 0
    733c:	20 e0       	ldi	r18, 0x00	; 0
    733e:	30 e0       	ldi	r19, 0x00	; 0
    7340:	46 e1       	ldi	r20, 0x16	; 22
    7342:	50 e0       	ldi	r21, 0x00	; 0
    7344:	64 e9       	ldi	r22, 0x94	; 148
    7346:	78 e1       	ldi	r23, 0x18	; 24
    7348:	80 91 8e 18 	lds	r24, 0x188E	; 0x80188e <_downlinkMessageBuffer>
    734c:	90 91 8f 18 	lds	r25, 0x188F	; 0x80188f <_downlinkMessageBuffer+0x1>
    7350:	0e 94 af 1a 	call	0x355e	; 0x355e <xStreamBufferSend>
    7354:	8e e0       	ldi	r24, 0x0E	; 14
    7356:	03 c0       	rjmp	.+6      	; 0x735e <lora_driver_sent_upload_message+0x18a>
    7358:	84 e1       	ldi	r24, 0x14	; 20
    735a:	01 c0       	rjmp	.+2      	; 0x735e <lora_driver_sent_upload_message+0x18a>
    735c:	80 e0       	ldi	r24, 0x00	; 0
    735e:	0f 90       	pop	r0
    7360:	df 91       	pop	r29
    7362:	cf 91       	pop	r28
    7364:	1f 91       	pop	r17
    7366:	0f 91       	pop	r16
    7368:	08 95       	ret

0000736a <lora_driver_set_adaptive_data_rate>:
    736a:	81 30       	cpi	r24, 0x01	; 1
    736c:	19 f0       	breq	.+6      	; 0x7374 <lora_driver_set_adaptive_data_rate+0xa>
    736e:	6a e1       	ldi	r22, 0x1A	; 26
    7370:	75 e0       	ldi	r23, 0x05	; 5
    7372:	02 c0       	rjmp	.+4      	; 0x7378 <lora_driver_set_adaptive_data_rate+0xe>
    7374:	63 ef       	ldi	r22, 0xF3	; 243
    7376:	75 e0       	ldi	r23, 0x05	; 5
    7378:	8e e1       	ldi	r24, 0x1E	; 30
    737a:	95 e0       	ldi	r25, 0x05	; 5
    737c:	3a ce       	rjmp	.-908    	; 0x6ff2 <_upload_message_rc>
    737e:	08 95       	ret

00007380 <lora_driver_set_receive_delay>:
    7380:	9f 93       	push	r25
    7382:	8f 93       	push	r24
    7384:	8f e4       	ldi	r24, 0x4F	; 79
    7386:	95 e0       	ldi	r25, 0x05	; 5
    7388:	9f 93       	push	r25
    738a:	8f 93       	push	r24
    738c:	8c ee       	ldi	r24, 0xEC	; 236
    738e:	98 e1       	ldi	r25, 0x18	; 24
    7390:	9f 93       	push	r25
    7392:	8f 93       	push	r24
    7394:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    7398:	60 e0       	ldi	r22, 0x00	; 0
    739a:	70 e0       	ldi	r23, 0x00	; 0
    739c:	8c ee       	ldi	r24, 0xEC	; 236
    739e:	98 e1       	ldi	r25, 0x18	; 24
    73a0:	28 de       	rcall	.-944    	; 0x6ff2 <_upload_message_rc>
    73a2:	0f 90       	pop	r0
    73a4:	0f 90       	pop	r0
    73a6:	0f 90       	pop	r0
    73a8:	0f 90       	pop	r0
    73aa:	0f 90       	pop	r0
    73ac:	0f 90       	pop	r0
    73ae:	08 95       	ret

000073b0 <lora_driver_configure_to_eu868>:
    73b0:	2f 92       	push	r2
    73b2:	3f 92       	push	r3
    73b4:	4f 92       	push	r4
    73b6:	5f 92       	push	r5
    73b8:	6f 92       	push	r6
    73ba:	7f 92       	push	r7
    73bc:	8f 92       	push	r8
    73be:	9f 92       	push	r9
    73c0:	af 92       	push	r10
    73c2:	bf 92       	push	r11
    73c4:	cf 92       	push	r12
    73c6:	df 92       	push	r13
    73c8:	ef 92       	push	r14
    73ca:	ff 92       	push	r15
    73cc:	0f 93       	push	r16
    73ce:	1f 93       	push	r17
    73d0:	cf 93       	push	r28
    73d2:	df 93       	push	r29
    73d4:	cd b7       	in	r28, 0x3d	; 61
    73d6:	de b7       	in	r29, 0x3e	; 62
    73d8:	a0 97       	sbiw	r28, 0x20	; 32
    73da:	0f b6       	in	r0, 0x3f	; 63
    73dc:	f8 94       	cli
    73de:	de bf       	out	0x3e, r29	; 62
    73e0:	0f be       	out	0x3f, r0	; 63
    73e2:	cd bf       	out	0x3d, r28	; 61
    73e4:	6c e7       	ldi	r22, 0x7C	; 124
    73e6:	75 e0       	ldi	r23, 0x05	; 5
    73e8:	88 e8       	ldi	r24, 0x88	; 136
    73ea:	95 e0       	ldi	r25, 0x05	; 5
    73ec:	33 dd       	rcall	.-1434   	; 0x6e54 <_upload_message>
    73ee:	8c dd       	rcall	.-1256   	; 0x6f08 <_reply2return_code>
    73f0:	81 11       	cpse	r24, r1
    73f2:	a3 c0       	rjmp	.+326    	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    73f4:	80 e2       	ldi	r24, 0x20	; 32
    73f6:	e2 ee       	ldi	r30, 0xE2	; 226
    73f8:	f3 e0       	ldi	r31, 0x03	; 3
    73fa:	de 01       	movw	r26, r28
    73fc:	11 96       	adiw	r26, 0x01	; 1
    73fe:	01 90       	ld	r0, Z+
    7400:	0d 92       	st	X+, r0
    7402:	8a 95       	dec	r24
    7404:	e1 f7       	brne	.-8      	; 0x73fe <lora_driver_configure_to_eu868+0x4e>
    7406:	9e 01       	movw	r18, r28
    7408:	2f 5f       	subi	r18, 0xFF	; 255
    740a:	3f 4f       	sbci	r19, 0xFF	; 255
    740c:	69 01       	movw	r12, r18
    740e:	e1 2c       	mov	r14, r1
    7410:	f1 2c       	mov	r15, r1
    7412:	0f 2e       	mov	r0, r31
    7414:	f4 e9       	ldi	r31, 0x94	; 148
    7416:	af 2e       	mov	r10, r31
    7418:	f5 e0       	ldi	r31, 0x05	; 5
    741a:	bf 2e       	mov	r11, r31
    741c:	f0 2d       	mov	r31, r0
    741e:	0c ee       	ldi	r16, 0xEC	; 236
    7420:	18 e1       	ldi	r17, 0x18	; 24
    7422:	0f 2e       	mov	r0, r31
    7424:	fd ea       	ldi	r31, 0xAD	; 173
    7426:	4f 2e       	mov	r4, r31
    7428:	f5 e0       	ldi	r31, 0x05	; 5
    742a:	5f 2e       	mov	r5, r31
    742c:	f0 2d       	mov	r31, r0
    742e:	0f 2e       	mov	r0, r31
    7430:	f4 ec       	ldi	r31, 0xC4	; 196
    7432:	8f 2e       	mov	r8, r31
    7434:	f5 e0       	ldi	r31, 0x05	; 5
    7436:	9f 2e       	mov	r9, r31
    7438:	f0 2d       	mov	r31, r0
    743a:	0f 2e       	mov	r0, r31
    743c:	fe ed       	ldi	r31, 0xDE	; 222
    743e:	6f 2e       	mov	r6, r31
    7440:	f5 e0       	ldi	r31, 0x05	; 5
    7442:	7f 2e       	mov	r7, r31
    7444:	f0 2d       	mov	r31, r0
    7446:	3e 2c       	mov	r3, r14
    7448:	2f 2c       	mov	r2, r15
    744a:	ff 92       	push	r15
    744c:	ef 92       	push	r14
    744e:	bf 92       	push	r11
    7450:	af 92       	push	r10
    7452:	1f 93       	push	r17
    7454:	0f 93       	push	r16
    7456:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    745a:	60 e0       	ldi	r22, 0x00	; 0
    745c:	70 e0       	ldi	r23, 0x00	; 0
    745e:	c8 01       	movw	r24, r16
    7460:	f9 dc       	rcall	.-1550   	; 0x6e54 <_upload_message>
    7462:	52 dd       	rcall	.-1372   	; 0x6f08 <_reply2return_code>
    7464:	0f 90       	pop	r0
    7466:	0f 90       	pop	r0
    7468:	0f 90       	pop	r0
    746a:	0f 90       	pop	r0
    746c:	0f 90       	pop	r0
    746e:	0f 90       	pop	r0
    7470:	81 11       	cpse	r24, r1
    7472:	63 c0       	rjmp	.+198    	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    7474:	32 e0       	ldi	r19, 0x02	; 2
    7476:	3e 15       	cp	r19, r14
    7478:	e8 f4       	brcc	.+58     	; 0x74b4 <lora_driver_configure_to_eu868+0x104>
    747a:	f6 01       	movw	r30, r12
    747c:	83 81       	ldd	r24, Z+3	; 0x03
    747e:	8f 93       	push	r24
    7480:	82 81       	ldd	r24, Z+2	; 0x02
    7482:	8f 93       	push	r24
    7484:	81 81       	ldd	r24, Z+1	; 0x01
    7486:	8f 93       	push	r24
    7488:	80 81       	ld	r24, Z
    748a:	8f 93       	push	r24
    748c:	ff 92       	push	r15
    748e:	ef 92       	push	r14
    7490:	5f 92       	push	r5
    7492:	4f 92       	push	r4
    7494:	1f 93       	push	r17
    7496:	0f 93       	push	r16
    7498:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    749c:	60 e0       	ldi	r22, 0x00	; 0
    749e:	70 e0       	ldi	r23, 0x00	; 0
    74a0:	c8 01       	movw	r24, r16
    74a2:	d8 dc       	rcall	.-1616   	; 0x6e54 <_upload_message>
    74a4:	31 dd       	rcall	.-1438   	; 0x6f08 <_reply2return_code>
    74a6:	0f b6       	in	r0, 0x3f	; 63
    74a8:	f8 94       	cli
    74aa:	de bf       	out	0x3e, r29	; 62
    74ac:	0f be       	out	0x3f, r0	; 63
    74ae:	cd bf       	out	0x3d, r28	; 61
    74b0:	81 11       	cpse	r24, r1
    74b2:	43 c0       	rjmp	.+134    	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    74b4:	2f 92       	push	r2
    74b6:	3f 92       	push	r3
    74b8:	9f 92       	push	r9
    74ba:	8f 92       	push	r8
    74bc:	1f 93       	push	r17
    74be:	0f 93       	push	r16
    74c0:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    74c4:	60 e0       	ldi	r22, 0x00	; 0
    74c6:	70 e0       	ldi	r23, 0x00	; 0
    74c8:	c8 01       	movw	r24, r16
    74ca:	c4 dc       	rcall	.-1656   	; 0x6e54 <_upload_message>
    74cc:	1d dd       	rcall	.-1478   	; 0x6f08 <_reply2return_code>
    74ce:	0f 90       	pop	r0
    74d0:	0f 90       	pop	r0
    74d2:	0f 90       	pop	r0
    74d4:	0f 90       	pop	r0
    74d6:	0f 90       	pop	r0
    74d8:	0f 90       	pop	r0
    74da:	81 11       	cpse	r24, r1
    74dc:	2e c0       	rjmp	.+92     	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    74de:	2f 92       	push	r2
    74e0:	3f 92       	push	r3
    74e2:	7f 92       	push	r7
    74e4:	6f 92       	push	r6
    74e6:	1f 93       	push	r17
    74e8:	0f 93       	push	r16
    74ea:	0e 94 3e 4b 	call	0x967c	; 0x967c <sprintf>
    74ee:	60 e0       	ldi	r22, 0x00	; 0
    74f0:	70 e0       	ldi	r23, 0x00	; 0
    74f2:	c8 01       	movw	r24, r16
    74f4:	af dc       	rcall	.-1698   	; 0x6e54 <_upload_message>
    74f6:	08 dd       	rcall	.-1520   	; 0x6f08 <_reply2return_code>
    74f8:	0f 90       	pop	r0
    74fa:	0f 90       	pop	r0
    74fc:	0f 90       	pop	r0
    74fe:	0f 90       	pop	r0
    7500:	0f 90       	pop	r0
    7502:	0f 90       	pop	r0
    7504:	81 11       	cpse	r24, r1
    7506:	19 c0       	rjmp	.+50     	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    7508:	3f ef       	ldi	r19, 0xFF	; 255
    750a:	e3 1a       	sub	r14, r19
    750c:	f3 0a       	sbc	r15, r19
    750e:	84 e0       	ldi	r24, 0x04	; 4
    7510:	c8 0e       	add	r12, r24
    7512:	d1 1c       	adc	r13, r1
    7514:	98 e0       	ldi	r25, 0x08	; 8
    7516:	e9 16       	cp	r14, r25
    7518:	f1 04       	cpc	r15, r1
    751a:	09 f0       	breq	.+2      	; 0x751e <lora_driver_configure_to_eu868+0x16e>
    751c:	94 cf       	rjmp	.-216    	; 0x7446 <lora_driver_configure_to_eu868+0x96>
    751e:	60 e0       	ldi	r22, 0x00	; 0
    7520:	70 e0       	ldi	r23, 0x00	; 0
    7522:	86 ef       	ldi	r24, 0xF6	; 246
    7524:	95 e0       	ldi	r25, 0x05	; 5
    7526:	96 dc       	rcall	.-1748   	; 0x6e54 <_upload_message>
    7528:	ef dc       	rcall	.-1570   	; 0x6f08 <_reply2return_code>
    752a:	81 11       	cpse	r24, r1
    752c:	06 c0       	rjmp	.+12     	; 0x753a <lora_driver_configure_to_eu868+0x18a>
    752e:	60 e0       	ldi	r22, 0x00	; 0
    7530:	70 e0       	ldi	r23, 0x00	; 0
    7532:	87 e0       	ldi	r24, 0x07	; 7
    7534:	96 e0       	ldi	r25, 0x06	; 6
    7536:	8e dc       	rcall	.-1764   	; 0x6e54 <_upload_message>
    7538:	e7 dc       	rcall	.-1586   	; 0x6f08 <_reply2return_code>
    753a:	a0 96       	adiw	r28, 0x20	; 32
    753c:	0f b6       	in	r0, 0x3f	; 63
    753e:	f8 94       	cli
    7540:	de bf       	out	0x3e, r29	; 62
    7542:	0f be       	out	0x3f, r0	; 63
    7544:	cd bf       	out	0x3d, r28	; 61
    7546:	df 91       	pop	r29
    7548:	cf 91       	pop	r28
    754a:	1f 91       	pop	r17
    754c:	0f 91       	pop	r16
    754e:	ff 90       	pop	r15
    7550:	ef 90       	pop	r14
    7552:	df 90       	pop	r13
    7554:	cf 90       	pop	r12
    7556:	bf 90       	pop	r11
    7558:	af 90       	pop	r10
    755a:	9f 90       	pop	r9
    755c:	8f 90       	pop	r8
    755e:	7f 90       	pop	r7
    7560:	6f 90       	pop	r6
    7562:	5f 90       	pop	r5
    7564:	4f 90       	pop	r4
    7566:	3f 90       	pop	r3
    7568:	2f 90       	pop	r2
    756a:	08 95       	ret

0000756c <lora_driver_set_otaa_identity>:
    756c:	ef 92       	push	r14
    756e:	ff 92       	push	r15
    7570:	0f 93       	push	r16
    7572:	1f 93       	push	r17
    7574:	cf 93       	push	r28
    7576:	df 93       	push	r29
    7578:	ec 01       	movw	r28, r24
    757a:	8b 01       	movw	r16, r22
    757c:	7a 01       	movw	r14, r20
    757e:	81 e0       	ldi	r24, 0x01	; 1
    7580:	f4 de       	rcall	.-536    	; 0x736a <lora_driver_set_adaptive_data_rate>
    7582:	81 11       	cpse	r24, r1
    7584:	0d c0       	rjmp	.+26     	; 0x75a0 <lora_driver_set_otaa_identity+0x34>
    7586:	ce 01       	movw	r24, r28
    7588:	d4 dd       	rcall	.-1112   	; 0x7132 <lora_driver_set_application_identifier>
    758a:	81 11       	cpse	r24, r1
    758c:	09 c0       	rjmp	.+18     	; 0x75a0 <lora_driver_set_otaa_identity+0x34>
    758e:	c8 01       	movw	r24, r16
    7590:	e1 dd       	rcall	.-1086   	; 0x7154 <lora_driver_set_application_key>
    7592:	81 11       	cpse	r24, r1
    7594:	05 c0       	rjmp	.+10     	; 0x75a0 <lora_driver_set_otaa_identity+0x34>
    7596:	c7 01       	movw	r24, r14
    7598:	bb dd       	rcall	.-1162   	; 0x7110 <lora_driver_set_device_identifier>
    759a:	81 11       	cpse	r24, r1
    759c:	01 c0       	rjmp	.+2      	; 0x75a0 <lora_driver_set_otaa_identity+0x34>
    759e:	eb dd       	rcall	.-1066   	; 0x7176 <lora_driver_save_mac>
    75a0:	df 91       	pop	r29
    75a2:	cf 91       	pop	r28
    75a4:	1f 91       	pop	r17
    75a6:	0f 91       	pop	r16
    75a8:	ff 90       	pop	r15
    75aa:	ef 90       	pop	r14
    75ac:	08 95       	ret

000075ae <lora_driver_map_return_code_to_text>:
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	fc 01       	movw	r30, r24
    75b2:	ee 0f       	add	r30, r30
    75b4:	ff 1f       	adc	r31, r31
    75b6:	8e 0f       	add	r24, r30
    75b8:	9f 1f       	adc	r25, r31
    75ba:	fc 01       	movw	r30, r24
    75bc:	e0 53       	subi	r30, 0x30	; 48
    75be:	f9 4f       	sbci	r31, 0xF9	; 249
    75c0:	81 81       	ldd	r24, Z+1	; 0x01
    75c2:	92 81       	ldd	r25, Z+2	; 0x02
    75c4:	08 95       	ret

000075c6 <decode_port_no>:
    75c6:	dc 01       	movw	r26, r24
    75c8:	00 97       	sbiw	r24, 0x00	; 0
    75ca:	29 f1       	breq	.+74     	; 0x7616 <decode_port_no+0x50>
    75cc:	fb 01       	movw	r30, r22
    75ce:	20 81       	ld	r18, Z
    75d0:	fc 01       	movw	r30, r24
    75d2:	01 90       	ld	r0, Z+
    75d4:	00 20       	and	r0, r0
    75d6:	e9 f7       	brne	.-6      	; 0x75d2 <decode_port_no+0xc>
    75d8:	31 97       	sbiw	r30, 0x01	; 1
    75da:	e8 1b       	sub	r30, r24
    75dc:	f9 0b       	sbc	r31, r25
    75de:	82 2f       	mov	r24, r18
    75e0:	90 e0       	ldi	r25, 0x00	; 0
    75e2:	e8 17       	cp	r30, r24
    75e4:	f9 07       	cpc	r31, r25
    75e6:	c8 f0       	brcs	.+50     	; 0x761a <decode_port_no+0x54>
    75e8:	80 e0       	ldi	r24, 0x00	; 0
    75ea:	08 c0       	rjmp	.+16     	; 0x75fc <decode_port_no+0x36>
    75ec:	88 0f       	add	r24, r24
    75ee:	38 2f       	mov	r19, r24
    75f0:	33 0f       	add	r19, r19
    75f2:	33 0f       	add	r19, r19
    75f4:	83 0f       	add	r24, r19
    75f6:	80 53       	subi	r24, 0x30	; 48
    75f8:	89 0f       	add	r24, r25
    75fa:	2f 5f       	subi	r18, 0xFF	; 255
    75fc:	fd 01       	movw	r30, r26
    75fe:	e2 0f       	add	r30, r18
    7600:	f1 1d       	adc	r31, r1
    7602:	90 81       	ld	r25, Z
    7604:	30 ed       	ldi	r19, 0xD0	; 208
    7606:	39 0f       	add	r19, r25
    7608:	3a 30       	cpi	r19, 0x0A	; 10
    760a:	10 f4       	brcc	.+4      	; 0x7610 <decode_port_no+0x4a>
    760c:	91 11       	cpse	r25, r1
    760e:	ee cf       	rjmp	.-36     	; 0x75ec <decode_port_no+0x26>
    7610:	fb 01       	movw	r30, r22
    7612:	20 83       	st	Z, r18
    7614:	08 95       	ret
    7616:	80 e0       	ldi	r24, 0x00	; 0
    7618:	08 95       	ret
    761a:	80 e0       	ldi	r24, 0x00	; 0
    761c:	08 95       	ret

0000761e <decode_hexadecimal_string_bytes>:
    761e:	0f 93       	push	r16
    7620:	1f 93       	push	r17
    7622:	cf 93       	push	r28
    7624:	df 93       	push	r29
    7626:	dc 01       	movw	r26, r24
    7628:	ea 01       	movw	r28, r20
    762a:	20 97       	sbiw	r28, 0x00	; 0
    762c:	e1 f1       	breq	.+120    	; 0x76a6 <decode_hexadecimal_string_bytes+0x88>
    762e:	fa 01       	movw	r30, r20
    7630:	01 90       	ld	r0, Z+
    7632:	00 20       	and	r0, r0
    7634:	e9 f7       	brne	.-6      	; 0x7630 <decode_hexadecimal_string_bytes+0x12>
    7636:	31 97       	sbiw	r30, 0x01	; 1
    7638:	e4 1b       	sub	r30, r20
    763a:	f5 0b       	sbc	r31, r21
    763c:	32 97       	sbiw	r30, 0x02	; 2
    763e:	10 f5       	brcc	.+68     	; 0x7684 <decode_hexadecimal_string_bytes+0x66>
    7640:	32 c0       	rjmp	.+100    	; 0x76a6 <decode_hexadecimal_string_bytes+0x88>
    7642:	8d 01       	movw	r16, r26
    7644:	04 0f       	add	r16, r20
    7646:	15 1f       	adc	r17, r21
    7648:	30 e0       	ldi	r19, 0x00	; 0
    764a:	ae 01       	movw	r20, r28
    764c:	42 0f       	add	r20, r18
    764e:	53 1f       	adc	r21, r19
    7650:	fa 01       	movw	r30, r20
    7652:	90 81       	ld	r25, Z
    7654:	91 34       	cpi	r25, 0x41	; 65
    7656:	28 f0       	brcs	.+10     	; 0x7662 <decode_hexadecimal_string_bytes+0x44>
    7658:	97 53       	subi	r25, 0x37	; 55
    765a:	59 2f       	mov	r21, r25
    765c:	52 95       	swap	r21
    765e:	50 7f       	andi	r21, 0xF0	; 240
    7660:	03 c0       	rjmp	.+6      	; 0x7668 <decode_hexadecimal_string_bytes+0x4a>
    7662:	59 2f       	mov	r21, r25
    7664:	52 95       	swap	r21
    7666:	50 7f       	andi	r21, 0xF0	; 240
    7668:	2c 0f       	add	r18, r28
    766a:	3d 1f       	adc	r19, r29
    766c:	f9 01       	movw	r30, r18
    766e:	91 81       	ldd	r25, Z+1	; 0x01
    7670:	91 34       	cpi	r25, 0x41	; 65
    7672:	10 f0       	brcs	.+4      	; 0x7678 <decode_hexadecimal_string_bytes+0x5a>
    7674:	97 53       	subi	r25, 0x37	; 55
    7676:	01 c0       	rjmp	.+2      	; 0x767a <decode_hexadecimal_string_bytes+0x5c>
    7678:	90 53       	subi	r25, 0x30	; 48
    767a:	95 0f       	add	r25, r21
    767c:	f8 01       	movw	r30, r16
    767e:	90 83       	st	Z, r25
    7680:	8f 5f       	subi	r24, 0xFF	; 255
    7682:	01 c0       	rjmp	.+2      	; 0x7686 <decode_hexadecimal_string_bytes+0x68>
    7684:	80 e0       	ldi	r24, 0x00	; 0
    7686:	28 2f       	mov	r18, r24
    7688:	22 0f       	add	r18, r18
    768a:	48 2f       	mov	r20, r24
    768c:	50 e0       	ldi	r21, 0x00	; 0
    768e:	fe 01       	movw	r30, r28
    7690:	01 90       	ld	r0, Z+
    7692:	00 20       	and	r0, r0
    7694:	e9 f7       	brne	.-6      	; 0x7690 <decode_hexadecimal_string_bytes+0x72>
    7696:	31 97       	sbiw	r30, 0x01	; 1
    7698:	ec 1b       	sub	r30, r28
    769a:	fd 0b       	sbc	r31, r29
    769c:	4e 17       	cp	r20, r30
    769e:	5f 07       	cpc	r21, r31
    76a0:	10 f4       	brcc	.+4      	; 0x76a6 <decode_hexadecimal_string_bytes+0x88>
    76a2:	86 13       	cpse	r24, r22
    76a4:	ce cf       	rjmp	.-100    	; 0x7642 <decode_hexadecimal_string_bytes+0x24>
    76a6:	df 91       	pop	r29
    76a8:	cf 91       	pop	r28
    76aa:	1f 91       	pop	r17
    76ac:	0f 91       	pop	r16
    76ae:	08 95       	ret

000076b0 <reg_read_register>:
    76b0:	fc 01       	movw	r30, r24
    76b2:	80 81       	ld	r24, Z
    76b4:	08 95       	ret

000076b6 <reg_read_bit>:
    76b6:	fc 01       	movw	r30, r24
    76b8:	20 81       	ld	r18, Z
    76ba:	81 e0       	ldi	r24, 0x01	; 1
    76bc:	90 e0       	ldi	r25, 0x00	; 0
    76be:	02 c0       	rjmp	.+4      	; 0x76c4 <reg_read_bit+0xe>
    76c0:	88 0f       	add	r24, r24
    76c2:	99 1f       	adc	r25, r25
    76c4:	6a 95       	dec	r22
    76c6:	e2 f7       	brpl	.-8      	; 0x76c0 <reg_read_bit+0xa>
    76c8:	82 23       	and	r24, r18
    76ca:	08 95       	ret

000076cc <reg_read_bits>:
    76cc:	fc 01       	movw	r30, r24
    76ce:	80 81       	ld	r24, Z
    76d0:	86 23       	and	r24, r22
    76d2:	08 95       	ret

000076d4 <reg_set_register>:
    76d4:	fc 01       	movw	r30, r24
    76d6:	60 83       	st	Z, r22
    76d8:	08 95       	ret

000076da <reg_clear_register>:
    76da:	fc 01       	movw	r30, r24
    76dc:	10 82       	st	Z, r1
    76de:	08 95       	ret

000076e0 <reg_set_bit>:
    76e0:	fc 01       	movw	r30, r24
    76e2:	40 81       	ld	r20, Z
    76e4:	21 e0       	ldi	r18, 0x01	; 1
    76e6:	30 e0       	ldi	r19, 0x00	; 0
    76e8:	02 c0       	rjmp	.+4      	; 0x76ee <reg_set_bit+0xe>
    76ea:	22 0f       	add	r18, r18
    76ec:	33 1f       	adc	r19, r19
    76ee:	6a 95       	dec	r22
    76f0:	e2 f7       	brpl	.-8      	; 0x76ea <reg_set_bit+0xa>
    76f2:	24 2b       	or	r18, r20
    76f4:	20 83       	st	Z, r18
    76f6:	08 95       	ret

000076f8 <reg_set_bits>:
    76f8:	fc 01       	movw	r30, r24
    76fa:	20 81       	ld	r18, Z
    76fc:	62 2b       	or	r22, r18
    76fe:	60 83       	st	Z, r22
    7700:	08 95       	ret

00007702 <reg_toggle_bit>:
    7702:	fc 01       	movw	r30, r24
    7704:	40 81       	ld	r20, Z
    7706:	21 e0       	ldi	r18, 0x01	; 1
    7708:	30 e0       	ldi	r19, 0x00	; 0
    770a:	02 c0       	rjmp	.+4      	; 0x7710 <reg_toggle_bit+0xe>
    770c:	22 0f       	add	r18, r18
    770e:	33 1f       	adc	r19, r19
    7710:	6a 95       	dec	r22
    7712:	e2 f7       	brpl	.-8      	; 0x770c <reg_toggle_bit+0xa>
    7714:	24 27       	eor	r18, r20
    7716:	20 83       	st	Z, r18
    7718:	08 95       	ret

0000771a <reg_toggle_bits>:
    771a:	fc 01       	movw	r30, r24
    771c:	20 81       	ld	r18, Z
    771e:	62 27       	eor	r22, r18
    7720:	60 83       	st	Z, r22
    7722:	08 95       	ret

00007724 <reg_clear_bit>:
    7724:	fc 01       	movw	r30, r24
    7726:	90 81       	ld	r25, Z
    7728:	21 e0       	ldi	r18, 0x01	; 1
    772a:	30 e0       	ldi	r19, 0x00	; 0
    772c:	02 c0       	rjmp	.+4      	; 0x7732 <reg_clear_bit+0xe>
    772e:	22 0f       	add	r18, r18
    7730:	33 1f       	adc	r19, r19
    7732:	6a 95       	dec	r22
    7734:	e2 f7       	brpl	.-8      	; 0x772e <reg_clear_bit+0xa>
    7736:	20 95       	com	r18
    7738:	29 23       	and	r18, r25
    773a:	20 83       	st	Z, r18
    773c:	08 95       	ret

0000773e <reg_clear_bits>:
    773e:	fc 01       	movw	r30, r24
    7740:	90 81       	ld	r25, Z
    7742:	60 95       	com	r22
    7744:	69 23       	and	r22, r25
    7746:	60 83       	st	Z, r22
    7748:	08 95       	ret

0000774a <_serial_call_back>:
    774a:	80 91 49 19 	lds	r24, 0x1949	; 0x801949 <crc_sum.1941>
    774e:	86 0f       	add	r24, r22
    7750:	80 93 49 19 	sts	0x1949, r24	; 0x801949 <crc_sum.1941>
    7754:	90 91 4c 19 	lds	r25, 0x194C	; 0x80194c <_mh_state>
    7758:	91 30       	cpi	r25, 0x01	; 1
    775a:	79 f0       	breq	.+30     	; 0x777a <_serial_call_back+0x30>
    775c:	28 f0       	brcs	.+10     	; 0x7768 <_serial_call_back+0x1e>
    775e:	92 30       	cpi	r25, 0x02	; 2
    7760:	a9 f0       	breq	.+42     	; 0x778c <_serial_call_back+0x42>
    7762:	93 30       	cpi	r25, 0x03	; 3
    7764:	19 f1       	breq	.+70     	; 0x77ac <_serial_call_back+0x62>
    7766:	08 95       	ret
    7768:	6f 3f       	cpi	r22, 0xFF	; 255
    776a:	09 f0       	breq	.+2      	; 0x776e <_serial_call_back+0x24>
    776c:	48 c0       	rjmp	.+144    	; 0x77fe <_serial_call_back+0xb4>
    776e:	10 92 49 19 	sts	0x1949, r1	; 0x801949 <crc_sum.1941>
    7772:	81 e0       	ldi	r24, 0x01	; 1
    7774:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <_mh_state>
    7778:	08 95       	ret
    777a:	66 38       	cpi	r22, 0x86	; 134
    777c:	09 f0       	breq	.+2      	; 0x7780 <_serial_call_back+0x36>
    777e:	3f c0       	rjmp	.+126    	; 0x77fe <_serial_call_back+0xb4>
    7780:	10 92 48 19 	sts	0x1948, r1	; 0x801948 <inDex.1939>
    7784:	82 e0       	ldi	r24, 0x02	; 2
    7786:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <_mh_state>
    778a:	08 95       	ret
    778c:	e0 91 48 19 	lds	r30, 0x1948	; 0x801948 <inDex.1939>
    7790:	81 e0       	ldi	r24, 0x01	; 1
    7792:	8e 0f       	add	r24, r30
    7794:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <inDex.1939>
    7798:	f0 e0       	ldi	r31, 0x00	; 0
    779a:	ea 5b       	subi	r30, 0xBA	; 186
    779c:	f6 4e       	sbci	r31, 0xE6	; 230
    779e:	60 83       	st	Z, r22
    77a0:	82 30       	cpi	r24, 0x02	; 2
    77a2:	69 f5       	brne	.+90     	; 0x77fe <_serial_call_back+0xb4>
    77a4:	83 e0       	ldi	r24, 0x03	; 3
    77a6:	80 93 4c 19 	sts	0x194C, r24	; 0x80194c <_mh_state>
    77aa:	08 95       	ret
    77ac:	90 91 48 19 	lds	r25, 0x1948	; 0x801948 <inDex.1939>
    77b0:	21 e0       	ldi	r18, 0x01	; 1
    77b2:	29 0f       	add	r18, r25
    77b4:	20 93 48 19 	sts	0x1948, r18	; 0x801948 <inDex.1939>
    77b8:	96 30       	cpi	r25, 0x06	; 6
    77ba:	09 f5       	brne	.+66     	; 0x77fe <_serial_call_back+0xb4>
    77bc:	81 11       	cpse	r24, r1
    77be:	0e c0       	rjmp	.+28     	; 0x77dc <_serial_call_back+0x92>
    77c0:	e6 e4       	ldi	r30, 0x46	; 70
    77c2:	f9 e1       	ldi	r31, 0x19	; 25
    77c4:	80 81       	ld	r24, Z
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	98 2f       	mov	r25, r24
    77ca:	88 27       	eor	r24, r24
    77cc:	21 81       	ldd	r18, Z+1	; 0x01
    77ce:	82 0f       	add	r24, r18
    77d0:	91 1d       	adc	r25, r1
    77d2:	90 93 4e 19 	sts	0x194E, r25	; 0x80194e <_ppm+0x1>
    77d6:	80 93 4d 19 	sts	0x194D, r24	; 0x80194d <_ppm>
    77da:	04 c0       	rjmp	.+8      	; 0x77e4 <_serial_call_back+0x9a>
    77dc:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <_ppm+0x1>
    77e0:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <_ppm>
    77e4:	10 92 4c 19 	sts	0x194C, r1	; 0x80194c <_mh_state>
    77e8:	e0 91 4a 19 	lds	r30, 0x194A	; 0x80194a <_app_call_back>
    77ec:	f0 91 4b 19 	lds	r31, 0x194B	; 0x80194b <_app_call_back+0x1>
    77f0:	30 97       	sbiw	r30, 0x00	; 0
    77f2:	29 f0       	breq	.+10     	; 0x77fe <_serial_call_back+0xb4>
    77f4:	80 91 4d 19 	lds	r24, 0x194D	; 0x80194d <_ppm>
    77f8:	90 91 4e 19 	lds	r25, 0x194E	; 0x80194e <_ppm+0x1>
    77fc:	19 95       	eicall
    77fe:	08 95       	ret

00007800 <mh_z19_create>:
    7800:	8f 92       	push	r8
    7802:	9f 92       	push	r9
    7804:	af 92       	push	r10
    7806:	cf 92       	push	r12
    7808:	ef 92       	push	r14
    780a:	0f 93       	push	r16
    780c:	cf 93       	push	r28
    780e:	df 93       	push	r29
    7810:	eb 01       	movw	r28, r22
    7812:	0f 2e       	mov	r0, r31
    7814:	f5 ea       	ldi	r31, 0xA5	; 165
    7816:	8f 2e       	mov	r8, r31
    7818:	fb e3       	ldi	r31, 0x3B	; 59
    781a:	9f 2e       	mov	r9, r31
    781c:	f0 2d       	mov	r31, r0
    781e:	68 94       	set
    7820:	aa 24       	eor	r10, r10
    7822:	a4 f8       	bld	r10, 4
    7824:	68 94       	set
    7826:	cc 24       	eor	r12, r12
    7828:	c4 f8       	bld	r12, 4
    782a:	e1 2c       	mov	r14, r1
    782c:	00 e0       	ldi	r16, 0x00	; 0
    782e:	23 e0       	ldi	r18, 0x03	; 3
    7830:	40 e8       	ldi	r20, 0x80	; 128
    7832:	55 e2       	ldi	r21, 0x25	; 37
    7834:	60 e0       	ldi	r22, 0x00	; 0
    7836:	70 e0       	ldi	r23, 0x00	; 0
    7838:	40 d0       	rcall	.+128    	; 0x78ba <serial_new_instance>
    783a:	90 93 50 19 	sts	0x1950, r25	; 0x801950 <_serial+0x1>
    783e:	80 93 4f 19 	sts	0x194F, r24	; 0x80194f <_serial>
    7842:	d0 93 4b 19 	sts	0x194B, r29	; 0x80194b <_app_call_back+0x1>
    7846:	c0 93 4a 19 	sts	0x194A, r28	; 0x80194a <_app_call_back>
    784a:	df 91       	pop	r29
    784c:	cf 91       	pop	r28
    784e:	0f 91       	pop	r16
    7850:	ef 90       	pop	r14
    7852:	cf 90       	pop	r12
    7854:	af 90       	pop	r10
    7856:	9f 90       	pop	r9
    7858:	8f 90       	pop	r8
    785a:	08 95       	ret

0000785c <mh_z19_take_meassuring>:
    785c:	cf 93       	push	r28
    785e:	df 93       	push	r29
    7860:	cd b7       	in	r28, 0x3d	; 61
    7862:	de b7       	in	r29, 0x3e	; 62
    7864:	29 97       	sbiw	r28, 0x09	; 9
    7866:	0f b6       	in	r0, 0x3f	; 63
    7868:	f8 94       	cli
    786a:	de bf       	out	0x3e, r29	; 62
    786c:	0f be       	out	0x3f, r0	; 63
    786e:	cd bf       	out	0x3d, r28	; 61
    7870:	89 e0       	ldi	r24, 0x09	; 9
    7872:	e2 e0       	ldi	r30, 0x02	; 2
    7874:	f4 e0       	ldi	r31, 0x04	; 4
    7876:	9e 01       	movw	r18, r28
    7878:	2f 5f       	subi	r18, 0xFF	; 255
    787a:	3f 4f       	sbci	r19, 0xFF	; 255
    787c:	d9 01       	movw	r26, r18
    787e:	01 90       	ld	r0, Z+
    7880:	0d 92       	st	X+, r0
    7882:	8a 95       	dec	r24
    7884:	e1 f7       	brne	.-8      	; 0x787e <mh_z19_take_meassuring+0x22>
    7886:	10 92 4e 19 	sts	0x194E, r1	; 0x80194e <_ppm+0x1>
    788a:	10 92 4d 19 	sts	0x194D, r1	; 0x80194d <_ppm>
    788e:	80 91 4f 19 	lds	r24, 0x194F	; 0x80194f <_serial>
    7892:	90 91 50 19 	lds	r25, 0x1950	; 0x801950 <_serial+0x1>
    7896:	00 97       	sbiw	r24, 0x00	; 0
    7898:	31 f0       	breq	.+12     	; 0x78a6 <mh_z19_take_meassuring+0x4a>
    789a:	42 2f       	mov	r20, r18
    789c:	53 2f       	mov	r21, r19
    789e:	69 e0       	ldi	r22, 0x09	; 9
    78a0:	d1 d0       	rcall	.+418    	; 0x7a44 <serial_send_bytes>
    78a2:	80 e0       	ldi	r24, 0x00	; 0
    78a4:	01 c0       	rjmp	.+2      	; 0x78a8 <mh_z19_take_meassuring+0x4c>
    78a6:	82 e0       	ldi	r24, 0x02	; 2
    78a8:	29 96       	adiw	r28, 0x09	; 9
    78aa:	0f b6       	in	r0, 0x3f	; 63
    78ac:	f8 94       	cli
    78ae:	de bf       	out	0x3e, r29	; 62
    78b0:	0f be       	out	0x3f, r0	; 63
    78b2:	cd bf       	out	0x3d, r28	; 61
    78b4:	df 91       	pop	r29
    78b6:	cf 91       	pop	r28
    78b8:	08 95       	ret

000078ba <serial_new_instance>:
    78ba:	2f 92       	push	r2
    78bc:	3f 92       	push	r3
    78be:	4f 92       	push	r4
    78c0:	5f 92       	push	r5
    78c2:	6f 92       	push	r6
    78c4:	7f 92       	push	r7
    78c6:	8f 92       	push	r8
    78c8:	9f 92       	push	r9
    78ca:	af 92       	push	r10
    78cc:	cf 92       	push	r12
    78ce:	ef 92       	push	r14
    78d0:	ff 92       	push	r15
    78d2:	0f 93       	push	r16
    78d4:	1f 93       	push	r17
    78d6:	cf 93       	push	r28
    78d8:	df 93       	push	r29
    78da:	cd b7       	in	r28, 0x3d	; 61
    78dc:	de b7       	in	r29, 0x3e	; 62
    78de:	f8 2e       	mov	r15, r24
    78e0:	2a 01       	movw	r4, r20
    78e2:	3b 01       	movw	r6, r22
    78e4:	88 e0       	ldi	r24, 0x08	; 8
    78e6:	90 e0       	ldi	r25, 0x00	; 0
    78e8:	0e 94 4d 48 	call	0x909a	; 0x909a <malloc>
    78ec:	8c 01       	movw	r16, r24
    78ee:	8f 2d       	mov	r24, r15
    78f0:	90 e0       	ldi	r25, 0x00	; 0
    78f2:	88 0f       	add	r24, r24
    78f4:	99 1f       	adc	r25, r25
    78f6:	fc 01       	movw	r30, r24
    78f8:	ef 5a       	subi	r30, 0xAF	; 175
    78fa:	f6 4e       	sbci	r31, 0xE6	; 230
    78fc:	11 83       	std	Z+1, r17	; 0x01
    78fe:	00 83       	st	Z, r16
    7900:	fc 01       	movw	r30, r24
    7902:	e6 5f       	subi	r30, 0xF6	; 246
    7904:	fd 4f       	sbci	r31, 0xFD	; 253
    7906:	80 81       	ld	r24, Z
    7908:	91 81       	ldd	r25, Z+1	; 0x01
    790a:	d8 01       	movw	r26, r16
    790c:	8d 93       	st	X+, r24
    790e:	9c 93       	st	X, r25
    7910:	6c 2d       	mov	r22, r12
    7912:	70 e0       	ldi	r23, 0x00	; 0
    7914:	84 e0       	ldi	r24, 0x04	; 4
    7916:	90 e0       	ldi	r25, 0x00	; 0
    7918:	0e 94 33 48 	call	0x9066	; 0x9066 <calloc>
    791c:	1c 01       	movw	r2, r24
    791e:	61 e0       	ldi	r22, 0x01	; 1
    7920:	70 e0       	ldi	r23, 0x00	; 0
    7922:	86 e0       	ldi	r24, 0x06	; 6
    7924:	90 e0       	ldi	r25, 0x00	; 0
    7926:	0e 94 33 48 	call	0x9066	; 0x9066 <calloc>
    792a:	7c 01       	movw	r14, r24
    792c:	4c 2d       	mov	r20, r12
    792e:	b1 01       	movw	r22, r2
    7930:	b1 d6       	rcall	.+3426   	; 0x8694 <fifo_init>
    7932:	f8 01       	movw	r30, r16
    7934:	f5 82       	std	Z+5, r15	; 0x05
    7936:	e4 82       	std	Z+4, r14	; 0x04
    7938:	6a 2d       	mov	r22, r10
    793a:	70 e0       	ldi	r23, 0x00	; 0
    793c:	84 e0       	ldi	r24, 0x04	; 4
    793e:	90 e0       	ldi	r25, 0x00	; 0
    7940:	0e 94 33 48 	call	0x9066	; 0x9066 <calloc>
    7944:	1c 01       	movw	r2, r24
    7946:	61 e0       	ldi	r22, 0x01	; 1
    7948:	70 e0       	ldi	r23, 0x00	; 0
    794a:	86 e0       	ldi	r24, 0x06	; 6
    794c:	90 e0       	ldi	r25, 0x00	; 0
    794e:	0e 94 33 48 	call	0x9066	; 0x9066 <calloc>
    7952:	7c 01       	movw	r14, r24
    7954:	4a 2d       	mov	r20, r10
    7956:	b1 01       	movw	r22, r2
    7958:	9d d6       	rcall	.+3386   	; 0x8694 <fifo_init>
    795a:	d8 01       	movw	r26, r16
    795c:	13 96       	adiw	r26, 0x03	; 3
    795e:	fc 92       	st	X, r15
    7960:	ee 92       	st	-X, r14
    7962:	12 97       	sbiw	r26, 0x02	; 2
    7964:	17 96       	adiw	r26, 0x07	; 7
    7966:	9c 92       	st	X, r9
    7968:	8e 92       	st	-X, r8
    796a:	16 97       	sbiw	r26, 0x06	; 6
    796c:	ff b6       	in	r15, 0x3f	; 63
    796e:	f8 94       	cli
    7970:	ed 91       	ld	r30, X+
    7972:	fc 91       	ld	r31, X
    7974:	11 97       	sbiw	r26, 0x01	; 1
    7976:	36 97       	sbiw	r30, 0x06	; 6
    7978:	80 81       	ld	r24, Z
    797a:	82 60       	ori	r24, 0x02	; 2
    797c:	80 83       	st	Z, r24
    797e:	8d 90       	ld	r8, X+
    7980:	9c 90       	ld	r9, X
    7982:	c3 01       	movw	r24, r6
    7984:	b2 01       	movw	r22, r4
    7986:	0e 94 cc 47 	call	0x8f98	; 0x8f98 <__floatunsisf>
    798a:	20 e0       	ldi	r18, 0x00	; 0
    798c:	30 e0       	ldi	r19, 0x00	; 0
    798e:	40 e0       	ldi	r20, 0x00	; 0
    7990:	51 e4       	ldi	r21, 0x41	; 65
    7992:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
    7996:	9b 01       	movw	r18, r22
    7998:	ac 01       	movw	r20, r24
    799a:	60 e0       	ldi	r22, 0x00	; 0
    799c:	74 e2       	ldi	r23, 0x24	; 36
    799e:	84 e7       	ldi	r24, 0x74	; 116
    79a0:	9b e4       	ldi	r25, 0x4B	; 75
    79a2:	0e 94 5b 47 	call	0x8eb6	; 0x8eb6 <__divsf3>
    79a6:	20 e0       	ldi	r18, 0x00	; 0
    79a8:	30 e0       	ldi	r19, 0x00	; 0
    79aa:	40 e8       	ldi	r20, 0x80	; 128
    79ac:	5f e3       	ldi	r21, 0x3F	; 63
    79ae:	0e 94 ef 46 	call	0x8dde	; 0x8dde <__subsf3>
    79b2:	0e 94 5e 33 	call	0x66bc	; 0x66bc <__fixunssfsi>
    79b6:	f4 01       	movw	r30, r8
    79b8:	32 97       	sbiw	r30, 0x02	; 2
    79ba:	60 83       	st	Z, r22
    79bc:	d8 01       	movw	r26, r16
    79be:	ed 91       	ld	r30, X+
    79c0:	fc 91       	ld	r31, X
    79c2:	11 97       	sbiw	r26, 0x01	; 1
    79c4:	35 97       	sbiw	r30, 0x05	; 5
    79c6:	88 e9       	ldi	r24, 0x98	; 152
    79c8:	80 83       	st	Z, r24
    79ca:	ed 91       	ld	r30, X+
    79cc:	fc 91       	ld	r31, X
    79ce:	34 97       	sbiw	r30, 0x04	; 4
    79d0:	86 e0       	ldi	r24, 0x06	; 6
    79d2:	80 83       	st	Z, r24
    79d4:	ff be       	out	0x3f, r15	; 63
    79d6:	c8 01       	movw	r24, r16
    79d8:	df 91       	pop	r29
    79da:	cf 91       	pop	r28
    79dc:	1f 91       	pop	r17
    79de:	0f 91       	pop	r16
    79e0:	ff 90       	pop	r15
    79e2:	ef 90       	pop	r14
    79e4:	cf 90       	pop	r12
    79e6:	af 90       	pop	r10
    79e8:	9f 90       	pop	r9
    79ea:	8f 90       	pop	r8
    79ec:	7f 90       	pop	r7
    79ee:	6f 90       	pop	r6
    79f0:	5f 90       	pop	r5
    79f2:	4f 90       	pop	r4
    79f4:	3f 90       	pop	r3
    79f6:	2f 90       	pop	r2
    79f8:	08 95       	ret

000079fa <serial_send_byte>:
    79fa:	cf 93       	push	r28
    79fc:	df 93       	push	r29
    79fe:	ec 01       	movw	r28, r24
    7a00:	ea 81       	ldd	r30, Y+2	; 0x02
    7a02:	fb 81       	ldd	r31, Y+3	; 0x03
    7a04:	93 81       	ldd	r25, Z+3	; 0x03
    7a06:	82 81       	ldd	r24, Z+2	; 0x02
    7a08:	25 81       	ldd	r18, Z+5	; 0x05
    7a0a:	98 1b       	sub	r25, r24
    7a0c:	92 23       	and	r25, r18
    7a0e:	84 81       	ldd	r24, Z+4	; 0x04
    7a10:	98 17       	cp	r25, r24
    7a12:	a1 f0       	breq	.+40     	; 0x7a3c <serial_send_byte+0x42>
    7a14:	93 81       	ldd	r25, Z+3	; 0x03
    7a16:	26 95       	lsr	r18
    7a18:	29 23       	and	r18, r25
    7a1a:	a0 81       	ld	r26, Z
    7a1c:	b1 81       	ldd	r27, Z+1	; 0x01
    7a1e:	a2 0f       	add	r26, r18
    7a20:	b1 1d       	adc	r27, r1
    7a22:	6c 93       	st	X, r22
    7a24:	9f 5f       	subi	r25, 0xFF	; 255
    7a26:	25 81       	ldd	r18, Z+5	; 0x05
    7a28:	92 23       	and	r25, r18
    7a2a:	93 83       	std	Z+3, r25	; 0x03
    7a2c:	e8 81       	ld	r30, Y
    7a2e:	f9 81       	ldd	r31, Y+1	; 0x01
    7a30:	35 97       	sbiw	r30, 0x05	; 5
    7a32:	80 81       	ld	r24, Z
    7a34:	80 62       	ori	r24, 0x20	; 32
    7a36:	80 83       	st	Z, r24
    7a38:	80 e0       	ldi	r24, 0x00	; 0
    7a3a:	01 c0       	rjmp	.+2      	; 0x7a3e <serial_send_byte+0x44>
    7a3c:	82 e0       	ldi	r24, 0x02	; 2
    7a3e:	df 91       	pop	r29
    7a40:	cf 91       	pop	r28
    7a42:	08 95       	ret

00007a44 <serial_send_bytes>:
    7a44:	ef 92       	push	r14
    7a46:	ff 92       	push	r15
    7a48:	0f 93       	push	r16
    7a4a:	1f 93       	push	r17
    7a4c:	cf 93       	push	r28
    7a4e:	df 93       	push	r29
    7a50:	7c 01       	movw	r14, r24
    7a52:	dc 01       	movw	r26, r24
    7a54:	12 96       	adiw	r26, 0x02	; 2
    7a56:	ed 91       	ld	r30, X+
    7a58:	fc 91       	ld	r31, X
    7a5a:	13 97       	sbiw	r26, 0x03	; 3
    7a5c:	93 81       	ldd	r25, Z+3	; 0x03
    7a5e:	82 81       	ldd	r24, Z+2	; 0x02
    7a60:	98 1b       	sub	r25, r24
    7a62:	85 81       	ldd	r24, Z+5	; 0x05
    7a64:	98 23       	and	r25, r24
    7a66:	84 81       	ldd	r24, Z+4	; 0x04
    7a68:	89 1b       	sub	r24, r25
    7a6a:	86 17       	cp	r24, r22
    7a6c:	98 f1       	brcs	.+102    	; 0x7ad4 <serial_send_bytes+0x90>
    7a6e:	66 23       	and	r22, r22
    7a70:	41 f1       	breq	.+80     	; 0x7ac2 <serial_send_bytes+0x7e>
    7a72:	84 2f       	mov	r24, r20
    7a74:	95 2f       	mov	r25, r21
    7a76:	dc 01       	movw	r26, r24
    7a78:	61 50       	subi	r22, 0x01	; 1
    7a7a:	46 2f       	mov	r20, r22
    7a7c:	50 e0       	ldi	r21, 0x00	; 0
    7a7e:	4f 5f       	subi	r20, 0xFF	; 255
    7a80:	5f 4f       	sbci	r21, 0xFF	; 255
    7a82:	48 0f       	add	r20, r24
    7a84:	59 1f       	adc	r21, r25
    7a86:	e7 01       	movw	r28, r14
    7a88:	ea 81       	ldd	r30, Y+2	; 0x02
    7a8a:	fb 81       	ldd	r31, Y+3	; 0x03
    7a8c:	93 81       	ldd	r25, Z+3	; 0x03
    7a8e:	82 81       	ldd	r24, Z+2	; 0x02
    7a90:	25 81       	ldd	r18, Z+5	; 0x05
    7a92:	98 1b       	sub	r25, r24
    7a94:	92 23       	and	r25, r18
    7a96:	84 81       	ldd	r24, Z+4	; 0x04
    7a98:	98 17       	cp	r25, r24
    7a9a:	79 f0       	breq	.+30     	; 0x7aba <serial_send_bytes+0x76>
    7a9c:	8c 91       	ld	r24, X
    7a9e:	93 81       	ldd	r25, Z+3	; 0x03
    7aa0:	26 95       	lsr	r18
    7aa2:	29 23       	and	r18, r25
    7aa4:	60 81       	ld	r22, Z
    7aa6:	71 81       	ldd	r23, Z+1	; 0x01
    7aa8:	8b 01       	movw	r16, r22
    7aaa:	02 0f       	add	r16, r18
    7aac:	11 1d       	adc	r17, r1
    7aae:	e8 01       	movw	r28, r16
    7ab0:	88 83       	st	Y, r24
    7ab2:	9f 5f       	subi	r25, 0xFF	; 255
    7ab4:	85 81       	ldd	r24, Z+5	; 0x05
    7ab6:	98 23       	and	r25, r24
    7ab8:	93 83       	std	Z+3, r25	; 0x03
    7aba:	11 96       	adiw	r26, 0x01	; 1
    7abc:	a4 17       	cp	r26, r20
    7abe:	b5 07       	cpc	r27, r21
    7ac0:	11 f7       	brne	.-60     	; 0x7a86 <serial_send_bytes+0x42>
    7ac2:	d7 01       	movw	r26, r14
    7ac4:	ed 91       	ld	r30, X+
    7ac6:	fc 91       	ld	r31, X
    7ac8:	35 97       	sbiw	r30, 0x05	; 5
    7aca:	80 81       	ld	r24, Z
    7acc:	80 62       	ori	r24, 0x20	; 32
    7ace:	80 83       	st	Z, r24
    7ad0:	80 e0       	ldi	r24, 0x00	; 0
    7ad2:	01 c0       	rjmp	.+2      	; 0x7ad6 <serial_send_bytes+0x92>
    7ad4:	82 e0       	ldi	r24, 0x02	; 2
    7ad6:	df 91       	pop	r29
    7ad8:	cf 91       	pop	r28
    7ada:	1f 91       	pop	r17
    7adc:	0f 91       	pop	r16
    7ade:	ff 90       	pop	r15
    7ae0:	ef 90       	pop	r14
    7ae2:	08 95       	ret

00007ae4 <serial_get_byte>:
    7ae4:	dc 01       	movw	r26, r24
    7ae6:	14 96       	adiw	r26, 0x04	; 4
    7ae8:	ed 91       	ld	r30, X+
    7aea:	fc 91       	ld	r31, X
    7aec:	15 97       	sbiw	r26, 0x05	; 5
    7aee:	93 81       	ldd	r25, Z+3	; 0x03
    7af0:	82 81       	ldd	r24, Z+2	; 0x02
    7af2:	98 17       	cp	r25, r24
    7af4:	89 f0       	breq	.+34     	; 0x7b18 <serial_get_byte+0x34>
    7af6:	92 81       	ldd	r25, Z+2	; 0x02
    7af8:	85 81       	ldd	r24, Z+5	; 0x05
    7afa:	86 95       	lsr	r24
    7afc:	89 23       	and	r24, r25
    7afe:	a0 81       	ld	r26, Z
    7b00:	b1 81       	ldd	r27, Z+1	; 0x01
    7b02:	a8 0f       	add	r26, r24
    7b04:	b1 1d       	adc	r27, r1
    7b06:	8c 91       	ld	r24, X
    7b08:	db 01       	movw	r26, r22
    7b0a:	8c 93       	st	X, r24
    7b0c:	9f 5f       	subi	r25, 0xFF	; 255
    7b0e:	85 81       	ldd	r24, Z+5	; 0x05
    7b10:	98 23       	and	r25, r24
    7b12:	92 83       	std	Z+2, r25	; 0x02
    7b14:	80 e0       	ldi	r24, 0x00	; 0
    7b16:	08 95       	ret
    7b18:	83 e0       	ldi	r24, 0x03	; 3
    7b1a:	08 95       	ret

00007b1c <__vector_25>:
    7b1c:	1f 92       	push	r1
    7b1e:	0f 92       	push	r0
    7b20:	0f b6       	in	r0, 0x3f	; 63
    7b22:	0f 92       	push	r0
    7b24:	11 24       	eor	r1, r1
    7b26:	0b b6       	in	r0, 0x3b	; 59
    7b28:	0f 92       	push	r0
    7b2a:	2f 93       	push	r18
    7b2c:	3f 93       	push	r19
    7b2e:	4f 93       	push	r20
    7b30:	5f 93       	push	r21
    7b32:	6f 93       	push	r22
    7b34:	7f 93       	push	r23
    7b36:	8f 93       	push	r24
    7b38:	9f 93       	push	r25
    7b3a:	af 93       	push	r26
    7b3c:	bf 93       	push	r27
    7b3e:	cf 93       	push	r28
    7b40:	df 93       	push	r29
    7b42:	ef 93       	push	r30
    7b44:	ff 93       	push	r31
    7b46:	a0 91 51 19 	lds	r26, 0x1951	; 0x801951 <_ser_handle>
    7b4a:	b0 91 52 19 	lds	r27, 0x1952	; 0x801952 <_ser_handle+0x1>
    7b4e:	10 97       	sbiw	r26, 0x00	; 0
    7b50:	11 f1       	breq	.+68     	; 0x7b96 <__vector_25+0x7a>
    7b52:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7b56:	14 96       	adiw	r26, 0x04	; 4
    7b58:	ed 91       	ld	r30, X+
    7b5a:	fc 91       	ld	r31, X
    7b5c:	15 97       	sbiw	r26, 0x05	; 5
    7b5e:	93 81       	ldd	r25, Z+3	; 0x03
    7b60:	82 81       	ldd	r24, Z+2	; 0x02
    7b62:	25 81       	ldd	r18, Z+5	; 0x05
    7b64:	98 1b       	sub	r25, r24
    7b66:	92 23       	and	r25, r18
    7b68:	84 81       	ldd	r24, Z+4	; 0x04
    7b6a:	98 17       	cp	r25, r24
    7b6c:	61 f0       	breq	.+24     	; 0x7b86 <__vector_25+0x6a>
    7b6e:	83 81       	ldd	r24, Z+3	; 0x03
    7b70:	26 95       	lsr	r18
    7b72:	28 23       	and	r18, r24
    7b74:	c0 81       	ld	r28, Z
    7b76:	d1 81       	ldd	r29, Z+1	; 0x01
    7b78:	c2 0f       	add	r28, r18
    7b7a:	d1 1d       	adc	r29, r1
    7b7c:	68 83       	st	Y, r22
    7b7e:	8f 5f       	subi	r24, 0xFF	; 255
    7b80:	95 81       	ldd	r25, Z+5	; 0x05
    7b82:	89 23       	and	r24, r25
    7b84:	83 83       	std	Z+3, r24	; 0x03
    7b86:	16 96       	adiw	r26, 0x06	; 6
    7b88:	ed 91       	ld	r30, X+
    7b8a:	fc 91       	ld	r31, X
    7b8c:	17 97       	sbiw	r26, 0x07	; 7
    7b8e:	30 97       	sbiw	r30, 0x00	; 0
    7b90:	11 f0       	breq	.+4      	; 0x7b96 <__vector_25+0x7a>
    7b92:	cd 01       	movw	r24, r26
    7b94:	19 95       	eicall
    7b96:	ff 91       	pop	r31
    7b98:	ef 91       	pop	r30
    7b9a:	df 91       	pop	r29
    7b9c:	cf 91       	pop	r28
    7b9e:	bf 91       	pop	r27
    7ba0:	af 91       	pop	r26
    7ba2:	9f 91       	pop	r25
    7ba4:	8f 91       	pop	r24
    7ba6:	7f 91       	pop	r23
    7ba8:	6f 91       	pop	r22
    7baa:	5f 91       	pop	r21
    7bac:	4f 91       	pop	r20
    7bae:	3f 91       	pop	r19
    7bb0:	2f 91       	pop	r18
    7bb2:	0f 90       	pop	r0
    7bb4:	0b be       	out	0x3b, r0	; 59
    7bb6:	0f 90       	pop	r0
    7bb8:	0f be       	out	0x3f, r0	; 63
    7bba:	0f 90       	pop	r0
    7bbc:	1f 90       	pop	r1
    7bbe:	18 95       	reti

00007bc0 <__vector_26>:
    7bc0:	1f 92       	push	r1
    7bc2:	0f 92       	push	r0
    7bc4:	0f b6       	in	r0, 0x3f	; 63
    7bc6:	0f 92       	push	r0
    7bc8:	11 24       	eor	r1, r1
    7bca:	0b b6       	in	r0, 0x3b	; 59
    7bcc:	0f 92       	push	r0
    7bce:	2f 93       	push	r18
    7bd0:	8f 93       	push	r24
    7bd2:	9f 93       	push	r25
    7bd4:	af 93       	push	r26
    7bd6:	bf 93       	push	r27
    7bd8:	ef 93       	push	r30
    7bda:	ff 93       	push	r31
    7bdc:	e0 91 51 19 	lds	r30, 0x1951	; 0x801951 <_ser_handle>
    7be0:	f0 91 52 19 	lds	r31, 0x1952	; 0x801952 <_ser_handle+0x1>
    7be4:	30 97       	sbiw	r30, 0x00	; 0
    7be6:	b9 f0       	breq	.+46     	; 0x7c16 <__vector_26+0x56>
    7be8:	02 80       	ldd	r0, Z+2	; 0x02
    7bea:	f3 81       	ldd	r31, Z+3	; 0x03
    7bec:	e0 2d       	mov	r30, r0
    7bee:	93 81       	ldd	r25, Z+3	; 0x03
    7bf0:	82 81       	ldd	r24, Z+2	; 0x02
    7bf2:	98 17       	cp	r25, r24
    7bf4:	b1 f0       	breq	.+44     	; 0x7c22 <__vector_26+0x62>
    7bf6:	92 81       	ldd	r25, Z+2	; 0x02
    7bf8:	85 81       	ldd	r24, Z+5	; 0x05
    7bfa:	28 2f       	mov	r18, r24
    7bfc:	26 95       	lsr	r18
    7bfe:	29 23       	and	r18, r25
    7c00:	a0 81       	ld	r26, Z
    7c02:	b1 81       	ldd	r27, Z+1	; 0x01
    7c04:	a2 0f       	add	r26, r18
    7c06:	b1 1d       	adc	r27, r1
    7c08:	2c 91       	ld	r18, X
    7c0a:	9f 5f       	subi	r25, 0xFF	; 255
    7c0c:	89 23       	and	r24, r25
    7c0e:	82 83       	std	Z+2, r24	; 0x02
    7c10:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    7c14:	0b c0       	rjmp	.+22     	; 0x7c2c <__vector_26+0x6c>
    7c16:	e1 ec       	ldi	r30, 0xC1	; 193
    7c18:	f0 e0       	ldi	r31, 0x00	; 0
    7c1a:	80 81       	ld	r24, Z
    7c1c:	8f 7d       	andi	r24, 0xDF	; 223
    7c1e:	80 83       	st	Z, r24
    7c20:	05 c0       	rjmp	.+10     	; 0x7c2c <__vector_26+0x6c>
    7c22:	e1 ec       	ldi	r30, 0xC1	; 193
    7c24:	f0 e0       	ldi	r31, 0x00	; 0
    7c26:	80 81       	ld	r24, Z
    7c28:	8f 7d       	andi	r24, 0xDF	; 223
    7c2a:	80 83       	st	Z, r24
    7c2c:	ff 91       	pop	r31
    7c2e:	ef 91       	pop	r30
    7c30:	bf 91       	pop	r27
    7c32:	af 91       	pop	r26
    7c34:	9f 91       	pop	r25
    7c36:	8f 91       	pop	r24
    7c38:	2f 91       	pop	r18
    7c3a:	0f 90       	pop	r0
    7c3c:	0b be       	out	0x3b, r0	; 59
    7c3e:	0f 90       	pop	r0
    7c40:	0f be       	out	0x3f, r0	; 63
    7c42:	0f 90       	pop	r0
    7c44:	1f 90       	pop	r1
    7c46:	18 95       	reti

00007c48 <__vector_36>:
    7c48:	1f 92       	push	r1
    7c4a:	0f 92       	push	r0
    7c4c:	0f b6       	in	r0, 0x3f	; 63
    7c4e:	0f 92       	push	r0
    7c50:	11 24       	eor	r1, r1
    7c52:	0b b6       	in	r0, 0x3b	; 59
    7c54:	0f 92       	push	r0
    7c56:	2f 93       	push	r18
    7c58:	3f 93       	push	r19
    7c5a:	4f 93       	push	r20
    7c5c:	5f 93       	push	r21
    7c5e:	6f 93       	push	r22
    7c60:	7f 93       	push	r23
    7c62:	8f 93       	push	r24
    7c64:	9f 93       	push	r25
    7c66:	af 93       	push	r26
    7c68:	bf 93       	push	r27
    7c6a:	cf 93       	push	r28
    7c6c:	df 93       	push	r29
    7c6e:	ef 93       	push	r30
    7c70:	ff 93       	push	r31
    7c72:	a0 91 53 19 	lds	r26, 0x1953	; 0x801953 <_ser_handle+0x2>
    7c76:	b0 91 54 19 	lds	r27, 0x1954	; 0x801954 <_ser_handle+0x3>
    7c7a:	10 97       	sbiw	r26, 0x00	; 0
    7c7c:	11 f1       	breq	.+68     	; 0x7cc2 <__vector_36+0x7a>
    7c7e:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    7c82:	14 96       	adiw	r26, 0x04	; 4
    7c84:	ed 91       	ld	r30, X+
    7c86:	fc 91       	ld	r31, X
    7c88:	15 97       	sbiw	r26, 0x05	; 5
    7c8a:	93 81       	ldd	r25, Z+3	; 0x03
    7c8c:	82 81       	ldd	r24, Z+2	; 0x02
    7c8e:	25 81       	ldd	r18, Z+5	; 0x05
    7c90:	98 1b       	sub	r25, r24
    7c92:	92 23       	and	r25, r18
    7c94:	84 81       	ldd	r24, Z+4	; 0x04
    7c96:	98 17       	cp	r25, r24
    7c98:	61 f0       	breq	.+24     	; 0x7cb2 <__vector_36+0x6a>
    7c9a:	83 81       	ldd	r24, Z+3	; 0x03
    7c9c:	26 95       	lsr	r18
    7c9e:	28 23       	and	r18, r24
    7ca0:	c0 81       	ld	r28, Z
    7ca2:	d1 81       	ldd	r29, Z+1	; 0x01
    7ca4:	c2 0f       	add	r28, r18
    7ca6:	d1 1d       	adc	r29, r1
    7ca8:	68 83       	st	Y, r22
    7caa:	8f 5f       	subi	r24, 0xFF	; 255
    7cac:	95 81       	ldd	r25, Z+5	; 0x05
    7cae:	89 23       	and	r24, r25
    7cb0:	83 83       	std	Z+3, r24	; 0x03
    7cb2:	16 96       	adiw	r26, 0x06	; 6
    7cb4:	ed 91       	ld	r30, X+
    7cb6:	fc 91       	ld	r31, X
    7cb8:	17 97       	sbiw	r26, 0x07	; 7
    7cba:	30 97       	sbiw	r30, 0x00	; 0
    7cbc:	11 f0       	breq	.+4      	; 0x7cc2 <__vector_36+0x7a>
    7cbe:	cd 01       	movw	r24, r26
    7cc0:	19 95       	eicall
    7cc2:	ff 91       	pop	r31
    7cc4:	ef 91       	pop	r30
    7cc6:	df 91       	pop	r29
    7cc8:	cf 91       	pop	r28
    7cca:	bf 91       	pop	r27
    7ccc:	af 91       	pop	r26
    7cce:	9f 91       	pop	r25
    7cd0:	8f 91       	pop	r24
    7cd2:	7f 91       	pop	r23
    7cd4:	6f 91       	pop	r22
    7cd6:	5f 91       	pop	r21
    7cd8:	4f 91       	pop	r20
    7cda:	3f 91       	pop	r19
    7cdc:	2f 91       	pop	r18
    7cde:	0f 90       	pop	r0
    7ce0:	0b be       	out	0x3b, r0	; 59
    7ce2:	0f 90       	pop	r0
    7ce4:	0f be       	out	0x3f, r0	; 63
    7ce6:	0f 90       	pop	r0
    7ce8:	1f 90       	pop	r1
    7cea:	18 95       	reti

00007cec <__vector_37>:
    7cec:	1f 92       	push	r1
    7cee:	0f 92       	push	r0
    7cf0:	0f b6       	in	r0, 0x3f	; 63
    7cf2:	0f 92       	push	r0
    7cf4:	11 24       	eor	r1, r1
    7cf6:	0b b6       	in	r0, 0x3b	; 59
    7cf8:	0f 92       	push	r0
    7cfa:	2f 93       	push	r18
    7cfc:	8f 93       	push	r24
    7cfe:	9f 93       	push	r25
    7d00:	af 93       	push	r26
    7d02:	bf 93       	push	r27
    7d04:	ef 93       	push	r30
    7d06:	ff 93       	push	r31
    7d08:	e0 91 53 19 	lds	r30, 0x1953	; 0x801953 <_ser_handle+0x2>
    7d0c:	f0 91 54 19 	lds	r31, 0x1954	; 0x801954 <_ser_handle+0x3>
    7d10:	30 97       	sbiw	r30, 0x00	; 0
    7d12:	b9 f0       	breq	.+46     	; 0x7d42 <__vector_37+0x56>
    7d14:	02 80       	ldd	r0, Z+2	; 0x02
    7d16:	f3 81       	ldd	r31, Z+3	; 0x03
    7d18:	e0 2d       	mov	r30, r0
    7d1a:	93 81       	ldd	r25, Z+3	; 0x03
    7d1c:	82 81       	ldd	r24, Z+2	; 0x02
    7d1e:	98 17       	cp	r25, r24
    7d20:	b1 f0       	breq	.+44     	; 0x7d4e <__vector_37+0x62>
    7d22:	92 81       	ldd	r25, Z+2	; 0x02
    7d24:	85 81       	ldd	r24, Z+5	; 0x05
    7d26:	28 2f       	mov	r18, r24
    7d28:	26 95       	lsr	r18
    7d2a:	29 23       	and	r18, r25
    7d2c:	a0 81       	ld	r26, Z
    7d2e:	b1 81       	ldd	r27, Z+1	; 0x01
    7d30:	a2 0f       	add	r26, r18
    7d32:	b1 1d       	adc	r27, r1
    7d34:	2c 91       	ld	r18, X
    7d36:	9f 5f       	subi	r25, 0xFF	; 255
    7d38:	89 23       	and	r24, r25
    7d3a:	82 83       	std	Z+2, r24	; 0x02
    7d3c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    7d40:	0b c0       	rjmp	.+22     	; 0x7d58 <__vector_37+0x6c>
    7d42:	e9 ec       	ldi	r30, 0xC9	; 201
    7d44:	f0 e0       	ldi	r31, 0x00	; 0
    7d46:	80 81       	ld	r24, Z
    7d48:	8f 7d       	andi	r24, 0xDF	; 223
    7d4a:	80 83       	st	Z, r24
    7d4c:	05 c0       	rjmp	.+10     	; 0x7d58 <__vector_37+0x6c>
    7d4e:	e9 ec       	ldi	r30, 0xC9	; 201
    7d50:	f0 e0       	ldi	r31, 0x00	; 0
    7d52:	80 81       	ld	r24, Z
    7d54:	8f 7d       	andi	r24, 0xDF	; 223
    7d56:	80 83       	st	Z, r24
    7d58:	ff 91       	pop	r31
    7d5a:	ef 91       	pop	r30
    7d5c:	bf 91       	pop	r27
    7d5e:	af 91       	pop	r26
    7d60:	9f 91       	pop	r25
    7d62:	8f 91       	pop	r24
    7d64:	2f 91       	pop	r18
    7d66:	0f 90       	pop	r0
    7d68:	0b be       	out	0x3b, r0	; 59
    7d6a:	0f 90       	pop	r0
    7d6c:	0f be       	out	0x3f, r0	; 63
    7d6e:	0f 90       	pop	r0
    7d70:	1f 90       	pop	r1
    7d72:	18 95       	reti

00007d74 <__vector_51>:
    7d74:	1f 92       	push	r1
    7d76:	0f 92       	push	r0
    7d78:	0f b6       	in	r0, 0x3f	; 63
    7d7a:	0f 92       	push	r0
    7d7c:	11 24       	eor	r1, r1
    7d7e:	0b b6       	in	r0, 0x3b	; 59
    7d80:	0f 92       	push	r0
    7d82:	2f 93       	push	r18
    7d84:	3f 93       	push	r19
    7d86:	4f 93       	push	r20
    7d88:	5f 93       	push	r21
    7d8a:	6f 93       	push	r22
    7d8c:	7f 93       	push	r23
    7d8e:	8f 93       	push	r24
    7d90:	9f 93       	push	r25
    7d92:	af 93       	push	r26
    7d94:	bf 93       	push	r27
    7d96:	cf 93       	push	r28
    7d98:	df 93       	push	r29
    7d9a:	ef 93       	push	r30
    7d9c:	ff 93       	push	r31
    7d9e:	a0 91 55 19 	lds	r26, 0x1955	; 0x801955 <_ser_handle+0x4>
    7da2:	b0 91 56 19 	lds	r27, 0x1956	; 0x801956 <_ser_handle+0x5>
    7da6:	10 97       	sbiw	r26, 0x00	; 0
    7da8:	11 f1       	breq	.+68     	; 0x7dee <__vector_51+0x7a>
    7daa:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    7dae:	14 96       	adiw	r26, 0x04	; 4
    7db0:	ed 91       	ld	r30, X+
    7db2:	fc 91       	ld	r31, X
    7db4:	15 97       	sbiw	r26, 0x05	; 5
    7db6:	93 81       	ldd	r25, Z+3	; 0x03
    7db8:	82 81       	ldd	r24, Z+2	; 0x02
    7dba:	25 81       	ldd	r18, Z+5	; 0x05
    7dbc:	98 1b       	sub	r25, r24
    7dbe:	92 23       	and	r25, r18
    7dc0:	84 81       	ldd	r24, Z+4	; 0x04
    7dc2:	98 17       	cp	r25, r24
    7dc4:	61 f0       	breq	.+24     	; 0x7dde <__vector_51+0x6a>
    7dc6:	83 81       	ldd	r24, Z+3	; 0x03
    7dc8:	26 95       	lsr	r18
    7dca:	28 23       	and	r18, r24
    7dcc:	c0 81       	ld	r28, Z
    7dce:	d1 81       	ldd	r29, Z+1	; 0x01
    7dd0:	c2 0f       	add	r28, r18
    7dd2:	d1 1d       	adc	r29, r1
    7dd4:	68 83       	st	Y, r22
    7dd6:	8f 5f       	subi	r24, 0xFF	; 255
    7dd8:	95 81       	ldd	r25, Z+5	; 0x05
    7dda:	89 23       	and	r24, r25
    7ddc:	83 83       	std	Z+3, r24	; 0x03
    7dde:	16 96       	adiw	r26, 0x06	; 6
    7de0:	ed 91       	ld	r30, X+
    7de2:	fc 91       	ld	r31, X
    7de4:	17 97       	sbiw	r26, 0x07	; 7
    7de6:	30 97       	sbiw	r30, 0x00	; 0
    7de8:	11 f0       	breq	.+4      	; 0x7dee <__vector_51+0x7a>
    7dea:	cd 01       	movw	r24, r26
    7dec:	19 95       	eicall
    7dee:	ff 91       	pop	r31
    7df0:	ef 91       	pop	r30
    7df2:	df 91       	pop	r29
    7df4:	cf 91       	pop	r28
    7df6:	bf 91       	pop	r27
    7df8:	af 91       	pop	r26
    7dfa:	9f 91       	pop	r25
    7dfc:	8f 91       	pop	r24
    7dfe:	7f 91       	pop	r23
    7e00:	6f 91       	pop	r22
    7e02:	5f 91       	pop	r21
    7e04:	4f 91       	pop	r20
    7e06:	3f 91       	pop	r19
    7e08:	2f 91       	pop	r18
    7e0a:	0f 90       	pop	r0
    7e0c:	0b be       	out	0x3b, r0	; 59
    7e0e:	0f 90       	pop	r0
    7e10:	0f be       	out	0x3f, r0	; 63
    7e12:	0f 90       	pop	r0
    7e14:	1f 90       	pop	r1
    7e16:	18 95       	reti

00007e18 <__vector_52>:
    7e18:	1f 92       	push	r1
    7e1a:	0f 92       	push	r0
    7e1c:	0f b6       	in	r0, 0x3f	; 63
    7e1e:	0f 92       	push	r0
    7e20:	11 24       	eor	r1, r1
    7e22:	0b b6       	in	r0, 0x3b	; 59
    7e24:	0f 92       	push	r0
    7e26:	2f 93       	push	r18
    7e28:	8f 93       	push	r24
    7e2a:	9f 93       	push	r25
    7e2c:	af 93       	push	r26
    7e2e:	bf 93       	push	r27
    7e30:	ef 93       	push	r30
    7e32:	ff 93       	push	r31
    7e34:	e0 91 55 19 	lds	r30, 0x1955	; 0x801955 <_ser_handle+0x4>
    7e38:	f0 91 56 19 	lds	r31, 0x1956	; 0x801956 <_ser_handle+0x5>
    7e3c:	30 97       	sbiw	r30, 0x00	; 0
    7e3e:	b9 f0       	breq	.+46     	; 0x7e6e <__vector_52+0x56>
    7e40:	02 80       	ldd	r0, Z+2	; 0x02
    7e42:	f3 81       	ldd	r31, Z+3	; 0x03
    7e44:	e0 2d       	mov	r30, r0
    7e46:	93 81       	ldd	r25, Z+3	; 0x03
    7e48:	82 81       	ldd	r24, Z+2	; 0x02
    7e4a:	98 17       	cp	r25, r24
    7e4c:	b1 f0       	breq	.+44     	; 0x7e7a <__vector_52+0x62>
    7e4e:	92 81       	ldd	r25, Z+2	; 0x02
    7e50:	85 81       	ldd	r24, Z+5	; 0x05
    7e52:	28 2f       	mov	r18, r24
    7e54:	26 95       	lsr	r18
    7e56:	29 23       	and	r18, r25
    7e58:	a0 81       	ld	r26, Z
    7e5a:	b1 81       	ldd	r27, Z+1	; 0x01
    7e5c:	a2 0f       	add	r26, r18
    7e5e:	b1 1d       	adc	r27, r1
    7e60:	2c 91       	ld	r18, X
    7e62:	9f 5f       	subi	r25, 0xFF	; 255
    7e64:	89 23       	and	r24, r25
    7e66:	82 83       	std	Z+2, r24	; 0x02
    7e68:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    7e6c:	0b c0       	rjmp	.+22     	; 0x7e84 <__vector_52+0x6c>
    7e6e:	e1 ed       	ldi	r30, 0xD1	; 209
    7e70:	f0 e0       	ldi	r31, 0x00	; 0
    7e72:	80 81       	ld	r24, Z
    7e74:	8f 7d       	andi	r24, 0xDF	; 223
    7e76:	80 83       	st	Z, r24
    7e78:	05 c0       	rjmp	.+10     	; 0x7e84 <__vector_52+0x6c>
    7e7a:	e1 ed       	ldi	r30, 0xD1	; 209
    7e7c:	f0 e0       	ldi	r31, 0x00	; 0
    7e7e:	80 81       	ld	r24, Z
    7e80:	8f 7d       	andi	r24, 0xDF	; 223
    7e82:	80 83       	st	Z, r24
    7e84:	ff 91       	pop	r31
    7e86:	ef 91       	pop	r30
    7e88:	bf 91       	pop	r27
    7e8a:	af 91       	pop	r26
    7e8c:	9f 91       	pop	r25
    7e8e:	8f 91       	pop	r24
    7e90:	2f 91       	pop	r18
    7e92:	0f 90       	pop	r0
    7e94:	0b be       	out	0x3b, r0	; 59
    7e96:	0f 90       	pop	r0
    7e98:	0f be       	out	0x3f, r0	; 63
    7e9a:	0f 90       	pop	r0
    7e9c:	1f 90       	pop	r1
    7e9e:	18 95       	reti

00007ea0 <__vector_54>:
    7ea0:	1f 92       	push	r1
    7ea2:	0f 92       	push	r0
    7ea4:	0f b6       	in	r0, 0x3f	; 63
    7ea6:	0f 92       	push	r0
    7ea8:	11 24       	eor	r1, r1
    7eaa:	0b b6       	in	r0, 0x3b	; 59
    7eac:	0f 92       	push	r0
    7eae:	2f 93       	push	r18
    7eb0:	3f 93       	push	r19
    7eb2:	4f 93       	push	r20
    7eb4:	5f 93       	push	r21
    7eb6:	6f 93       	push	r22
    7eb8:	7f 93       	push	r23
    7eba:	8f 93       	push	r24
    7ebc:	9f 93       	push	r25
    7ebe:	af 93       	push	r26
    7ec0:	bf 93       	push	r27
    7ec2:	cf 93       	push	r28
    7ec4:	df 93       	push	r29
    7ec6:	ef 93       	push	r30
    7ec8:	ff 93       	push	r31
    7eca:	a0 91 57 19 	lds	r26, 0x1957	; 0x801957 <_ser_handle+0x6>
    7ece:	b0 91 58 19 	lds	r27, 0x1958	; 0x801958 <_ser_handle+0x7>
    7ed2:	10 97       	sbiw	r26, 0x00	; 0
    7ed4:	11 f1       	breq	.+68     	; 0x7f1a <__vector_54+0x7a>
    7ed6:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    7eda:	14 96       	adiw	r26, 0x04	; 4
    7edc:	ed 91       	ld	r30, X+
    7ede:	fc 91       	ld	r31, X
    7ee0:	15 97       	sbiw	r26, 0x05	; 5
    7ee2:	93 81       	ldd	r25, Z+3	; 0x03
    7ee4:	82 81       	ldd	r24, Z+2	; 0x02
    7ee6:	25 81       	ldd	r18, Z+5	; 0x05
    7ee8:	98 1b       	sub	r25, r24
    7eea:	92 23       	and	r25, r18
    7eec:	84 81       	ldd	r24, Z+4	; 0x04
    7eee:	98 17       	cp	r25, r24
    7ef0:	61 f0       	breq	.+24     	; 0x7f0a <__vector_54+0x6a>
    7ef2:	83 81       	ldd	r24, Z+3	; 0x03
    7ef4:	26 95       	lsr	r18
    7ef6:	28 23       	and	r18, r24
    7ef8:	c0 81       	ld	r28, Z
    7efa:	d1 81       	ldd	r29, Z+1	; 0x01
    7efc:	c2 0f       	add	r28, r18
    7efe:	d1 1d       	adc	r29, r1
    7f00:	68 83       	st	Y, r22
    7f02:	8f 5f       	subi	r24, 0xFF	; 255
    7f04:	95 81       	ldd	r25, Z+5	; 0x05
    7f06:	89 23       	and	r24, r25
    7f08:	83 83       	std	Z+3, r24	; 0x03
    7f0a:	16 96       	adiw	r26, 0x06	; 6
    7f0c:	ed 91       	ld	r30, X+
    7f0e:	fc 91       	ld	r31, X
    7f10:	17 97       	sbiw	r26, 0x07	; 7
    7f12:	30 97       	sbiw	r30, 0x00	; 0
    7f14:	11 f0       	breq	.+4      	; 0x7f1a <__vector_54+0x7a>
    7f16:	cd 01       	movw	r24, r26
    7f18:	19 95       	eicall
    7f1a:	ff 91       	pop	r31
    7f1c:	ef 91       	pop	r30
    7f1e:	df 91       	pop	r29
    7f20:	cf 91       	pop	r28
    7f22:	bf 91       	pop	r27
    7f24:	af 91       	pop	r26
    7f26:	9f 91       	pop	r25
    7f28:	8f 91       	pop	r24
    7f2a:	7f 91       	pop	r23
    7f2c:	6f 91       	pop	r22
    7f2e:	5f 91       	pop	r21
    7f30:	4f 91       	pop	r20
    7f32:	3f 91       	pop	r19
    7f34:	2f 91       	pop	r18
    7f36:	0f 90       	pop	r0
    7f38:	0b be       	out	0x3b, r0	; 59
    7f3a:	0f 90       	pop	r0
    7f3c:	0f be       	out	0x3f, r0	; 63
    7f3e:	0f 90       	pop	r0
    7f40:	1f 90       	pop	r1
    7f42:	18 95       	reti

00007f44 <__vector_55>:
    7f44:	1f 92       	push	r1
    7f46:	0f 92       	push	r0
    7f48:	0f b6       	in	r0, 0x3f	; 63
    7f4a:	0f 92       	push	r0
    7f4c:	11 24       	eor	r1, r1
    7f4e:	0b b6       	in	r0, 0x3b	; 59
    7f50:	0f 92       	push	r0
    7f52:	2f 93       	push	r18
    7f54:	8f 93       	push	r24
    7f56:	9f 93       	push	r25
    7f58:	af 93       	push	r26
    7f5a:	bf 93       	push	r27
    7f5c:	ef 93       	push	r30
    7f5e:	ff 93       	push	r31
    7f60:	e0 91 57 19 	lds	r30, 0x1957	; 0x801957 <_ser_handle+0x6>
    7f64:	f0 91 58 19 	lds	r31, 0x1958	; 0x801958 <_ser_handle+0x7>
    7f68:	30 97       	sbiw	r30, 0x00	; 0
    7f6a:	b9 f0       	breq	.+46     	; 0x7f9a <__vector_55+0x56>
    7f6c:	02 80       	ldd	r0, Z+2	; 0x02
    7f6e:	f3 81       	ldd	r31, Z+3	; 0x03
    7f70:	e0 2d       	mov	r30, r0
    7f72:	93 81       	ldd	r25, Z+3	; 0x03
    7f74:	82 81       	ldd	r24, Z+2	; 0x02
    7f76:	98 17       	cp	r25, r24
    7f78:	b1 f0       	breq	.+44     	; 0x7fa6 <__vector_55+0x62>
    7f7a:	92 81       	ldd	r25, Z+2	; 0x02
    7f7c:	85 81       	ldd	r24, Z+5	; 0x05
    7f7e:	28 2f       	mov	r18, r24
    7f80:	26 95       	lsr	r18
    7f82:	29 23       	and	r18, r25
    7f84:	a0 81       	ld	r26, Z
    7f86:	b1 81       	ldd	r27, Z+1	; 0x01
    7f88:	a2 0f       	add	r26, r18
    7f8a:	b1 1d       	adc	r27, r1
    7f8c:	2c 91       	ld	r18, X
    7f8e:	9f 5f       	subi	r25, 0xFF	; 255
    7f90:	89 23       	and	r24, r25
    7f92:	82 83       	std	Z+2, r24	; 0x02
    7f94:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    7f98:	0b c0       	rjmp	.+22     	; 0x7fb0 <__vector_55+0x6c>
    7f9a:	e1 e3       	ldi	r30, 0x31	; 49
    7f9c:	f1 e0       	ldi	r31, 0x01	; 1
    7f9e:	80 81       	ld	r24, Z
    7fa0:	8f 7d       	andi	r24, 0xDF	; 223
    7fa2:	80 83       	st	Z, r24
    7fa4:	05 c0       	rjmp	.+10     	; 0x7fb0 <__vector_55+0x6c>
    7fa6:	e1 e3       	ldi	r30, 0x31	; 49
    7fa8:	f1 e0       	ldi	r31, 0x01	; 1
    7faa:	80 81       	ld	r24, Z
    7fac:	8f 7d       	andi	r24, 0xDF	; 223
    7fae:	80 83       	st	Z, r24
    7fb0:	ff 91       	pop	r31
    7fb2:	ef 91       	pop	r30
    7fb4:	bf 91       	pop	r27
    7fb6:	af 91       	pop	r26
    7fb8:	9f 91       	pop	r25
    7fba:	8f 91       	pop	r24
    7fbc:	2f 91       	pop	r18
    7fbe:	0f 90       	pop	r0
    7fc0:	0b be       	out	0x3b, r0	; 59
    7fc2:	0f 90       	pop	r0
    7fc4:	0f be       	out	0x3f, r0	; 63
    7fc6:	0f 90       	pop	r0
    7fc8:	1f 90       	pop	r1
    7fca:	18 95       	reti

00007fcc <usart_getchar>:
    7fcc:	cf 93       	push	r28
    7fce:	df 93       	push	r29
    7fd0:	1f 92       	push	r1
    7fd2:	cd b7       	in	r28, 0x3d	; 61
    7fd4:	de b7       	in	r29, 0x3e	; 62
    7fd6:	be 01       	movw	r22, r28
    7fd8:	6f 5f       	subi	r22, 0xFF	; 255
    7fda:	7f 4f       	sbci	r23, 0xFF	; 255
    7fdc:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_com_serial_instance>
    7fe0:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_com_serial_instance+0x1>
    7fe4:	7f dd       	rcall	.-1282   	; 0x7ae4 <serial_get_byte>
    7fe6:	81 11       	cpse	r24, r1
    7fe8:	f6 cf       	rjmp	.-20     	; 0x7fd6 <usart_getchar+0xa>
    7fea:	89 81       	ldd	r24, Y+1	; 0x01
    7fec:	90 e0       	ldi	r25, 0x00	; 0
    7fee:	0f 90       	pop	r0
    7ff0:	df 91       	pop	r29
    7ff2:	cf 91       	pop	r28
    7ff4:	08 95       	ret

00007ff6 <usart_putchar>:
    7ff6:	68 2f       	mov	r22, r24
    7ff8:	80 91 59 19 	lds	r24, 0x1959	; 0x801959 <_com_serial_instance>
    7ffc:	90 91 5a 19 	lds	r25, 0x195A	; 0x80195a <_com_serial_instance+0x1>
    8000:	fc dc       	rcall	.-1544   	; 0x79fa <serial_send_byte>
    8002:	80 e0       	ldi	r24, 0x00	; 0
    8004:	90 e0       	ldi	r25, 0x00	; 0
    8006:	08 95       	ret

00008008 <stdioCreate>:
    8008:	8f 92       	push	r8
    800a:	9f 92       	push	r9
    800c:	af 92       	push	r10
    800e:	cf 92       	push	r12
    8010:	ef 92       	push	r14
    8012:	0f 93       	push	r16
    8014:	81 2c       	mov	r8, r1
    8016:	91 2c       	mov	r9, r1
    8018:	68 94       	set
    801a:	aa 24       	eor	r10, r10
    801c:	a7 f8       	bld	r10, 7
    801e:	68 94       	set
    8020:	cc 24       	eor	r12, r12
    8022:	c7 f8       	bld	r12, 7
    8024:	e1 2c       	mov	r14, r1
    8026:	00 e0       	ldi	r16, 0x00	; 0
    8028:	23 e0       	ldi	r18, 0x03	; 3
    802a:	40 e0       	ldi	r20, 0x00	; 0
    802c:	51 ee       	ldi	r21, 0xE1	; 225
    802e:	60 e0       	ldi	r22, 0x00	; 0
    8030:	70 e0       	ldi	r23, 0x00	; 0
    8032:	43 dc       	rcall	.-1914   	; 0x78ba <serial_new_instance>
    8034:	90 93 5a 19 	sts	0x195A, r25	; 0x80195a <_com_serial_instance+0x1>
    8038:	80 93 59 19 	sts	0x1959, r24	; 0x801959 <_com_serial_instance>
    803c:	e0 e9       	ldi	r30, 0x90	; 144
    803e:	f9 e1       	ldi	r31, 0x19	; 25
    8040:	82 e1       	ldi	r24, 0x12	; 18
    8042:	92 e0       	ldi	r25, 0x02	; 2
    8044:	91 83       	std	Z+1, r25	; 0x01
    8046:	80 83       	st	Z, r24
    8048:	93 83       	std	Z+3, r25	; 0x03
    804a:	82 83       	std	Z+2, r24	; 0x02
    804c:	0f 91       	pop	r16
    804e:	ef 90       	pop	r14
    8050:	cf 90       	pop	r12
    8052:	af 90       	pop	r10
    8054:	9f 90       	pop	r9
    8056:	8f 90       	pop	r8
    8058:	08 95       	ret

0000805a <_callBack>:
    805a:	e0 91 63 19 	lds	r30, 0x1963	; 0x801963 <_callBackFunction>
    805e:	f0 91 64 19 	lds	r31, 0x1964	; 0x801964 <_callBackFunction+0x1>
    8062:	30 97       	sbiw	r30, 0x00	; 0
    8064:	09 f0       	breq	.+2      	; 0x8068 <_callBack+0xe>
    8066:	19 95       	eicall
    8068:	08 95       	ret

0000806a <_tsl2591TwiCallback>:
    806a:	64 50       	subi	r22, 0x04	; 4
    806c:	62 30       	cpi	r22, 0x02	; 2
    806e:	08 f0       	brcs	.+2      	; 0x8072 <_tsl2591TwiCallback+0x8>
    8070:	3b c0       	rjmp	.+118    	; 0x80e8 <_tsl2591TwiCallback+0x7e>
    8072:	20 91 62 19 	lds	r18, 0x1962	; 0x801962 <_nextState>
    8076:	22 30       	cpi	r18, 0x02	; 2
    8078:	79 f0       	breq	.+30     	; 0x8098 <_tsl2591TwiCallback+0x2e>
    807a:	18 f4       	brcc	.+6      	; 0x8082 <_tsl2591TwiCallback+0x18>
    807c:	21 30       	cpi	r18, 0x01	; 1
    807e:	31 f0       	breq	.+12     	; 0x808c <_tsl2591TwiCallback+0x22>
    8080:	30 c0       	rjmp	.+96     	; 0x80e2 <_tsl2591TwiCallback+0x78>
    8082:	23 30       	cpi	r18, 0x03	; 3
    8084:	81 f0       	breq	.+32     	; 0x80a6 <_tsl2591TwiCallback+0x3c>
    8086:	24 30       	cpi	r18, 0x04	; 4
    8088:	a1 f0       	breq	.+40     	; 0x80b2 <_tsl2591TwiCallback+0x48>
    808a:	2b c0       	rjmp	.+86     	; 0x80e2 <_tsl2591TwiCallback+0x78>
    808c:	22 e0       	ldi	r18, 0x02	; 2
    808e:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <_nextState>
    8092:	61 e0       	ldi	r22, 0x01	; 1
    8094:	0f c2       	rjmp	.+1054   	; 0x84b4 <twiReceive>
    8096:	08 95       	ret
    8098:	fa 01       	movw	r30, r20
    809a:	80 81       	ld	r24, Z
    809c:	80 93 5f 19 	sts	0x195F, r24	; 0x80195f <_deviceId>
    80a0:	82 e0       	ldi	r24, 0x02	; 2
    80a2:	db cf       	rjmp	.-74     	; 0x805a <_callBack>
    80a4:	08 95       	ret
    80a6:	24 e0       	ldi	r18, 0x04	; 4
    80a8:	20 93 62 19 	sts	0x1962, r18	; 0x801962 <_nextState>
    80ac:	64 e0       	ldi	r22, 0x04	; 4
    80ae:	02 c2       	rjmp	.+1028   	; 0x84b4 <twiReceive>
    80b0:	08 95       	ret
    80b2:	fa 01       	movw	r30, r20
    80b4:	81 81       	ldd	r24, Z+1	; 0x01
    80b6:	90 e0       	ldi	r25, 0x00	; 0
    80b8:	98 2f       	mov	r25, r24
    80ba:	88 27       	eor	r24, r24
    80bc:	20 81       	ld	r18, Z
    80be:	82 2b       	or	r24, r18
    80c0:	90 93 5e 19 	sts	0x195E, r25	; 0x80195e <_fullSpectrumRaw+0x1>
    80c4:	80 93 5d 19 	sts	0x195D, r24	; 0x80195d <_fullSpectrumRaw>
    80c8:	83 81       	ldd	r24, Z+3	; 0x03
    80ca:	90 e0       	ldi	r25, 0x00	; 0
    80cc:	98 2f       	mov	r25, r24
    80ce:	88 27       	eor	r24, r24
    80d0:	22 81       	ldd	r18, Z+2	; 0x02
    80d2:	82 2b       	or	r24, r18
    80d4:	90 93 5c 19 	sts	0x195C, r25	; 0x80195c <_infraredRaw+0x1>
    80d8:	80 93 5b 19 	sts	0x195B, r24	; 0x80195b <_infraredRaw>
    80dc:	81 e0       	ldi	r24, 0x01	; 1
    80de:	bd cf       	rjmp	.-134    	; 0x805a <_callBack>
    80e0:	08 95       	ret
    80e2:	80 e0       	ldi	r24, 0x00	; 0
    80e4:	ba cf       	rjmp	.-140    	; 0x805a <_callBack>
    80e6:	08 95       	ret
    80e8:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <_nextState>
    80ec:	86 e0       	ldi	r24, 0x06	; 6
    80ee:	b5 cf       	rjmp	.-150    	; 0x805a <_callBack>
    80f0:	08 95       	ret

000080f2 <_twiTransmit>:
    80f2:	20 91 65 19 	lds	r18, 0x1965	; 0x801965 <_twiHandler>
    80f6:	30 91 66 19 	lds	r19, 0x1966	; 0x801966 <_twiHandler+0x1>
    80fa:	21 15       	cp	r18, r1
    80fc:	31 05       	cpc	r19, r1
    80fe:	41 f0       	breq	.+16     	; 0x8110 <_twiTransmit+0x1e>
    8100:	46 2f       	mov	r20, r22
    8102:	bc 01       	movw	r22, r24
    8104:	c9 01       	movw	r24, r18
    8106:	8a d1       	rcall	.+788    	; 0x841c <twiTransmit>
    8108:	82 30       	cpi	r24, 0x02	; 2
    810a:	21 f0       	breq	.+8      	; 0x8114 <_twiTransmit+0x22>
    810c:	80 e0       	ldi	r24, 0x00	; 0
    810e:	08 95       	ret
    8110:	87 e0       	ldi	r24, 0x07	; 7
    8112:	08 95       	ret
    8114:	85 e0       	ldi	r24, 0x05	; 5
    8116:	08 95       	ret

00008118 <tsl2591Create>:
    8118:	0f 93       	push	r16
    811a:	1f 93       	push	r17
    811c:	90 93 64 19 	sts	0x1964, r25	; 0x801964 <_callBackFunction+0x1>
    8120:	80 93 63 19 	sts	0x1963, r24	; 0x801963 <_callBackFunction>
    8124:	05 e3       	ldi	r16, 0x35	; 53
    8126:	10 e4       	ldi	r17, 0x40	; 64
    8128:	20 e0       	ldi	r18, 0x00	; 0
    812a:	34 e2       	ldi	r19, 0x24	; 36
    812c:	44 ef       	ldi	r20, 0xF4	; 244
    812e:	50 e0       	ldi	r21, 0x00	; 0
    8130:	60 e0       	ldi	r22, 0x00	; 0
    8132:	89 e2       	ldi	r24, 0x29	; 41
    8134:	22 d1       	rcall	.+580    	; 0x837a <twiCreate>
    8136:	90 93 66 19 	sts	0x1966, r25	; 0x801966 <_twiHandler+0x1>
    813a:	80 93 65 19 	sts	0x1965, r24	; 0x801965 <_twiHandler>
    813e:	89 2b       	or	r24, r25
    8140:	11 f0       	breq	.+4      	; 0x8146 <tsl2591Create+0x2e>
    8142:	80 e0       	ldi	r24, 0x00	; 0
    8144:	01 c0       	rjmp	.+2      	; 0x8148 <tsl2591Create+0x30>
    8146:	88 e0       	ldi	r24, 0x08	; 8
    8148:	1f 91       	pop	r17
    814a:	0f 91       	pop	r16
    814c:	08 95       	ret

0000814e <tsl2591Enable>:
    814e:	cf 93       	push	r28
    8150:	df 93       	push	r29
    8152:	1f 92       	push	r1
    8154:	1f 92       	push	r1
    8156:	cd b7       	in	r28, 0x3d	; 61
    8158:	de b7       	in	r29, 0x3e	; 62
    815a:	80 ea       	ldi	r24, 0xA0	; 160
    815c:	89 83       	std	Y+1, r24	; 0x01
    815e:	83 e0       	ldi	r24, 0x03	; 3
    8160:	8a 83       	std	Y+2, r24	; 0x02
    8162:	10 92 62 19 	sts	0x1962, r1	; 0x801962 <_nextState>
    8166:	62 e0       	ldi	r22, 0x02	; 2
    8168:	ce 01       	movw	r24, r28
    816a:	01 96       	adiw	r24, 0x01	; 1
    816c:	c2 df       	rcall	.-124    	; 0x80f2 <_twiTransmit>
    816e:	0f 90       	pop	r0
    8170:	0f 90       	pop	r0
    8172:	df 91       	pop	r29
    8174:	cf 91       	pop	r28
    8176:	08 95       	ret

00008178 <tsl2591FetchData>:
    8178:	cf 93       	push	r28
    817a:	df 93       	push	r29
    817c:	1f 92       	push	r1
    817e:	cd b7       	in	r28, 0x3d	; 61
    8180:	de b7       	in	r29, 0x3e	; 62
    8182:	84 eb       	ldi	r24, 0xB4	; 180
    8184:	89 83       	std	Y+1, r24	; 0x01
    8186:	83 e0       	ldi	r24, 0x03	; 3
    8188:	80 93 62 19 	sts	0x1962, r24	; 0x801962 <_nextState>
    818c:	61 e0       	ldi	r22, 0x01	; 1
    818e:	ce 01       	movw	r24, r28
    8190:	01 96       	adiw	r24, 0x01	; 1
    8192:	af df       	rcall	.-162    	; 0x80f2 <_twiTransmit>
    8194:	0f 90       	pop	r0
    8196:	df 91       	pop	r29
    8198:	cf 91       	pop	r28
    819a:	08 95       	ret

0000819c <tsl2591GetLux>:
    819c:	2f 92       	push	r2
    819e:	3f 92       	push	r3
    81a0:	4f 92       	push	r4
    81a2:	5f 92       	push	r5
    81a4:	6f 92       	push	r6
    81a6:	7f 92       	push	r7
    81a8:	8f 92       	push	r8
    81aa:	9f 92       	push	r9
    81ac:	af 92       	push	r10
    81ae:	bf 92       	push	r11
    81b0:	cf 92       	push	r12
    81b2:	df 92       	push	r13
    81b4:	ef 92       	push	r14
    81b6:	ff 92       	push	r15
    81b8:	0f 93       	push	r16
    81ba:	1f 93       	push	r17
    81bc:	cf 93       	push	r28
    81be:	df 93       	push	r29
    81c0:	c0 91 5b 19 	lds	r28, 0x195B	; 0x80195b <_infraredRaw>
    81c4:	d0 91 5c 19 	lds	r29, 0x195C	; 0x80195c <_infraredRaw+0x1>
    81c8:	cf 3f       	cpi	r28, 0xFF	; 255
    81ca:	2f ef       	ldi	r18, 0xFF	; 255
    81cc:	d2 07       	cpc	r29, r18
    81ce:	41 f0       	breq	.+16     	; 0x81e0 <tsl2591GetLux+0x44>
    81d0:	60 91 5d 19 	lds	r22, 0x195D	; 0x80195d <_fullSpectrumRaw>
    81d4:	70 91 5e 19 	lds	r23, 0x195E	; 0x80195e <_fullSpectrumRaw+0x1>
    81d8:	6f 3f       	cpi	r22, 0xFF	; 255
    81da:	ef ef       	ldi	r30, 0xFF	; 255
    81dc:	7e 07       	cpc	r23, r30
    81de:	59 f4       	brne	.+22     	; 0x81f6 <tsl2591GetLux+0x5a>
    81e0:	4f ef       	ldi	r20, 0xFF	; 255
    81e2:	5f ef       	ldi	r21, 0xFF	; 255
    81e4:	6f e7       	ldi	r22, 0x7F	; 127
    81e6:	7f e7       	ldi	r23, 0x7F	; 127
    81e8:	fc 01       	movw	r30, r24
    81ea:	40 83       	st	Z, r20
    81ec:	51 83       	std	Z+1, r21	; 0x01
    81ee:	62 83       	std	Z+2, r22	; 0x02
    81f0:	73 83       	std	Z+3, r23	; 0x03
    81f2:	83 e0       	ldi	r24, 0x03	; 3
    81f4:	9e c0       	rjmp	.+316    	; 0x8332 <tsl2591GetLux+0x196>
    81f6:	1c 01       	movw	r2, r24
    81f8:	80 e0       	ldi	r24, 0x00	; 0
    81fa:	90 e0       	ldi	r25, 0x00	; 0
    81fc:	cd d6       	rcall	.+3482   	; 0x8f98 <__floatunsisf>
    81fe:	2b 01       	movw	r4, r22
    8200:	3c 01       	movw	r6, r24
    8202:	be 01       	movw	r22, r28
    8204:	80 e0       	ldi	r24, 0x00	; 0
    8206:	90 e0       	ldi	r25, 0x00	; 0
    8208:	c7 d6       	rcall	.+3470   	; 0x8f98 <__floatunsisf>
    820a:	4b 01       	movw	r8, r22
    820c:	5c 01       	movw	r10, r24
    820e:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <_currentIntegrationTime>
    8212:	90 e0       	ldi	r25, 0x00	; 0
    8214:	01 96       	adiw	r24, 0x01	; 1
    8216:	24 e6       	ldi	r18, 0x64	; 100
    8218:	28 9f       	mul	r18, r24
    821a:	b0 01       	movw	r22, r0
    821c:	29 9f       	mul	r18, r25
    821e:	70 0d       	add	r23, r0
    8220:	11 24       	eor	r1, r1
    8222:	80 91 61 19 	lds	r24, 0x1961	; 0x801961 <_currentGain>
    8226:	80 32       	cpi	r24, 0x20	; 32
    8228:	69 f0       	breq	.+26     	; 0x8244 <tsl2591GetLux+0xa8>
    822a:	80 33       	cpi	r24, 0x30	; 48
    822c:	a1 f0       	breq	.+40     	; 0x8256 <tsl2591GetLux+0xba>
    822e:	80 31       	cpi	r24, 0x10	; 16
    8230:	e1 f4       	brne	.+56     	; 0x826a <tsl2591GetLux+0xce>
    8232:	0f 2e       	mov	r0, r31
    8234:	c1 2c       	mov	r12, r1
    8236:	d1 2c       	mov	r13, r1
    8238:	f8 ec       	ldi	r31, 0xC8	; 200
    823a:	ef 2e       	mov	r14, r31
    823c:	f1 e4       	ldi	r31, 0x41	; 65
    823e:	ff 2e       	mov	r15, r31
    8240:	f0 2d       	mov	r31, r0
    8242:	1b c0       	rjmp	.+54     	; 0x827a <tsl2591GetLux+0xde>
    8244:	0f 2e       	mov	r0, r31
    8246:	c1 2c       	mov	r12, r1
    8248:	d1 2c       	mov	r13, r1
    824a:	f6 ed       	ldi	r31, 0xD6	; 214
    824c:	ef 2e       	mov	r14, r31
    824e:	f3 e4       	ldi	r31, 0x43	; 67
    8250:	ff 2e       	mov	r15, r31
    8252:	f0 2d       	mov	r31, r0
    8254:	12 c0       	rjmp	.+36     	; 0x827a <tsl2591GetLux+0xde>
    8256:	0f 2e       	mov	r0, r31
    8258:	c1 2c       	mov	r12, r1
    825a:	f0 e5       	ldi	r31, 0x50	; 80
    825c:	df 2e       	mov	r13, r31
    825e:	fa e1       	ldi	r31, 0x1A	; 26
    8260:	ef 2e       	mov	r14, r31
    8262:	f6 e4       	ldi	r31, 0x46	; 70
    8264:	ff 2e       	mov	r15, r31
    8266:	f0 2d       	mov	r31, r0
    8268:	08 c0       	rjmp	.+16     	; 0x827a <tsl2591GetLux+0xde>
    826a:	0f 2e       	mov	r0, r31
    826c:	c1 2c       	mov	r12, r1
    826e:	d1 2c       	mov	r13, r1
    8270:	f0 e8       	ldi	r31, 0x80	; 128
    8272:	ef 2e       	mov	r14, r31
    8274:	ff e3       	ldi	r31, 0x3F	; 63
    8276:	ff 2e       	mov	r15, r31
    8278:	f0 2d       	mov	r31, r0
    827a:	07 2e       	mov	r0, r23
    827c:	00 0c       	add	r0, r0
    827e:	88 0b       	sbc	r24, r24
    8280:	99 0b       	sbc	r25, r25
    8282:	8c d6       	rcall	.+3352   	; 0x8f9c <__floatsisf>
    8284:	a7 01       	movw	r20, r14
    8286:	96 01       	movw	r18, r12
    8288:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
    828c:	20 e0       	ldi	r18, 0x00	; 0
    828e:	30 e0       	ldi	r19, 0x00	; 0
    8290:	4c ec       	ldi	r20, 0xCC	; 204
    8292:	53 e4       	ldi	r21, 0x43	; 67
    8294:	10 d6       	rcall	.+3104   	; 0x8eb6 <__divsf3>
    8296:	6b 01       	movw	r12, r22
    8298:	7c 01       	movw	r14, r24
    829a:	25 e8       	ldi	r18, 0x85	; 133
    829c:	3b ee       	ldi	r19, 0xEB	; 235
    829e:	41 ed       	ldi	r20, 0xD1	; 209
    82a0:	5f e3       	ldi	r21, 0x3F	; 63
    82a2:	c5 01       	movw	r24, r10
    82a4:	b4 01       	movw	r22, r8
    82a6:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
    82aa:	9b 01       	movw	r18, r22
    82ac:	ac 01       	movw	r20, r24
    82ae:	c3 01       	movw	r24, r6
    82b0:	b2 01       	movw	r22, r4
    82b2:	95 d5       	rcall	.+2858   	; 0x8dde <__subsf3>
    82b4:	a7 01       	movw	r20, r14
    82b6:	96 01       	movw	r18, r12
    82b8:	fe d5       	rcall	.+3068   	; 0x8eb6 <__divsf3>
    82ba:	16 2f       	mov	r17, r22
    82bc:	d7 2f       	mov	r29, r23
    82be:	c8 2f       	mov	r28, r24
    82c0:	09 2f       	mov	r16, r25
    82c2:	2d e3       	ldi	r18, 0x3D	; 61
    82c4:	3a e0       	ldi	r19, 0x0A	; 10
    82c6:	47 e1       	ldi	r20, 0x17	; 23
    82c8:	5f e3       	ldi	r21, 0x3F	; 63
    82ca:	c3 01       	movw	r24, r6
    82cc:	b2 01       	movw	r22, r4
    82ce:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
    82d2:	2b 01       	movw	r4, r22
    82d4:	3c 01       	movw	r6, r24
    82d6:	26 ef       	ldi	r18, 0xF6	; 246
    82d8:	38 e2       	ldi	r19, 0x28	; 40
    82da:	4c e5       	ldi	r20, 0x5C	; 92
    82dc:	5f e3       	ldi	r21, 0x3F	; 63
    82de:	c5 01       	movw	r24, r10
    82e0:	b4 01       	movw	r22, r8
    82e2:	0e 94 db 33 	call	0x67b6	; 0x67b6 <__mulsf3>
    82e6:	9b 01       	movw	r18, r22
    82e8:	ac 01       	movw	r20, r24
    82ea:	c3 01       	movw	r24, r6
    82ec:	b2 01       	movw	r22, r4
    82ee:	77 d5       	rcall	.+2798   	; 0x8dde <__subsf3>
    82f0:	a7 01       	movw	r20, r14
    82f2:	96 01       	movw	r18, r12
    82f4:	e0 d5       	rcall	.+3008   	; 0x8eb6 <__divsf3>
    82f6:	c6 2e       	mov	r12, r22
    82f8:	d7 2e       	mov	r13, r23
    82fa:	e8 2e       	mov	r14, r24
    82fc:	f9 2e       	mov	r15, r25
    82fe:	26 2f       	mov	r18, r22
    8300:	37 2f       	mov	r19, r23
    8302:	48 2f       	mov	r20, r24
    8304:	59 2f       	mov	r21, r25
    8306:	61 2f       	mov	r22, r17
    8308:	7d 2f       	mov	r23, r29
    830a:	8c 2f       	mov	r24, r28
    830c:	90 2f       	mov	r25, r16
    830e:	0e 94 d7 33 	call	0x67ae	; 0x67ae <__gesf2>
    8312:	18 16       	cp	r1, r24
    8314:	24 f0       	brlt	.+8      	; 0x831e <tsl2591GetLux+0x182>
    8316:	1c 2d       	mov	r17, r12
    8318:	dd 2d       	mov	r29, r13
    831a:	ce 2d       	mov	r28, r14
    831c:	0f 2d       	mov	r16, r15
    831e:	41 2f       	mov	r20, r17
    8320:	5d 2f       	mov	r21, r29
    8322:	6c 2f       	mov	r22, r28
    8324:	70 2f       	mov	r23, r16
    8326:	f1 01       	movw	r30, r2
    8328:	40 83       	st	Z, r20
    832a:	51 83       	std	Z+1, r21	; 0x01
    832c:	62 83       	std	Z+2, r22	; 0x02
    832e:	73 83       	std	Z+3, r23	; 0x03
    8330:	80 e0       	ldi	r24, 0x00	; 0
    8332:	df 91       	pop	r29
    8334:	cf 91       	pop	r28
    8336:	1f 91       	pop	r17
    8338:	0f 91       	pop	r16
    833a:	ff 90       	pop	r15
    833c:	ef 90       	pop	r14
    833e:	df 90       	pop	r13
    8340:	cf 90       	pop	r12
    8342:	bf 90       	pop	r11
    8344:	af 90       	pop	r10
    8346:	9f 90       	pop	r9
    8348:	8f 90       	pop	r8
    834a:	7f 90       	pop	r7
    834c:	6f 90       	pop	r6
    834e:	5f 90       	pop	r5
    8350:	4f 90       	pop	r4
    8352:	3f 90       	pop	r3
    8354:	2f 90       	pop	r2
    8356:	08 95       	ret

00008358 <_initTwiInterface>:
    8358:	80 91 75 19 	lds	r24, 0x1975	; 0x801975 <_twiIsInitiated>
    835c:	81 11       	cpse	r24, r1
    835e:	0c c0       	rjmp	.+24     	; 0x8378 <_initTwiInterface+0x20>
    8360:	8c e0       	ldi	r24, 0x0C	; 12
    8362:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    8366:	8f ef       	ldi	r24, 0xFF	; 255
    8368:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    836c:	84 e0       	ldi	r24, 0x04	; 4
    836e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8372:	81 e0       	ldi	r24, 0x01	; 1
    8374:	80 93 75 19 	sts	0x1975, r24	; 0x801975 <_twiIsInitiated>
    8378:	08 95       	ret

0000837a <twiCreate>:
    837a:	af 92       	push	r10
    837c:	bf 92       	push	r11
    837e:	cf 92       	push	r12
    8380:	df 92       	push	r13
    8382:	ef 92       	push	r14
    8384:	ff 92       	push	r15
    8386:	0f 93       	push	r16
    8388:	1f 93       	push	r17
    838a:	cf 93       	push	r28
    838c:	df 93       	push	r29
    838e:	a8 2e       	mov	r10, r24
    8390:	b6 2e       	mov	r11, r22
    8392:	69 01       	movw	r12, r18
    8394:	7a 01       	movw	r14, r20
    8396:	84 e0       	ldi	r24, 0x04	; 4
    8398:	90 e0       	ldi	r25, 0x00	; 0
    839a:	7f d6       	rcall	.+3326   	; 0x909a <malloc>
    839c:	ec 01       	movw	r28, r24
    839e:	89 2b       	or	r24, r25
    83a0:	61 f1       	breq	.+88     	; 0x83fa <twiCreate+0x80>
    83a2:	a8 82       	st	Y, r10
    83a4:	81 e0       	ldi	r24, 0x01	; 1
    83a6:	b8 12       	cpse	r11, r24
    83a8:	12 c0       	rjmp	.+36     	; 0x83ce <twiCreate+0x54>
    83aa:	c7 01       	movw	r24, r14
    83ac:	b6 01       	movw	r22, r12
    83ae:	20 ea       	ldi	r18, 0xA0	; 160
    83b0:	36 e8       	ldi	r19, 0x86	; 134
    83b2:	41 e0       	ldi	r20, 0x01	; 1
    83b4:	50 e0       	ldi	r21, 0x00	; 0
    83b6:	2d d6       	rcall	.+3162   	; 0x9012 <__udivmodsi4>
    83b8:	da 01       	movw	r26, r20
    83ba:	c9 01       	movw	r24, r18
    83bc:	40 97       	sbiw	r24, 0x10	; 16
    83be:	a1 09       	sbc	r26, r1
    83c0:	b1 09       	sbc	r27, r1
    83c2:	b6 95       	lsr	r27
    83c4:	a7 95       	ror	r26
    83c6:	97 95       	ror	r25
    83c8:	87 95       	ror	r24
    83ca:	89 83       	std	Y+1, r24	; 0x01
    83cc:	11 c0       	rjmp	.+34     	; 0x83f0 <twiCreate+0x76>
    83ce:	c7 01       	movw	r24, r14
    83d0:	b6 01       	movw	r22, r12
    83d2:	20 e8       	ldi	r18, 0x80	; 128
    83d4:	3a e1       	ldi	r19, 0x1A	; 26
    83d6:	46 e0       	ldi	r20, 0x06	; 6
    83d8:	50 e0       	ldi	r21, 0x00	; 0
    83da:	1b d6       	rcall	.+3126   	; 0x9012 <__udivmodsi4>
    83dc:	da 01       	movw	r26, r20
    83de:	c9 01       	movw	r24, r18
    83e0:	40 97       	sbiw	r24, 0x10	; 16
    83e2:	a1 09       	sbc	r26, r1
    83e4:	b1 09       	sbc	r27, r1
    83e6:	b6 95       	lsr	r27
    83e8:	a7 95       	ror	r26
    83ea:	97 95       	ror	r25
    83ec:	87 95       	ror	r24
    83ee:	89 83       	std	Y+1, r24	; 0x01
    83f0:	1b 83       	std	Y+3, r17	; 0x03
    83f2:	0a 83       	std	Y+2, r16	; 0x02
    83f4:	8c 2f       	mov	r24, r28
    83f6:	9d 2f       	mov	r25, r29
    83f8:	02 c0       	rjmp	.+4      	; 0x83fe <twiCreate+0x84>
    83fa:	80 e0       	ldi	r24, 0x00	; 0
    83fc:	90 e0       	ldi	r25, 0x00	; 0
    83fe:	df 91       	pop	r29
    8400:	cf 91       	pop	r28
    8402:	1f 91       	pop	r17
    8404:	0f 91       	pop	r16
    8406:	ff 90       	pop	r15
    8408:	ef 90       	pop	r14
    840a:	df 90       	pop	r13
    840c:	cf 90       	pop	r12
    840e:	bf 90       	pop	r11
    8410:	af 90       	pop	r10
    8412:	08 95       	ret

00008414 <twiIsBusy>:
    8414:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8418:	81 70       	andi	r24, 0x01	; 1
    841a:	08 95       	ret

0000841c <twiTransmit>:
    841c:	ff 92       	push	r15
    841e:	0f 93       	push	r16
    8420:	1f 93       	push	r17
    8422:	cf 93       	push	r28
    8424:	df 93       	push	r29
    8426:	00 97       	sbiw	r24, 0x00	; 0
    8428:	d1 f1       	breq	.+116    	; 0x849e <twiTransmit+0x82>
    842a:	4a 30       	cpi	r20, 0x0A	; 10
    842c:	d0 f5       	brcc	.+116    	; 0x84a2 <twiTransmit+0x86>
    842e:	f4 2e       	mov	r15, r20
    8430:	8b 01       	movw	r16, r22
    8432:	ec 01       	movw	r28, r24
    8434:	ef df       	rcall	.-34     	; 0x8414 <twiIsBusy>
    8436:	81 11       	cpse	r24, r1
    8438:	36 c0       	rjmp	.+108    	; 0x84a6 <twiTransmit+0x8a>
    843a:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <_twiCurrentHandler>
    843e:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <_twiCurrentHandler+0x1>
    8442:	c8 17       	cp	r28, r24
    8444:	d9 07       	cpc	r29, r25
    8446:	41 f0       	breq	.+16     	; 0x8458 <twiTransmit+0x3c>
    8448:	87 df       	rcall	.-242    	; 0x8358 <_initTwiInterface>
    844a:	89 81       	ldd	r24, Y+1	; 0x01
    844c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    8450:	d0 93 69 19 	sts	0x1969, r29	; 0x801969 <_twiCurrentHandler+0x1>
    8454:	c0 93 68 19 	sts	0x1968, r28	; 0x801968 <_twiCurrentHandler>
    8458:	81 e0       	ldi	r24, 0x01	; 1
    845a:	8f 0d       	add	r24, r15
    845c:	80 93 6a 19 	sts	0x196A, r24	; 0x80196a <_twiMessageLen>
    8460:	88 81       	ld	r24, Y
    8462:	88 0f       	add	r24, r24
    8464:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_twiMessageBuffer>
    8468:	ff 20       	and	r15, r15
    846a:	89 f0       	breq	.+34     	; 0x848e <twiTransmit+0x72>
    846c:	f8 01       	movw	r30, r16
    846e:	ac e6       	ldi	r26, 0x6C	; 108
    8470:	b9 e1       	ldi	r27, 0x19	; 25
    8472:	4f ef       	ldi	r20, 0xFF	; 255
    8474:	4f 0d       	add	r20, r15
    8476:	64 2f       	mov	r22, r20
    8478:	70 e0       	ldi	r23, 0x00	; 0
    847a:	cb 01       	movw	r24, r22
    847c:	01 96       	adiw	r24, 0x01	; 1
    847e:	b8 01       	movw	r22, r16
    8480:	68 0f       	add	r22, r24
    8482:	79 1f       	adc	r23, r25
    8484:	81 91       	ld	r24, Z+
    8486:	8d 93       	st	X+, r24
    8488:	e6 17       	cp	r30, r22
    848a:	f7 07       	cpc	r31, r23
    848c:	d9 f7       	brne	.-10     	; 0x8484 <twiTransmit+0x68>
    848e:	88 ef       	ldi	r24, 0xF8	; 248
    8490:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    8494:	85 ea       	ldi	r24, 0xA5	; 165
    8496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    849a:	84 e0       	ldi	r24, 0x04	; 4
    849c:	05 c0       	rjmp	.+10     	; 0x84a8 <twiTransmit+0x8c>
    849e:	86 e0       	ldi	r24, 0x06	; 6
    84a0:	03 c0       	rjmp	.+6      	; 0x84a8 <twiTransmit+0x8c>
    84a2:	87 e0       	ldi	r24, 0x07	; 7
    84a4:	01 c0       	rjmp	.+2      	; 0x84a8 <twiTransmit+0x8c>
    84a6:	82 e0       	ldi	r24, 0x02	; 2
    84a8:	df 91       	pop	r29
    84aa:	cf 91       	pop	r28
    84ac:	1f 91       	pop	r17
    84ae:	0f 91       	pop	r16
    84b0:	ff 90       	pop	r15
    84b2:	08 95       	ret

000084b4 <twiReceive>:
    84b4:	1f 93       	push	r17
    84b6:	cf 93       	push	r28
    84b8:	df 93       	push	r29
    84ba:	00 97       	sbiw	r24, 0x00	; 0
    84bc:	29 f1       	breq	.+74     	; 0x8508 <twiReceive+0x54>
    84be:	6b 30       	cpi	r22, 0x0B	; 11
    84c0:	28 f5       	brcc	.+74     	; 0x850c <twiReceive+0x58>
    84c2:	16 2f       	mov	r17, r22
    84c4:	ec 01       	movw	r28, r24
    84c6:	a6 df       	rcall	.-180    	; 0x8414 <twiIsBusy>
    84c8:	81 11       	cpse	r24, r1
    84ca:	22 c0       	rjmp	.+68     	; 0x8510 <twiReceive+0x5c>
    84cc:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <_twiCurrentHandler>
    84d0:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <_twiCurrentHandler+0x1>
    84d4:	c8 17       	cp	r28, r24
    84d6:	d9 07       	cpc	r29, r25
    84d8:	41 f0       	breq	.+16     	; 0x84ea <twiReceive+0x36>
    84da:	3e df       	rcall	.-388    	; 0x8358 <_initTwiInterface>
    84dc:	89 81       	ldd	r24, Y+1	; 0x01
    84de:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    84e2:	d0 93 69 19 	sts	0x1969, r29	; 0x801969 <_twiCurrentHandler+0x1>
    84e6:	c0 93 68 19 	sts	0x1968, r28	; 0x801968 <_twiCurrentHandler>
    84ea:	10 93 6a 19 	sts	0x196A, r17	; 0x80196a <_twiMessageLen>
    84ee:	88 81       	ld	r24, Y
    84f0:	88 0f       	add	r24, r24
    84f2:	81 60       	ori	r24, 0x01	; 1
    84f4:	80 93 6b 19 	sts	0x196B, r24	; 0x80196b <_twiMessageBuffer>
    84f8:	88 ef       	ldi	r24, 0xF8	; 248
    84fa:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    84fe:	85 ea       	ldi	r24, 0xA5	; 165
    8500:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8504:	85 e0       	ldi	r24, 0x05	; 5
    8506:	05 c0       	rjmp	.+10     	; 0x8512 <twiReceive+0x5e>
    8508:	86 e0       	ldi	r24, 0x06	; 6
    850a:	03 c0       	rjmp	.+6      	; 0x8512 <twiReceive+0x5e>
    850c:	87 e0       	ldi	r24, 0x07	; 7
    850e:	01 c0       	rjmp	.+2      	; 0x8512 <twiReceive+0x5e>
    8510:	82 e0       	ldi	r24, 0x02	; 2
    8512:	df 91       	pop	r29
    8514:	cf 91       	pop	r28
    8516:	1f 91       	pop	r17
    8518:	08 95       	ret

0000851a <__vector_39>:
    851a:	1f 92       	push	r1
    851c:	0f 92       	push	r0
    851e:	0f b6       	in	r0, 0x3f	; 63
    8520:	0f 92       	push	r0
    8522:	11 24       	eor	r1, r1
    8524:	0b b6       	in	r0, 0x3b	; 59
    8526:	0f 92       	push	r0
    8528:	2f 93       	push	r18
    852a:	3f 93       	push	r19
    852c:	4f 93       	push	r20
    852e:	5f 93       	push	r21
    8530:	6f 93       	push	r22
    8532:	7f 93       	push	r23
    8534:	8f 93       	push	r24
    8536:	9f 93       	push	r25
    8538:	af 93       	push	r26
    853a:	bf 93       	push	r27
    853c:	ef 93       	push	r30
    853e:	ff 93       	push	r31
    8540:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    8544:	8e 2f       	mov	r24, r30
    8546:	90 e0       	ldi	r25, 0x00	; 0
    8548:	fc 01       	movw	r30, r24
    854a:	38 97       	sbiw	r30, 0x08	; 8
    854c:	e1 35       	cpi	r30, 0x51	; 81
    854e:	f1 05       	cpc	r31, r1
    8550:	08 f0       	brcs	.+2      	; 0x8554 <__vector_39+0x3a>
    8552:	75 c0       	rjmp	.+234    	; 0x863e <__vector_39+0x124>
    8554:	88 27       	eor	r24, r24
    8556:	e4 58       	subi	r30, 0x84	; 132
    8558:	ff 4f       	sbci	r31, 0xFF	; 255
    855a:	8f 4f       	sbci	r24, 0xFF	; 255
    855c:	7c c5       	rjmp	.+2808   	; 0x9056 <__tablejump2__>
    855e:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <_index.1885>
    8562:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <_index.1885>
    8566:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <_twiMessageLen>
    856a:	e8 17       	cp	r30, r24
    856c:	70 f4       	brcc	.+28     	; 0x858a <__vector_39+0x70>
    856e:	81 e0       	ldi	r24, 0x01	; 1
    8570:	8e 0f       	add	r24, r30
    8572:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <_index.1885>
    8576:	f0 e0       	ldi	r31, 0x00	; 0
    8578:	e5 59       	subi	r30, 0x95	; 149
    857a:	f6 4e       	sbci	r31, 0xE6	; 230
    857c:	80 81       	ld	r24, Z
    857e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    8582:	85 e8       	ldi	r24, 0x85	; 133
    8584:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8588:	72 c0       	rjmp	.+228    	; 0x866e <__vector_39+0x154>
    858a:	84 e9       	ldi	r24, 0x94	; 148
    858c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8590:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <_twiCurrentHandler>
    8594:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <_twiCurrentHandler+0x1>
    8598:	dc 01       	movw	r26, r24
    859a:	12 96       	adiw	r26, 0x02	; 2
    859c:	ed 91       	ld	r30, X+
    859e:	fc 91       	ld	r31, X
    85a0:	13 97       	sbiw	r26, 0x03	; 3
    85a2:	30 97       	sbiw	r30, 0x00	; 0
    85a4:	09 f4       	brne	.+2      	; 0x85a8 <__vector_39+0x8e>
    85a6:	63 c0       	rjmp	.+198    	; 0x866e <__vector_39+0x154>
    85a8:	20 e0       	ldi	r18, 0x00	; 0
    85aa:	40 e0       	ldi	r20, 0x00	; 0
    85ac:	50 e0       	ldi	r21, 0x00	; 0
    85ae:	64 e0       	ldi	r22, 0x04	; 4
    85b0:	19 95       	eicall
    85b2:	5d c0       	rjmp	.+186    	; 0x866e <__vector_39+0x154>
    85b4:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <_index.1885>
    85b8:	81 e0       	ldi	r24, 0x01	; 1
    85ba:	8e 0f       	add	r24, r30
    85bc:	80 93 67 19 	sts	0x1967, r24	; 0x801967 <_index.1885>
    85c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    85c4:	f0 e0       	ldi	r31, 0x00	; 0
    85c6:	e5 59       	subi	r30, 0x95	; 149
    85c8:	f6 4e       	sbci	r31, 0xE6	; 230
    85ca:	80 83       	st	Z, r24
    85cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    85d0:	80 34       	cpi	r24, 0x40	; 64
    85d2:	11 f4       	brne	.+4      	; 0x85d8 <__vector_39+0xbe>
    85d4:	10 92 67 19 	sts	0x1967, r1	; 0x801967 <_index.1885>
    85d8:	20 91 67 19 	lds	r18, 0x1967	; 0x801967 <_index.1885>
    85dc:	30 e0       	ldi	r19, 0x00	; 0
    85de:	80 91 6a 19 	lds	r24, 0x196A	; 0x80196a <_twiMessageLen>
    85e2:	90 e0       	ldi	r25, 0x00	; 0
    85e4:	01 97       	sbiw	r24, 0x01	; 1
    85e6:	28 17       	cp	r18, r24
    85e8:	39 07       	cpc	r19, r25
    85ea:	24 f4       	brge	.+8      	; 0x85f4 <__vector_39+0xda>
    85ec:	85 ec       	ldi	r24, 0xC5	; 197
    85ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    85f2:	3d c0       	rjmp	.+122    	; 0x866e <__vector_39+0x154>
    85f4:	85 e8       	ldi	r24, 0x85	; 133
    85f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    85fa:	39 c0       	rjmp	.+114    	; 0x866e <__vector_39+0x154>
    85fc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    8600:	e0 91 67 19 	lds	r30, 0x1967	; 0x801967 <_index.1885>
    8604:	f0 e0       	ldi	r31, 0x00	; 0
    8606:	e5 59       	subi	r30, 0x95	; 149
    8608:	f6 4e       	sbci	r31, 0xE6	; 230
    860a:	80 83       	st	Z, r24
    860c:	84 e9       	ldi	r24, 0x94	; 148
    860e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    8612:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <_twiCurrentHandler>
    8616:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <_twiCurrentHandler+0x1>
    861a:	dc 01       	movw	r26, r24
    861c:	12 96       	adiw	r26, 0x02	; 2
    861e:	ed 91       	ld	r30, X+
    8620:	fc 91       	ld	r31, X
    8622:	13 97       	sbiw	r26, 0x03	; 3
    8624:	30 97       	sbiw	r30, 0x00	; 0
    8626:	19 f1       	breq	.+70     	; 0x866e <__vector_39+0x154>
    8628:	20 91 6a 19 	lds	r18, 0x196A	; 0x80196a <_twiMessageLen>
    862c:	4b e6       	ldi	r20, 0x6B	; 107
    862e:	59 e1       	ldi	r21, 0x19	; 25
    8630:	65 e0       	ldi	r22, 0x05	; 5
    8632:	19 95       	eicall
    8634:	1c c0       	rjmp	.+56     	; 0x866e <__vector_39+0x154>
    8636:	85 ea       	ldi	r24, 0xA5	; 165
    8638:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    863c:	18 c0       	rjmp	.+48     	; 0x866e <__vector_39+0x154>
    863e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    8642:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    8646:	84 e0       	ldi	r24, 0x04	; 4
    8648:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    864c:	80 91 68 19 	lds	r24, 0x1968	; 0x801968 <_twiCurrentHandler>
    8650:	90 91 69 19 	lds	r25, 0x1969	; 0x801969 <_twiCurrentHandler+0x1>
    8654:	dc 01       	movw	r26, r24
    8656:	12 96       	adiw	r26, 0x02	; 2
    8658:	ed 91       	ld	r30, X+
    865a:	fc 91       	ld	r31, X
    865c:	13 97       	sbiw	r26, 0x03	; 3
    865e:	30 97       	sbiw	r30, 0x00	; 0
    8660:	31 f0       	breq	.+12     	; 0x866e <__vector_39+0x154>
    8662:	20 e0       	ldi	r18, 0x00	; 0
    8664:	40 e0       	ldi	r20, 0x00	; 0
    8666:	50 e0       	ldi	r21, 0x00	; 0
    8668:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    866c:	19 95       	eicall
    866e:	ff 91       	pop	r31
    8670:	ef 91       	pop	r30
    8672:	bf 91       	pop	r27
    8674:	af 91       	pop	r26
    8676:	9f 91       	pop	r25
    8678:	8f 91       	pop	r24
    867a:	7f 91       	pop	r23
    867c:	6f 91       	pop	r22
    867e:	5f 91       	pop	r21
    8680:	4f 91       	pop	r20
    8682:	3f 91       	pop	r19
    8684:	2f 91       	pop	r18
    8686:	0f 90       	pop	r0
    8688:	0b be       	out	0x3b, r0	; 59
    868a:	0f 90       	pop	r0
    868c:	0f be       	out	0x3f, r0	; 63
    868e:	0f 90       	pop	r0
    8690:	1f 90       	pop	r1
    8692:	18 95       	reti

00008694 <fifo_init>:
    8694:	fc 01       	movw	r30, r24
    8696:	41 11       	cpse	r20, r1
    8698:	01 c0       	rjmp	.+2      	; 0x869c <fifo_init+0x8>
    869a:	20 d6       	rcall	.+3136   	; 0x92dc <abort>
    869c:	84 2f       	mov	r24, r20
    869e:	90 e0       	ldi	r25, 0x00	; 0
    86a0:	9c 01       	movw	r18, r24
    86a2:	21 50       	subi	r18, 0x01	; 1
    86a4:	31 09       	sbc	r19, r1
    86a6:	82 23       	and	r24, r18
    86a8:	93 23       	and	r25, r19
    86aa:	89 2b       	or	r24, r25
    86ac:	09 f0       	breq	.+2      	; 0x86b0 <fifo_init+0x1c>
    86ae:	16 d6       	rcall	.+3116   	; 0x92dc <abort>
    86b0:	41 38       	cpi	r20, 0x81	; 129
    86b2:	08 f0       	brcs	.+2      	; 0x86b6 <fifo_init+0x22>
    86b4:	13 d6       	rcall	.+3110   	; 0x92dc <abort>
    86b6:	12 82       	std	Z+2, r1	; 0x02
    86b8:	13 82       	std	Z+3, r1	; 0x03
    86ba:	44 83       	std	Z+4, r20	; 0x04
    86bc:	44 0f       	add	r20, r20
    86be:	41 50       	subi	r20, 0x01	; 1
    86c0:	45 83       	std	Z+5, r20	; 0x05
    86c2:	71 83       	std	Z+1, r23	; 0x01
    86c4:	60 83       	st	Z, r22
    86c6:	80 e0       	ldi	r24, 0x00	; 0
    86c8:	90 e0       	ldi	r25, 0x00	; 0
    86ca:	08 95       	ret

000086cc <vfprintf>:
    86cc:	2f 92       	push	r2
    86ce:	3f 92       	push	r3
    86d0:	4f 92       	push	r4
    86d2:	5f 92       	push	r5
    86d4:	6f 92       	push	r6
    86d6:	7f 92       	push	r7
    86d8:	8f 92       	push	r8
    86da:	9f 92       	push	r9
    86dc:	af 92       	push	r10
    86de:	bf 92       	push	r11
    86e0:	cf 92       	push	r12
    86e2:	df 92       	push	r13
    86e4:	ef 92       	push	r14
    86e6:	ff 92       	push	r15
    86e8:	0f 93       	push	r16
    86ea:	1f 93       	push	r17
    86ec:	cf 93       	push	r28
    86ee:	df 93       	push	r29
    86f0:	cd b7       	in	r28, 0x3d	; 61
    86f2:	de b7       	in	r29, 0x3e	; 62
    86f4:	60 97       	sbiw	r28, 0x10	; 16
    86f6:	0f b6       	in	r0, 0x3f	; 63
    86f8:	f8 94       	cli
    86fa:	de bf       	out	0x3e, r29	; 62
    86fc:	0f be       	out	0x3f, r0	; 63
    86fe:	cd bf       	out	0x3d, r28	; 61
    8700:	7c 01       	movw	r14, r24
    8702:	1b 01       	movw	r2, r22
    8704:	6a 01       	movw	r12, r20
    8706:	fc 01       	movw	r30, r24
    8708:	17 82       	std	Z+7, r1	; 0x07
    870a:	16 82       	std	Z+6, r1	; 0x06
    870c:	83 81       	ldd	r24, Z+3	; 0x03
    870e:	81 ff       	sbrs	r24, 1
    8710:	2a c3       	rjmp	.+1620   	; 0x8d66 <vfprintf+0x69a>
    8712:	9e 01       	movw	r18, r28
    8714:	2f 5f       	subi	r18, 0xFF	; 255
    8716:	3f 4f       	sbci	r19, 0xFF	; 255
    8718:	39 01       	movw	r6, r18
    871a:	f7 01       	movw	r30, r14
    871c:	93 81       	ldd	r25, Z+3	; 0x03
    871e:	f1 01       	movw	r30, r2
    8720:	93 fd       	sbrc	r25, 3
    8722:	85 91       	lpm	r24, Z+
    8724:	93 ff       	sbrs	r25, 3
    8726:	81 91       	ld	r24, Z+
    8728:	1f 01       	movw	r2, r30
    872a:	88 23       	and	r24, r24
    872c:	09 f4       	brne	.+2      	; 0x8730 <vfprintf+0x64>
    872e:	17 c3       	rjmp	.+1582   	; 0x8d5e <vfprintf+0x692>
    8730:	85 32       	cpi	r24, 0x25	; 37
    8732:	39 f4       	brne	.+14     	; 0x8742 <vfprintf+0x76>
    8734:	93 fd       	sbrc	r25, 3
    8736:	85 91       	lpm	r24, Z+
    8738:	93 ff       	sbrs	r25, 3
    873a:	81 91       	ld	r24, Z+
    873c:	1f 01       	movw	r2, r30
    873e:	85 32       	cpi	r24, 0x25	; 37
    8740:	31 f4       	brne	.+12     	; 0x874e <vfprintf+0x82>
    8742:	b7 01       	movw	r22, r14
    8744:	90 e0       	ldi	r25, 0x00	; 0
    8746:	1b d7       	rcall	.+3638   	; 0x957e <fputc>
    8748:	56 01       	movw	r10, r12
    874a:	65 01       	movw	r12, r10
    874c:	e6 cf       	rjmp	.-52     	; 0x871a <vfprintf+0x4e>
    874e:	10 e0       	ldi	r17, 0x00	; 0
    8750:	51 2c       	mov	r5, r1
    8752:	91 2c       	mov	r9, r1
    8754:	ff e1       	ldi	r31, 0x1F	; 31
    8756:	f9 15       	cp	r31, r9
    8758:	d8 f0       	brcs	.+54     	; 0x8790 <vfprintf+0xc4>
    875a:	8b 32       	cpi	r24, 0x2B	; 43
    875c:	79 f0       	breq	.+30     	; 0x877c <vfprintf+0xb0>
    875e:	38 f4       	brcc	.+14     	; 0x876e <vfprintf+0xa2>
    8760:	80 32       	cpi	r24, 0x20	; 32
    8762:	79 f0       	breq	.+30     	; 0x8782 <vfprintf+0xb6>
    8764:	83 32       	cpi	r24, 0x23	; 35
    8766:	a1 f4       	brne	.+40     	; 0x8790 <vfprintf+0xc4>
    8768:	f9 2d       	mov	r31, r9
    876a:	f0 61       	ori	r31, 0x10	; 16
    876c:	2e c0       	rjmp	.+92     	; 0x87ca <vfprintf+0xfe>
    876e:	8d 32       	cpi	r24, 0x2D	; 45
    8770:	61 f0       	breq	.+24     	; 0x878a <vfprintf+0xbe>
    8772:	80 33       	cpi	r24, 0x30	; 48
    8774:	69 f4       	brne	.+26     	; 0x8790 <vfprintf+0xc4>
    8776:	29 2d       	mov	r18, r9
    8778:	21 60       	ori	r18, 0x01	; 1
    877a:	2d c0       	rjmp	.+90     	; 0x87d6 <vfprintf+0x10a>
    877c:	39 2d       	mov	r19, r9
    877e:	32 60       	ori	r19, 0x02	; 2
    8780:	93 2e       	mov	r9, r19
    8782:	89 2d       	mov	r24, r9
    8784:	84 60       	ori	r24, 0x04	; 4
    8786:	98 2e       	mov	r9, r24
    8788:	2a c0       	rjmp	.+84     	; 0x87de <vfprintf+0x112>
    878a:	e9 2d       	mov	r30, r9
    878c:	e8 60       	ori	r30, 0x08	; 8
    878e:	15 c0       	rjmp	.+42     	; 0x87ba <vfprintf+0xee>
    8790:	97 fc       	sbrc	r9, 7
    8792:	2d c0       	rjmp	.+90     	; 0x87ee <vfprintf+0x122>
    8794:	20 ed       	ldi	r18, 0xD0	; 208
    8796:	28 0f       	add	r18, r24
    8798:	2a 30       	cpi	r18, 0x0A	; 10
    879a:	88 f4       	brcc	.+34     	; 0x87be <vfprintf+0xf2>
    879c:	96 fe       	sbrs	r9, 6
    879e:	06 c0       	rjmp	.+12     	; 0x87ac <vfprintf+0xe0>
    87a0:	3a e0       	ldi	r19, 0x0A	; 10
    87a2:	13 9f       	mul	r17, r19
    87a4:	20 0d       	add	r18, r0
    87a6:	11 24       	eor	r1, r1
    87a8:	12 2f       	mov	r17, r18
    87aa:	19 c0       	rjmp	.+50     	; 0x87de <vfprintf+0x112>
    87ac:	8a e0       	ldi	r24, 0x0A	; 10
    87ae:	58 9e       	mul	r5, r24
    87b0:	20 0d       	add	r18, r0
    87b2:	11 24       	eor	r1, r1
    87b4:	52 2e       	mov	r5, r18
    87b6:	e9 2d       	mov	r30, r9
    87b8:	e0 62       	ori	r30, 0x20	; 32
    87ba:	9e 2e       	mov	r9, r30
    87bc:	10 c0       	rjmp	.+32     	; 0x87de <vfprintf+0x112>
    87be:	8e 32       	cpi	r24, 0x2E	; 46
    87c0:	31 f4       	brne	.+12     	; 0x87ce <vfprintf+0x102>
    87c2:	96 fc       	sbrc	r9, 6
    87c4:	cc c2       	rjmp	.+1432   	; 0x8d5e <vfprintf+0x692>
    87c6:	f9 2d       	mov	r31, r9
    87c8:	f0 64       	ori	r31, 0x40	; 64
    87ca:	9f 2e       	mov	r9, r31
    87cc:	08 c0       	rjmp	.+16     	; 0x87de <vfprintf+0x112>
    87ce:	8c 36       	cpi	r24, 0x6C	; 108
    87d0:	21 f4       	brne	.+8      	; 0x87da <vfprintf+0x10e>
    87d2:	29 2d       	mov	r18, r9
    87d4:	20 68       	ori	r18, 0x80	; 128
    87d6:	92 2e       	mov	r9, r18
    87d8:	02 c0       	rjmp	.+4      	; 0x87de <vfprintf+0x112>
    87da:	88 36       	cpi	r24, 0x68	; 104
    87dc:	41 f4       	brne	.+16     	; 0x87ee <vfprintf+0x122>
    87de:	f1 01       	movw	r30, r2
    87e0:	93 fd       	sbrc	r25, 3
    87e2:	85 91       	lpm	r24, Z+
    87e4:	93 ff       	sbrs	r25, 3
    87e6:	81 91       	ld	r24, Z+
    87e8:	1f 01       	movw	r2, r30
    87ea:	81 11       	cpse	r24, r1
    87ec:	b3 cf       	rjmp	.-154    	; 0x8754 <vfprintf+0x88>
    87ee:	9b eb       	ldi	r25, 0xBB	; 187
    87f0:	98 0f       	add	r25, r24
    87f2:	93 30       	cpi	r25, 0x03	; 3
    87f4:	20 f4       	brcc	.+8      	; 0x87fe <vfprintf+0x132>
    87f6:	99 2d       	mov	r25, r9
    87f8:	90 61       	ori	r25, 0x10	; 16
    87fa:	80 5e       	subi	r24, 0xE0	; 224
    87fc:	07 c0       	rjmp	.+14     	; 0x880c <vfprintf+0x140>
    87fe:	9b e9       	ldi	r25, 0x9B	; 155
    8800:	98 0f       	add	r25, r24
    8802:	93 30       	cpi	r25, 0x03	; 3
    8804:	08 f0       	brcs	.+2      	; 0x8808 <vfprintf+0x13c>
    8806:	59 c1       	rjmp	.+690    	; 0x8aba <vfprintf+0x3ee>
    8808:	99 2d       	mov	r25, r9
    880a:	9f 7e       	andi	r25, 0xEF	; 239
    880c:	96 ff       	sbrs	r25, 6
    880e:	16 e0       	ldi	r17, 0x06	; 6
    8810:	9f 73       	andi	r25, 0x3F	; 63
    8812:	99 2e       	mov	r9, r25
    8814:	85 36       	cpi	r24, 0x65	; 101
    8816:	19 f4       	brne	.+6      	; 0x881e <vfprintf+0x152>
    8818:	90 64       	ori	r25, 0x40	; 64
    881a:	99 2e       	mov	r9, r25
    881c:	08 c0       	rjmp	.+16     	; 0x882e <vfprintf+0x162>
    881e:	86 36       	cpi	r24, 0x66	; 102
    8820:	21 f4       	brne	.+8      	; 0x882a <vfprintf+0x15e>
    8822:	39 2f       	mov	r19, r25
    8824:	30 68       	ori	r19, 0x80	; 128
    8826:	93 2e       	mov	r9, r19
    8828:	02 c0       	rjmp	.+4      	; 0x882e <vfprintf+0x162>
    882a:	11 11       	cpse	r17, r1
    882c:	11 50       	subi	r17, 0x01	; 1
    882e:	97 fe       	sbrs	r9, 7
    8830:	07 c0       	rjmp	.+14     	; 0x8840 <vfprintf+0x174>
    8832:	1c 33       	cpi	r17, 0x3C	; 60
    8834:	50 f4       	brcc	.+20     	; 0x884a <vfprintf+0x17e>
    8836:	44 24       	eor	r4, r4
    8838:	43 94       	inc	r4
    883a:	41 0e       	add	r4, r17
    883c:	27 e0       	ldi	r18, 0x07	; 7
    883e:	0b c0       	rjmp	.+22     	; 0x8856 <vfprintf+0x18a>
    8840:	18 30       	cpi	r17, 0x08	; 8
    8842:	38 f0       	brcs	.+14     	; 0x8852 <vfprintf+0x186>
    8844:	27 e0       	ldi	r18, 0x07	; 7
    8846:	17 e0       	ldi	r17, 0x07	; 7
    8848:	05 c0       	rjmp	.+10     	; 0x8854 <vfprintf+0x188>
    884a:	27 e0       	ldi	r18, 0x07	; 7
    884c:	9c e3       	ldi	r25, 0x3C	; 60
    884e:	49 2e       	mov	r4, r25
    8850:	02 c0       	rjmp	.+4      	; 0x8856 <vfprintf+0x18a>
    8852:	21 2f       	mov	r18, r17
    8854:	41 2c       	mov	r4, r1
    8856:	56 01       	movw	r10, r12
    8858:	84 e0       	ldi	r24, 0x04	; 4
    885a:	a8 0e       	add	r10, r24
    885c:	b1 1c       	adc	r11, r1
    885e:	f6 01       	movw	r30, r12
    8860:	60 81       	ld	r22, Z
    8862:	71 81       	ldd	r23, Z+1	; 0x01
    8864:	82 81       	ldd	r24, Z+2	; 0x02
    8866:	93 81       	ldd	r25, Z+3	; 0x03
    8868:	04 2d       	mov	r16, r4
    886a:	a3 01       	movw	r20, r6
    886c:	3b d5       	rcall	.+2678   	; 0x92e4 <__ftoa_engine>
    886e:	6c 01       	movw	r12, r24
    8870:	f9 81       	ldd	r31, Y+1	; 0x01
    8872:	fc 87       	std	Y+12, r31	; 0x0c
    8874:	f0 ff       	sbrs	r31, 0
    8876:	02 c0       	rjmp	.+4      	; 0x887c <vfprintf+0x1b0>
    8878:	f3 ff       	sbrs	r31, 3
    887a:	06 c0       	rjmp	.+12     	; 0x8888 <vfprintf+0x1bc>
    887c:	91 fc       	sbrc	r9, 1
    887e:	06 c0       	rjmp	.+12     	; 0x888c <vfprintf+0x1c0>
    8880:	92 fe       	sbrs	r9, 2
    8882:	06 c0       	rjmp	.+12     	; 0x8890 <vfprintf+0x1c4>
    8884:	00 e2       	ldi	r16, 0x20	; 32
    8886:	05 c0       	rjmp	.+10     	; 0x8892 <vfprintf+0x1c6>
    8888:	0d e2       	ldi	r16, 0x2D	; 45
    888a:	03 c0       	rjmp	.+6      	; 0x8892 <vfprintf+0x1c6>
    888c:	0b e2       	ldi	r16, 0x2B	; 43
    888e:	01 c0       	rjmp	.+2      	; 0x8892 <vfprintf+0x1c6>
    8890:	00 e0       	ldi	r16, 0x00	; 0
    8892:	8c 85       	ldd	r24, Y+12	; 0x0c
    8894:	8c 70       	andi	r24, 0x0C	; 12
    8896:	19 f0       	breq	.+6      	; 0x889e <vfprintf+0x1d2>
    8898:	01 11       	cpse	r16, r1
    889a:	43 c2       	rjmp	.+1158   	; 0x8d22 <vfprintf+0x656>
    889c:	80 c2       	rjmp	.+1280   	; 0x8d9e <vfprintf+0x6d2>
    889e:	97 fe       	sbrs	r9, 7
    88a0:	10 c0       	rjmp	.+32     	; 0x88c2 <vfprintf+0x1f6>
    88a2:	4c 0c       	add	r4, r12
    88a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    88a6:	f4 ff       	sbrs	r31, 4
    88a8:	04 c0       	rjmp	.+8      	; 0x88b2 <vfprintf+0x1e6>
    88aa:	8a 81       	ldd	r24, Y+2	; 0x02
    88ac:	81 33       	cpi	r24, 0x31	; 49
    88ae:	09 f4       	brne	.+2      	; 0x88b2 <vfprintf+0x1e6>
    88b0:	4a 94       	dec	r4
    88b2:	14 14       	cp	r1, r4
    88b4:	74 f5       	brge	.+92     	; 0x8912 <vfprintf+0x246>
    88b6:	28 e0       	ldi	r18, 0x08	; 8
    88b8:	24 15       	cp	r18, r4
    88ba:	78 f5       	brcc	.+94     	; 0x891a <vfprintf+0x24e>
    88bc:	88 e0       	ldi	r24, 0x08	; 8
    88be:	48 2e       	mov	r4, r24
    88c0:	2c c0       	rjmp	.+88     	; 0x891a <vfprintf+0x24e>
    88c2:	96 fc       	sbrc	r9, 6
    88c4:	2a c0       	rjmp	.+84     	; 0x891a <vfprintf+0x24e>
    88c6:	81 2f       	mov	r24, r17
    88c8:	90 e0       	ldi	r25, 0x00	; 0
    88ca:	8c 15       	cp	r24, r12
    88cc:	9d 05       	cpc	r25, r13
    88ce:	9c f0       	brlt	.+38     	; 0x88f6 <vfprintf+0x22a>
    88d0:	3c ef       	ldi	r19, 0xFC	; 252
    88d2:	c3 16       	cp	r12, r19
    88d4:	3f ef       	ldi	r19, 0xFF	; 255
    88d6:	d3 06       	cpc	r13, r19
    88d8:	74 f0       	brlt	.+28     	; 0x88f6 <vfprintf+0x22a>
    88da:	89 2d       	mov	r24, r9
    88dc:	80 68       	ori	r24, 0x80	; 128
    88de:	98 2e       	mov	r9, r24
    88e0:	0a c0       	rjmp	.+20     	; 0x88f6 <vfprintf+0x22a>
    88e2:	e2 e0       	ldi	r30, 0x02	; 2
    88e4:	f0 e0       	ldi	r31, 0x00	; 0
    88e6:	ec 0f       	add	r30, r28
    88e8:	fd 1f       	adc	r31, r29
    88ea:	e1 0f       	add	r30, r17
    88ec:	f1 1d       	adc	r31, r1
    88ee:	80 81       	ld	r24, Z
    88f0:	80 33       	cpi	r24, 0x30	; 48
    88f2:	19 f4       	brne	.+6      	; 0x88fa <vfprintf+0x22e>
    88f4:	11 50       	subi	r17, 0x01	; 1
    88f6:	11 11       	cpse	r17, r1
    88f8:	f4 cf       	rjmp	.-24     	; 0x88e2 <vfprintf+0x216>
    88fa:	97 fe       	sbrs	r9, 7
    88fc:	0e c0       	rjmp	.+28     	; 0x891a <vfprintf+0x24e>
    88fe:	44 24       	eor	r4, r4
    8900:	43 94       	inc	r4
    8902:	41 0e       	add	r4, r17
    8904:	81 2f       	mov	r24, r17
    8906:	90 e0       	ldi	r25, 0x00	; 0
    8908:	c8 16       	cp	r12, r24
    890a:	d9 06       	cpc	r13, r25
    890c:	2c f4       	brge	.+10     	; 0x8918 <vfprintf+0x24c>
    890e:	1c 19       	sub	r17, r12
    8910:	04 c0       	rjmp	.+8      	; 0x891a <vfprintf+0x24e>
    8912:	44 24       	eor	r4, r4
    8914:	43 94       	inc	r4
    8916:	01 c0       	rjmp	.+2      	; 0x891a <vfprintf+0x24e>
    8918:	10 e0       	ldi	r17, 0x00	; 0
    891a:	97 fe       	sbrs	r9, 7
    891c:	06 c0       	rjmp	.+12     	; 0x892a <vfprintf+0x25e>
    891e:	1c 14       	cp	r1, r12
    8920:	1d 04       	cpc	r1, r13
    8922:	34 f4       	brge	.+12     	; 0x8930 <vfprintf+0x264>
    8924:	c6 01       	movw	r24, r12
    8926:	01 96       	adiw	r24, 0x01	; 1
    8928:	05 c0       	rjmp	.+10     	; 0x8934 <vfprintf+0x268>
    892a:	85 e0       	ldi	r24, 0x05	; 5
    892c:	90 e0       	ldi	r25, 0x00	; 0
    892e:	02 c0       	rjmp	.+4      	; 0x8934 <vfprintf+0x268>
    8930:	81 e0       	ldi	r24, 0x01	; 1
    8932:	90 e0       	ldi	r25, 0x00	; 0
    8934:	01 11       	cpse	r16, r1
    8936:	01 96       	adiw	r24, 0x01	; 1
    8938:	11 23       	and	r17, r17
    893a:	31 f0       	breq	.+12     	; 0x8948 <vfprintf+0x27c>
    893c:	21 2f       	mov	r18, r17
    893e:	30 e0       	ldi	r19, 0x00	; 0
    8940:	2f 5f       	subi	r18, 0xFF	; 255
    8942:	3f 4f       	sbci	r19, 0xFF	; 255
    8944:	82 0f       	add	r24, r18
    8946:	93 1f       	adc	r25, r19
    8948:	25 2d       	mov	r18, r5
    894a:	30 e0       	ldi	r19, 0x00	; 0
    894c:	82 17       	cp	r24, r18
    894e:	93 07       	cpc	r25, r19
    8950:	14 f4       	brge	.+4      	; 0x8956 <vfprintf+0x28a>
    8952:	58 1a       	sub	r5, r24
    8954:	01 c0       	rjmp	.+2      	; 0x8958 <vfprintf+0x28c>
    8956:	51 2c       	mov	r5, r1
    8958:	89 2d       	mov	r24, r9
    895a:	89 70       	andi	r24, 0x09	; 9
    895c:	41 f4       	brne	.+16     	; 0x896e <vfprintf+0x2a2>
    895e:	55 20       	and	r5, r5
    8960:	31 f0       	breq	.+12     	; 0x896e <vfprintf+0x2a2>
    8962:	b7 01       	movw	r22, r14
    8964:	80 e2       	ldi	r24, 0x20	; 32
    8966:	90 e0       	ldi	r25, 0x00	; 0
    8968:	0a d6       	rcall	.+3092   	; 0x957e <fputc>
    896a:	5a 94       	dec	r5
    896c:	f8 cf       	rjmp	.-16     	; 0x895e <vfprintf+0x292>
    896e:	00 23       	and	r16, r16
    8970:	21 f0       	breq	.+8      	; 0x897a <vfprintf+0x2ae>
    8972:	b7 01       	movw	r22, r14
    8974:	80 2f       	mov	r24, r16
    8976:	90 e0       	ldi	r25, 0x00	; 0
    8978:	02 d6       	rcall	.+3076   	; 0x957e <fputc>
    897a:	93 fc       	sbrc	r9, 3
    897c:	08 c0       	rjmp	.+16     	; 0x898e <vfprintf+0x2c2>
    897e:	55 20       	and	r5, r5
    8980:	31 f0       	breq	.+12     	; 0x898e <vfprintf+0x2c2>
    8982:	b7 01       	movw	r22, r14
    8984:	80 e3       	ldi	r24, 0x30	; 48
    8986:	90 e0       	ldi	r25, 0x00	; 0
    8988:	fa d5       	rcall	.+3060   	; 0x957e <fputc>
    898a:	5a 94       	dec	r5
    898c:	f8 cf       	rjmp	.-16     	; 0x897e <vfprintf+0x2b2>
    898e:	97 fe       	sbrs	r9, 7
    8990:	4a c0       	rjmp	.+148    	; 0x8a26 <vfprintf+0x35a>
    8992:	46 01       	movw	r8, r12
    8994:	d7 fe       	sbrs	r13, 7
    8996:	02 c0       	rjmp	.+4      	; 0x899c <vfprintf+0x2d0>
    8998:	81 2c       	mov	r8, r1
    899a:	91 2c       	mov	r9, r1
    899c:	c6 01       	movw	r24, r12
    899e:	88 19       	sub	r24, r8
    89a0:	99 09       	sbc	r25, r9
    89a2:	f3 01       	movw	r30, r6
    89a4:	e8 0f       	add	r30, r24
    89a6:	f9 1f       	adc	r31, r25
    89a8:	fe 87       	std	Y+14, r31	; 0x0e
    89aa:	ed 87       	std	Y+13, r30	; 0x0d
    89ac:	96 01       	movw	r18, r12
    89ae:	24 19       	sub	r18, r4
    89b0:	31 09       	sbc	r19, r1
    89b2:	38 8b       	std	Y+16, r19	; 0x10
    89b4:	2f 87       	std	Y+15, r18	; 0x0f
    89b6:	01 2f       	mov	r16, r17
    89b8:	10 e0       	ldi	r17, 0x00	; 0
    89ba:	11 95       	neg	r17
    89bc:	01 95       	neg	r16
    89be:	11 09       	sbc	r17, r1
    89c0:	3f ef       	ldi	r19, 0xFF	; 255
    89c2:	83 16       	cp	r8, r19
    89c4:	93 06       	cpc	r9, r19
    89c6:	21 f4       	brne	.+8      	; 0x89d0 <vfprintf+0x304>
    89c8:	b7 01       	movw	r22, r14
    89ca:	8e e2       	ldi	r24, 0x2E	; 46
    89cc:	90 e0       	ldi	r25, 0x00	; 0
    89ce:	d7 d5       	rcall	.+2990   	; 0x957e <fputc>
    89d0:	c8 14       	cp	r12, r8
    89d2:	d9 04       	cpc	r13, r9
    89d4:	4c f0       	brlt	.+18     	; 0x89e8 <vfprintf+0x31c>
    89d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    89d8:	98 89       	ldd	r25, Y+16	; 0x10
    89da:	88 15       	cp	r24, r8
    89dc:	99 05       	cpc	r25, r9
    89de:	24 f4       	brge	.+8      	; 0x89e8 <vfprintf+0x31c>
    89e0:	ed 85       	ldd	r30, Y+13	; 0x0d
    89e2:	fe 85       	ldd	r31, Y+14	; 0x0e
    89e4:	81 81       	ldd	r24, Z+1	; 0x01
    89e6:	01 c0       	rjmp	.+2      	; 0x89ea <vfprintf+0x31e>
    89e8:	80 e3       	ldi	r24, 0x30	; 48
    89ea:	f1 e0       	ldi	r31, 0x01	; 1
    89ec:	8f 1a       	sub	r8, r31
    89ee:	91 08       	sbc	r9, r1
    89f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    89f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    89f4:	2f 5f       	subi	r18, 0xFF	; 255
    89f6:	3f 4f       	sbci	r19, 0xFF	; 255
    89f8:	3e 87       	std	Y+14, r19	; 0x0e
    89fa:	2d 87       	std	Y+13, r18	; 0x0d
    89fc:	80 16       	cp	r8, r16
    89fe:	91 06       	cpc	r9, r17
    8a00:	24 f0       	brlt	.+8      	; 0x8a0a <vfprintf+0x33e>
    8a02:	b7 01       	movw	r22, r14
    8a04:	90 e0       	ldi	r25, 0x00	; 0
    8a06:	bb d5       	rcall	.+2934   	; 0x957e <fputc>
    8a08:	db cf       	rjmp	.-74     	; 0x89c0 <vfprintf+0x2f4>
    8a0a:	c8 14       	cp	r12, r8
    8a0c:	d9 04       	cpc	r13, r9
    8a0e:	41 f4       	brne	.+16     	; 0x8a20 <vfprintf+0x354>
    8a10:	9a 81       	ldd	r25, Y+2	; 0x02
    8a12:	96 33       	cpi	r25, 0x36	; 54
    8a14:	20 f4       	brcc	.+8      	; 0x8a1e <vfprintf+0x352>
    8a16:	95 33       	cpi	r25, 0x35	; 53
    8a18:	19 f4       	brne	.+6      	; 0x8a20 <vfprintf+0x354>
    8a1a:	3c 85       	ldd	r19, Y+12	; 0x0c
    8a1c:	34 ff       	sbrs	r19, 4
    8a1e:	81 e3       	ldi	r24, 0x31	; 49
    8a20:	b7 01       	movw	r22, r14
    8a22:	90 e0       	ldi	r25, 0x00	; 0
    8a24:	48 c0       	rjmp	.+144    	; 0x8ab6 <vfprintf+0x3ea>
    8a26:	8a 81       	ldd	r24, Y+2	; 0x02
    8a28:	81 33       	cpi	r24, 0x31	; 49
    8a2a:	19 f0       	breq	.+6      	; 0x8a32 <vfprintf+0x366>
    8a2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    8a2e:	9f 7e       	andi	r25, 0xEF	; 239
    8a30:	9c 87       	std	Y+12, r25	; 0x0c
    8a32:	b7 01       	movw	r22, r14
    8a34:	90 e0       	ldi	r25, 0x00	; 0
    8a36:	a3 d5       	rcall	.+2886   	; 0x957e <fputc>
    8a38:	11 11       	cpse	r17, r1
    8a3a:	05 c0       	rjmp	.+10     	; 0x8a46 <vfprintf+0x37a>
    8a3c:	94 fc       	sbrc	r9, 4
    8a3e:	16 c0       	rjmp	.+44     	; 0x8a6c <vfprintf+0x3a0>
    8a40:	85 e6       	ldi	r24, 0x65	; 101
    8a42:	90 e0       	ldi	r25, 0x00	; 0
    8a44:	15 c0       	rjmp	.+42     	; 0x8a70 <vfprintf+0x3a4>
    8a46:	b7 01       	movw	r22, r14
    8a48:	8e e2       	ldi	r24, 0x2E	; 46
    8a4a:	90 e0       	ldi	r25, 0x00	; 0
    8a4c:	98 d5       	rcall	.+2864   	; 0x957e <fputc>
    8a4e:	1e 5f       	subi	r17, 0xFE	; 254
    8a50:	82 e0       	ldi	r24, 0x02	; 2
    8a52:	01 e0       	ldi	r16, 0x01	; 1
    8a54:	08 0f       	add	r16, r24
    8a56:	f3 01       	movw	r30, r6
    8a58:	e8 0f       	add	r30, r24
    8a5a:	f1 1d       	adc	r31, r1
    8a5c:	80 81       	ld	r24, Z
    8a5e:	b7 01       	movw	r22, r14
    8a60:	90 e0       	ldi	r25, 0x00	; 0
    8a62:	8d d5       	rcall	.+2842   	; 0x957e <fputc>
    8a64:	80 2f       	mov	r24, r16
    8a66:	01 13       	cpse	r16, r17
    8a68:	f4 cf       	rjmp	.-24     	; 0x8a52 <vfprintf+0x386>
    8a6a:	e8 cf       	rjmp	.-48     	; 0x8a3c <vfprintf+0x370>
    8a6c:	85 e4       	ldi	r24, 0x45	; 69
    8a6e:	90 e0       	ldi	r25, 0x00	; 0
    8a70:	b7 01       	movw	r22, r14
    8a72:	85 d5       	rcall	.+2826   	; 0x957e <fputc>
    8a74:	d7 fc       	sbrc	r13, 7
    8a76:	06 c0       	rjmp	.+12     	; 0x8a84 <vfprintf+0x3b8>
    8a78:	c1 14       	cp	r12, r1
    8a7a:	d1 04       	cpc	r13, r1
    8a7c:	41 f4       	brne	.+16     	; 0x8a8e <vfprintf+0x3c2>
    8a7e:	ec 85       	ldd	r30, Y+12	; 0x0c
    8a80:	e4 ff       	sbrs	r30, 4
    8a82:	05 c0       	rjmp	.+10     	; 0x8a8e <vfprintf+0x3c2>
    8a84:	d1 94       	neg	r13
    8a86:	c1 94       	neg	r12
    8a88:	d1 08       	sbc	r13, r1
    8a8a:	8d e2       	ldi	r24, 0x2D	; 45
    8a8c:	01 c0       	rjmp	.+2      	; 0x8a90 <vfprintf+0x3c4>
    8a8e:	8b e2       	ldi	r24, 0x2B	; 43
    8a90:	b7 01       	movw	r22, r14
    8a92:	90 e0       	ldi	r25, 0x00	; 0
    8a94:	74 d5       	rcall	.+2792   	; 0x957e <fputc>
    8a96:	80 e3       	ldi	r24, 0x30	; 48
    8a98:	2a e0       	ldi	r18, 0x0A	; 10
    8a9a:	c2 16       	cp	r12, r18
    8a9c:	d1 04       	cpc	r13, r1
    8a9e:	2c f0       	brlt	.+10     	; 0x8aaa <vfprintf+0x3de>
    8aa0:	8f 5f       	subi	r24, 0xFF	; 255
    8aa2:	fa e0       	ldi	r31, 0x0A	; 10
    8aa4:	cf 1a       	sub	r12, r31
    8aa6:	d1 08       	sbc	r13, r1
    8aa8:	f7 cf       	rjmp	.-18     	; 0x8a98 <vfprintf+0x3cc>
    8aaa:	b7 01       	movw	r22, r14
    8aac:	90 e0       	ldi	r25, 0x00	; 0
    8aae:	67 d5       	rcall	.+2766   	; 0x957e <fputc>
    8ab0:	b7 01       	movw	r22, r14
    8ab2:	c6 01       	movw	r24, r12
    8ab4:	c0 96       	adiw	r24, 0x30	; 48
    8ab6:	63 d5       	rcall	.+2758   	; 0x957e <fputc>
    8ab8:	49 c1       	rjmp	.+658    	; 0x8d4c <vfprintf+0x680>
    8aba:	83 36       	cpi	r24, 0x63	; 99
    8abc:	31 f0       	breq	.+12     	; 0x8aca <vfprintf+0x3fe>
    8abe:	83 37       	cpi	r24, 0x73	; 115
    8ac0:	79 f0       	breq	.+30     	; 0x8ae0 <vfprintf+0x414>
    8ac2:	83 35       	cpi	r24, 0x53	; 83
    8ac4:	09 f0       	breq	.+2      	; 0x8ac8 <vfprintf+0x3fc>
    8ac6:	52 c0       	rjmp	.+164    	; 0x8b6c <vfprintf+0x4a0>
    8ac8:	1f c0       	rjmp	.+62     	; 0x8b08 <vfprintf+0x43c>
    8aca:	56 01       	movw	r10, r12
    8acc:	32 e0       	ldi	r19, 0x02	; 2
    8ace:	a3 0e       	add	r10, r19
    8ad0:	b1 1c       	adc	r11, r1
    8ad2:	f6 01       	movw	r30, r12
    8ad4:	80 81       	ld	r24, Z
    8ad6:	89 83       	std	Y+1, r24	; 0x01
    8ad8:	01 e0       	ldi	r16, 0x01	; 1
    8ada:	10 e0       	ldi	r17, 0x00	; 0
    8adc:	63 01       	movw	r12, r6
    8ade:	11 c0       	rjmp	.+34     	; 0x8b02 <vfprintf+0x436>
    8ae0:	56 01       	movw	r10, r12
    8ae2:	f2 e0       	ldi	r31, 0x02	; 2
    8ae4:	af 0e       	add	r10, r31
    8ae6:	b1 1c       	adc	r11, r1
    8ae8:	f6 01       	movw	r30, r12
    8aea:	c0 80       	ld	r12, Z
    8aec:	d1 80       	ldd	r13, Z+1	; 0x01
    8aee:	96 fe       	sbrs	r9, 6
    8af0:	03 c0       	rjmp	.+6      	; 0x8af8 <vfprintf+0x42c>
    8af2:	61 2f       	mov	r22, r17
    8af4:	70 e0       	ldi	r23, 0x00	; 0
    8af6:	02 c0       	rjmp	.+4      	; 0x8afc <vfprintf+0x430>
    8af8:	6f ef       	ldi	r22, 0xFF	; 255
    8afa:	7f ef       	ldi	r23, 0xFF	; 255
    8afc:	c6 01       	movw	r24, r12
    8afe:	34 d5       	rcall	.+2664   	; 0x9568 <strnlen>
    8b00:	8c 01       	movw	r16, r24
    8b02:	f9 2d       	mov	r31, r9
    8b04:	ff 77       	andi	r31, 0x7F	; 127
    8b06:	13 c0       	rjmp	.+38     	; 0x8b2e <vfprintf+0x462>
    8b08:	56 01       	movw	r10, r12
    8b0a:	22 e0       	ldi	r18, 0x02	; 2
    8b0c:	a2 0e       	add	r10, r18
    8b0e:	b1 1c       	adc	r11, r1
    8b10:	f6 01       	movw	r30, r12
    8b12:	c0 80       	ld	r12, Z
    8b14:	d1 80       	ldd	r13, Z+1	; 0x01
    8b16:	96 fe       	sbrs	r9, 6
    8b18:	03 c0       	rjmp	.+6      	; 0x8b20 <vfprintf+0x454>
    8b1a:	61 2f       	mov	r22, r17
    8b1c:	70 e0       	ldi	r23, 0x00	; 0
    8b1e:	02 c0       	rjmp	.+4      	; 0x8b24 <vfprintf+0x458>
    8b20:	6f ef       	ldi	r22, 0xFF	; 255
    8b22:	7f ef       	ldi	r23, 0xFF	; 255
    8b24:	c6 01       	movw	r24, r12
    8b26:	b6 d4       	rcall	.+2412   	; 0x9494 <strnlen_P>
    8b28:	8c 01       	movw	r16, r24
    8b2a:	f9 2d       	mov	r31, r9
    8b2c:	f0 68       	ori	r31, 0x80	; 128
    8b2e:	9f 2e       	mov	r9, r31
    8b30:	f3 fd       	sbrc	r31, 3
    8b32:	18 c0       	rjmp	.+48     	; 0x8b64 <vfprintf+0x498>
    8b34:	85 2d       	mov	r24, r5
    8b36:	90 e0       	ldi	r25, 0x00	; 0
    8b38:	08 17       	cp	r16, r24
    8b3a:	19 07       	cpc	r17, r25
    8b3c:	98 f4       	brcc	.+38     	; 0x8b64 <vfprintf+0x498>
    8b3e:	b7 01       	movw	r22, r14
    8b40:	80 e2       	ldi	r24, 0x20	; 32
    8b42:	90 e0       	ldi	r25, 0x00	; 0
    8b44:	1c d5       	rcall	.+2616   	; 0x957e <fputc>
    8b46:	5a 94       	dec	r5
    8b48:	f5 cf       	rjmp	.-22     	; 0x8b34 <vfprintf+0x468>
    8b4a:	f6 01       	movw	r30, r12
    8b4c:	97 fc       	sbrc	r9, 7
    8b4e:	85 91       	lpm	r24, Z+
    8b50:	97 fe       	sbrs	r9, 7
    8b52:	81 91       	ld	r24, Z+
    8b54:	6f 01       	movw	r12, r30
    8b56:	b7 01       	movw	r22, r14
    8b58:	90 e0       	ldi	r25, 0x00	; 0
    8b5a:	11 d5       	rcall	.+2594   	; 0x957e <fputc>
    8b5c:	51 10       	cpse	r5, r1
    8b5e:	5a 94       	dec	r5
    8b60:	01 50       	subi	r16, 0x01	; 1
    8b62:	11 09       	sbc	r17, r1
    8b64:	01 15       	cp	r16, r1
    8b66:	11 05       	cpc	r17, r1
    8b68:	81 f7       	brne	.-32     	; 0x8b4a <vfprintf+0x47e>
    8b6a:	f0 c0       	rjmp	.+480    	; 0x8d4c <vfprintf+0x680>
    8b6c:	84 36       	cpi	r24, 0x64	; 100
    8b6e:	11 f0       	breq	.+4      	; 0x8b74 <vfprintf+0x4a8>
    8b70:	89 36       	cpi	r24, 0x69	; 105
    8b72:	59 f5       	brne	.+86     	; 0x8bca <vfprintf+0x4fe>
    8b74:	56 01       	movw	r10, r12
    8b76:	97 fe       	sbrs	r9, 7
    8b78:	09 c0       	rjmp	.+18     	; 0x8b8c <vfprintf+0x4c0>
    8b7a:	24 e0       	ldi	r18, 0x04	; 4
    8b7c:	a2 0e       	add	r10, r18
    8b7e:	b1 1c       	adc	r11, r1
    8b80:	f6 01       	movw	r30, r12
    8b82:	60 81       	ld	r22, Z
    8b84:	71 81       	ldd	r23, Z+1	; 0x01
    8b86:	82 81       	ldd	r24, Z+2	; 0x02
    8b88:	93 81       	ldd	r25, Z+3	; 0x03
    8b8a:	0a c0       	rjmp	.+20     	; 0x8ba0 <vfprintf+0x4d4>
    8b8c:	f2 e0       	ldi	r31, 0x02	; 2
    8b8e:	af 0e       	add	r10, r31
    8b90:	b1 1c       	adc	r11, r1
    8b92:	f6 01       	movw	r30, r12
    8b94:	60 81       	ld	r22, Z
    8b96:	71 81       	ldd	r23, Z+1	; 0x01
    8b98:	07 2e       	mov	r0, r23
    8b9a:	00 0c       	add	r0, r0
    8b9c:	88 0b       	sbc	r24, r24
    8b9e:	99 0b       	sbc	r25, r25
    8ba0:	f9 2d       	mov	r31, r9
    8ba2:	ff 76       	andi	r31, 0x6F	; 111
    8ba4:	9f 2e       	mov	r9, r31
    8ba6:	97 ff       	sbrs	r25, 7
    8ba8:	09 c0       	rjmp	.+18     	; 0x8bbc <vfprintf+0x4f0>
    8baa:	90 95       	com	r25
    8bac:	80 95       	com	r24
    8bae:	70 95       	com	r23
    8bb0:	61 95       	neg	r22
    8bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    8bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    8bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    8bb8:	f0 68       	ori	r31, 0x80	; 128
    8bba:	9f 2e       	mov	r9, r31
    8bbc:	2a e0       	ldi	r18, 0x0A	; 10
    8bbe:	30 e0       	ldi	r19, 0x00	; 0
    8bc0:	a3 01       	movw	r20, r6
    8bc2:	8a d5       	rcall	.+2836   	; 0x96d8 <__ultoa_invert>
    8bc4:	c8 2e       	mov	r12, r24
    8bc6:	c6 18       	sub	r12, r6
    8bc8:	3e c0       	rjmp	.+124    	; 0x8c46 <vfprintf+0x57a>
    8bca:	09 2d       	mov	r16, r9
    8bcc:	85 37       	cpi	r24, 0x75	; 117
    8bce:	21 f4       	brne	.+8      	; 0x8bd8 <vfprintf+0x50c>
    8bd0:	0f 7e       	andi	r16, 0xEF	; 239
    8bd2:	2a e0       	ldi	r18, 0x0A	; 10
    8bd4:	30 e0       	ldi	r19, 0x00	; 0
    8bd6:	1d c0       	rjmp	.+58     	; 0x8c12 <vfprintf+0x546>
    8bd8:	09 7f       	andi	r16, 0xF9	; 249
    8bda:	8f 36       	cpi	r24, 0x6F	; 111
    8bdc:	91 f0       	breq	.+36     	; 0x8c02 <vfprintf+0x536>
    8bde:	18 f4       	brcc	.+6      	; 0x8be6 <vfprintf+0x51a>
    8be0:	88 35       	cpi	r24, 0x58	; 88
    8be2:	59 f0       	breq	.+22     	; 0x8bfa <vfprintf+0x52e>
    8be4:	bc c0       	rjmp	.+376    	; 0x8d5e <vfprintf+0x692>
    8be6:	80 37       	cpi	r24, 0x70	; 112
    8be8:	19 f0       	breq	.+6      	; 0x8bf0 <vfprintf+0x524>
    8bea:	88 37       	cpi	r24, 0x78	; 120
    8bec:	11 f0       	breq	.+4      	; 0x8bf2 <vfprintf+0x526>
    8bee:	b7 c0       	rjmp	.+366    	; 0x8d5e <vfprintf+0x692>
    8bf0:	00 61       	ori	r16, 0x10	; 16
    8bf2:	04 ff       	sbrs	r16, 4
    8bf4:	09 c0       	rjmp	.+18     	; 0x8c08 <vfprintf+0x53c>
    8bf6:	04 60       	ori	r16, 0x04	; 4
    8bf8:	07 c0       	rjmp	.+14     	; 0x8c08 <vfprintf+0x53c>
    8bfa:	94 fe       	sbrs	r9, 4
    8bfc:	08 c0       	rjmp	.+16     	; 0x8c0e <vfprintf+0x542>
    8bfe:	06 60       	ori	r16, 0x06	; 6
    8c00:	06 c0       	rjmp	.+12     	; 0x8c0e <vfprintf+0x542>
    8c02:	28 e0       	ldi	r18, 0x08	; 8
    8c04:	30 e0       	ldi	r19, 0x00	; 0
    8c06:	05 c0       	rjmp	.+10     	; 0x8c12 <vfprintf+0x546>
    8c08:	20 e1       	ldi	r18, 0x10	; 16
    8c0a:	30 e0       	ldi	r19, 0x00	; 0
    8c0c:	02 c0       	rjmp	.+4      	; 0x8c12 <vfprintf+0x546>
    8c0e:	20 e1       	ldi	r18, 0x10	; 16
    8c10:	32 e0       	ldi	r19, 0x02	; 2
    8c12:	56 01       	movw	r10, r12
    8c14:	07 ff       	sbrs	r16, 7
    8c16:	09 c0       	rjmp	.+18     	; 0x8c2a <vfprintf+0x55e>
    8c18:	84 e0       	ldi	r24, 0x04	; 4
    8c1a:	a8 0e       	add	r10, r24
    8c1c:	b1 1c       	adc	r11, r1
    8c1e:	f6 01       	movw	r30, r12
    8c20:	60 81       	ld	r22, Z
    8c22:	71 81       	ldd	r23, Z+1	; 0x01
    8c24:	82 81       	ldd	r24, Z+2	; 0x02
    8c26:	93 81       	ldd	r25, Z+3	; 0x03
    8c28:	08 c0       	rjmp	.+16     	; 0x8c3a <vfprintf+0x56e>
    8c2a:	f2 e0       	ldi	r31, 0x02	; 2
    8c2c:	af 0e       	add	r10, r31
    8c2e:	b1 1c       	adc	r11, r1
    8c30:	f6 01       	movw	r30, r12
    8c32:	60 81       	ld	r22, Z
    8c34:	71 81       	ldd	r23, Z+1	; 0x01
    8c36:	80 e0       	ldi	r24, 0x00	; 0
    8c38:	90 e0       	ldi	r25, 0x00	; 0
    8c3a:	a3 01       	movw	r20, r6
    8c3c:	4d d5       	rcall	.+2714   	; 0x96d8 <__ultoa_invert>
    8c3e:	c8 2e       	mov	r12, r24
    8c40:	c6 18       	sub	r12, r6
    8c42:	0f 77       	andi	r16, 0x7F	; 127
    8c44:	90 2e       	mov	r9, r16
    8c46:	96 fe       	sbrs	r9, 6
    8c48:	0b c0       	rjmp	.+22     	; 0x8c60 <vfprintf+0x594>
    8c4a:	09 2d       	mov	r16, r9
    8c4c:	0e 7f       	andi	r16, 0xFE	; 254
    8c4e:	c1 16       	cp	r12, r17
    8c50:	50 f4       	brcc	.+20     	; 0x8c66 <vfprintf+0x59a>
    8c52:	94 fe       	sbrs	r9, 4
    8c54:	0a c0       	rjmp	.+20     	; 0x8c6a <vfprintf+0x59e>
    8c56:	92 fc       	sbrc	r9, 2
    8c58:	08 c0       	rjmp	.+16     	; 0x8c6a <vfprintf+0x59e>
    8c5a:	09 2d       	mov	r16, r9
    8c5c:	0e 7e       	andi	r16, 0xEE	; 238
    8c5e:	05 c0       	rjmp	.+10     	; 0x8c6a <vfprintf+0x59e>
    8c60:	dc 2c       	mov	r13, r12
    8c62:	09 2d       	mov	r16, r9
    8c64:	03 c0       	rjmp	.+6      	; 0x8c6c <vfprintf+0x5a0>
    8c66:	dc 2c       	mov	r13, r12
    8c68:	01 c0       	rjmp	.+2      	; 0x8c6c <vfprintf+0x5a0>
    8c6a:	d1 2e       	mov	r13, r17
    8c6c:	04 ff       	sbrs	r16, 4
    8c6e:	0d c0       	rjmp	.+26     	; 0x8c8a <vfprintf+0x5be>
    8c70:	fe 01       	movw	r30, r28
    8c72:	ec 0d       	add	r30, r12
    8c74:	f1 1d       	adc	r31, r1
    8c76:	80 81       	ld	r24, Z
    8c78:	80 33       	cpi	r24, 0x30	; 48
    8c7a:	11 f4       	brne	.+4      	; 0x8c80 <vfprintf+0x5b4>
    8c7c:	09 7e       	andi	r16, 0xE9	; 233
    8c7e:	09 c0       	rjmp	.+18     	; 0x8c92 <vfprintf+0x5c6>
    8c80:	02 ff       	sbrs	r16, 2
    8c82:	06 c0       	rjmp	.+12     	; 0x8c90 <vfprintf+0x5c4>
    8c84:	d3 94       	inc	r13
    8c86:	d3 94       	inc	r13
    8c88:	04 c0       	rjmp	.+8      	; 0x8c92 <vfprintf+0x5c6>
    8c8a:	80 2f       	mov	r24, r16
    8c8c:	86 78       	andi	r24, 0x86	; 134
    8c8e:	09 f0       	breq	.+2      	; 0x8c92 <vfprintf+0x5c6>
    8c90:	d3 94       	inc	r13
    8c92:	03 fd       	sbrc	r16, 3
    8c94:	10 c0       	rjmp	.+32     	; 0x8cb6 <vfprintf+0x5ea>
    8c96:	00 ff       	sbrs	r16, 0
    8c98:	06 c0       	rjmp	.+12     	; 0x8ca6 <vfprintf+0x5da>
    8c9a:	1c 2d       	mov	r17, r12
    8c9c:	d5 14       	cp	r13, r5
    8c9e:	78 f4       	brcc	.+30     	; 0x8cbe <vfprintf+0x5f2>
    8ca0:	15 0d       	add	r17, r5
    8ca2:	1d 19       	sub	r17, r13
    8ca4:	0c c0       	rjmp	.+24     	; 0x8cbe <vfprintf+0x5f2>
    8ca6:	d5 14       	cp	r13, r5
    8ca8:	50 f4       	brcc	.+20     	; 0x8cbe <vfprintf+0x5f2>
    8caa:	b7 01       	movw	r22, r14
    8cac:	80 e2       	ldi	r24, 0x20	; 32
    8cae:	90 e0       	ldi	r25, 0x00	; 0
    8cb0:	66 d4       	rcall	.+2252   	; 0x957e <fputc>
    8cb2:	d3 94       	inc	r13
    8cb4:	f8 cf       	rjmp	.-16     	; 0x8ca6 <vfprintf+0x5da>
    8cb6:	d5 14       	cp	r13, r5
    8cb8:	10 f4       	brcc	.+4      	; 0x8cbe <vfprintf+0x5f2>
    8cba:	5d 18       	sub	r5, r13
    8cbc:	01 c0       	rjmp	.+2      	; 0x8cc0 <vfprintf+0x5f4>
    8cbe:	51 2c       	mov	r5, r1
    8cc0:	04 ff       	sbrs	r16, 4
    8cc2:	0f c0       	rjmp	.+30     	; 0x8ce2 <vfprintf+0x616>
    8cc4:	b7 01       	movw	r22, r14
    8cc6:	80 e3       	ldi	r24, 0x30	; 48
    8cc8:	90 e0       	ldi	r25, 0x00	; 0
    8cca:	59 d4       	rcall	.+2226   	; 0x957e <fputc>
    8ccc:	02 ff       	sbrs	r16, 2
    8cce:	16 c0       	rjmp	.+44     	; 0x8cfc <vfprintf+0x630>
    8cd0:	01 fd       	sbrc	r16, 1
    8cd2:	03 c0       	rjmp	.+6      	; 0x8cda <vfprintf+0x60e>
    8cd4:	88 e7       	ldi	r24, 0x78	; 120
    8cd6:	90 e0       	ldi	r25, 0x00	; 0
    8cd8:	02 c0       	rjmp	.+4      	; 0x8cde <vfprintf+0x612>
    8cda:	88 e5       	ldi	r24, 0x58	; 88
    8cdc:	90 e0       	ldi	r25, 0x00	; 0
    8cde:	b7 01       	movw	r22, r14
    8ce0:	0c c0       	rjmp	.+24     	; 0x8cfa <vfprintf+0x62e>
    8ce2:	80 2f       	mov	r24, r16
    8ce4:	86 78       	andi	r24, 0x86	; 134
    8ce6:	51 f0       	breq	.+20     	; 0x8cfc <vfprintf+0x630>
    8ce8:	01 ff       	sbrs	r16, 1
    8cea:	02 c0       	rjmp	.+4      	; 0x8cf0 <vfprintf+0x624>
    8cec:	8b e2       	ldi	r24, 0x2B	; 43
    8cee:	01 c0       	rjmp	.+2      	; 0x8cf2 <vfprintf+0x626>
    8cf0:	80 e2       	ldi	r24, 0x20	; 32
    8cf2:	07 fd       	sbrc	r16, 7
    8cf4:	8d e2       	ldi	r24, 0x2D	; 45
    8cf6:	b7 01       	movw	r22, r14
    8cf8:	90 e0       	ldi	r25, 0x00	; 0
    8cfa:	41 d4       	rcall	.+2178   	; 0x957e <fputc>
    8cfc:	c1 16       	cp	r12, r17
    8cfe:	30 f4       	brcc	.+12     	; 0x8d0c <vfprintf+0x640>
    8d00:	b7 01       	movw	r22, r14
    8d02:	80 e3       	ldi	r24, 0x30	; 48
    8d04:	90 e0       	ldi	r25, 0x00	; 0
    8d06:	3b d4       	rcall	.+2166   	; 0x957e <fputc>
    8d08:	11 50       	subi	r17, 0x01	; 1
    8d0a:	f8 cf       	rjmp	.-16     	; 0x8cfc <vfprintf+0x630>
    8d0c:	ca 94       	dec	r12
    8d0e:	f3 01       	movw	r30, r6
    8d10:	ec 0d       	add	r30, r12
    8d12:	f1 1d       	adc	r31, r1
    8d14:	80 81       	ld	r24, Z
    8d16:	b7 01       	movw	r22, r14
    8d18:	90 e0       	ldi	r25, 0x00	; 0
    8d1a:	31 d4       	rcall	.+2146   	; 0x957e <fputc>
    8d1c:	c1 10       	cpse	r12, r1
    8d1e:	f6 cf       	rjmp	.-20     	; 0x8d0c <vfprintf+0x640>
    8d20:	15 c0       	rjmp	.+42     	; 0x8d4c <vfprintf+0x680>
    8d22:	f4 e0       	ldi	r31, 0x04	; 4
    8d24:	f5 15       	cp	r31, r5
    8d26:	50 f5       	brcc	.+84     	; 0x8d7c <vfprintf+0x6b0>
    8d28:	84 e0       	ldi	r24, 0x04	; 4
    8d2a:	58 1a       	sub	r5, r24
    8d2c:	93 fe       	sbrs	r9, 3
    8d2e:	1e c0       	rjmp	.+60     	; 0x8d6c <vfprintf+0x6a0>
    8d30:	01 11       	cpse	r16, r1
    8d32:	25 c0       	rjmp	.+74     	; 0x8d7e <vfprintf+0x6b2>
    8d34:	2c 85       	ldd	r18, Y+12	; 0x0c
    8d36:	23 ff       	sbrs	r18, 3
    8d38:	27 c0       	rjmp	.+78     	; 0x8d88 <vfprintf+0x6bc>
    8d3a:	0a e9       	ldi	r16, 0x9A	; 154
    8d3c:	11 e0       	ldi	r17, 0x01	; 1
    8d3e:	39 2d       	mov	r19, r9
    8d40:	30 71       	andi	r19, 0x10	; 16
    8d42:	93 2e       	mov	r9, r19
    8d44:	f8 01       	movw	r30, r16
    8d46:	84 91       	lpm	r24, Z
    8d48:	81 11       	cpse	r24, r1
    8d4a:	21 c0       	rjmp	.+66     	; 0x8d8e <vfprintf+0x6c2>
    8d4c:	55 20       	and	r5, r5
    8d4e:	09 f4       	brne	.+2      	; 0x8d52 <vfprintf+0x686>
    8d50:	fc cc       	rjmp	.-1544   	; 0x874a <vfprintf+0x7e>
    8d52:	b7 01       	movw	r22, r14
    8d54:	80 e2       	ldi	r24, 0x20	; 32
    8d56:	90 e0       	ldi	r25, 0x00	; 0
    8d58:	12 d4       	rcall	.+2084   	; 0x957e <fputc>
    8d5a:	5a 94       	dec	r5
    8d5c:	f7 cf       	rjmp	.-18     	; 0x8d4c <vfprintf+0x680>
    8d5e:	f7 01       	movw	r30, r14
    8d60:	86 81       	ldd	r24, Z+6	; 0x06
    8d62:	97 81       	ldd	r25, Z+7	; 0x07
    8d64:	23 c0       	rjmp	.+70     	; 0x8dac <vfprintf+0x6e0>
    8d66:	8f ef       	ldi	r24, 0xFF	; 255
    8d68:	9f ef       	ldi	r25, 0xFF	; 255
    8d6a:	20 c0       	rjmp	.+64     	; 0x8dac <vfprintf+0x6e0>
    8d6c:	b7 01       	movw	r22, r14
    8d6e:	80 e2       	ldi	r24, 0x20	; 32
    8d70:	90 e0       	ldi	r25, 0x00	; 0
    8d72:	05 d4       	rcall	.+2058   	; 0x957e <fputc>
    8d74:	5a 94       	dec	r5
    8d76:	51 10       	cpse	r5, r1
    8d78:	f9 cf       	rjmp	.-14     	; 0x8d6c <vfprintf+0x6a0>
    8d7a:	da cf       	rjmp	.-76     	; 0x8d30 <vfprintf+0x664>
    8d7c:	51 2c       	mov	r5, r1
    8d7e:	b7 01       	movw	r22, r14
    8d80:	80 2f       	mov	r24, r16
    8d82:	90 e0       	ldi	r25, 0x00	; 0
    8d84:	fc d3       	rcall	.+2040   	; 0x957e <fputc>
    8d86:	d6 cf       	rjmp	.-84     	; 0x8d34 <vfprintf+0x668>
    8d88:	0e e9       	ldi	r16, 0x9E	; 158
    8d8a:	11 e0       	ldi	r17, 0x01	; 1
    8d8c:	d8 cf       	rjmp	.-80     	; 0x8d3e <vfprintf+0x672>
    8d8e:	91 10       	cpse	r9, r1
    8d90:	80 52       	subi	r24, 0x20	; 32
    8d92:	b7 01       	movw	r22, r14
    8d94:	90 e0       	ldi	r25, 0x00	; 0
    8d96:	f3 d3       	rcall	.+2022   	; 0x957e <fputc>
    8d98:	0f 5f       	subi	r16, 0xFF	; 255
    8d9a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d9c:	d3 cf       	rjmp	.-90     	; 0x8d44 <vfprintf+0x678>
    8d9e:	23 e0       	ldi	r18, 0x03	; 3
    8da0:	25 15       	cp	r18, r5
    8da2:	10 f4       	brcc	.+4      	; 0x8da8 <vfprintf+0x6dc>
    8da4:	83 e0       	ldi	r24, 0x03	; 3
    8da6:	c1 cf       	rjmp	.-126    	; 0x8d2a <vfprintf+0x65e>
    8da8:	51 2c       	mov	r5, r1
    8daa:	c4 cf       	rjmp	.-120    	; 0x8d34 <vfprintf+0x668>
    8dac:	60 96       	adiw	r28, 0x10	; 16
    8dae:	0f b6       	in	r0, 0x3f	; 63
    8db0:	f8 94       	cli
    8db2:	de bf       	out	0x3e, r29	; 62
    8db4:	0f be       	out	0x3f, r0	; 63
    8db6:	cd bf       	out	0x3d, r28	; 61
    8db8:	df 91       	pop	r29
    8dba:	cf 91       	pop	r28
    8dbc:	1f 91       	pop	r17
    8dbe:	0f 91       	pop	r16
    8dc0:	ff 90       	pop	r15
    8dc2:	ef 90       	pop	r14
    8dc4:	df 90       	pop	r13
    8dc6:	cf 90       	pop	r12
    8dc8:	bf 90       	pop	r11
    8dca:	af 90       	pop	r10
    8dcc:	9f 90       	pop	r9
    8dce:	8f 90       	pop	r8
    8dd0:	7f 90       	pop	r7
    8dd2:	6f 90       	pop	r6
    8dd4:	5f 90       	pop	r5
    8dd6:	4f 90       	pop	r4
    8dd8:	3f 90       	pop	r3
    8dda:	2f 90       	pop	r2
    8ddc:	08 95       	ret

00008dde <__subsf3>:
    8dde:	50 58       	subi	r21, 0x80	; 128

00008de0 <__addsf3>:
    8de0:	bb 27       	eor	r27, r27
    8de2:	aa 27       	eor	r26, r26
    8de4:	13 d0       	rcall	.+38     	; 0x8e0c <__addsf3x>
    8de6:	0c 94 55 34 	jmp	0x68aa	; 0x68aa <__fp_round>
    8dea:	0e 94 47 34 	call	0x688e	; 0x688e <__fp_pscA>
    8dee:	38 f0       	brcs	.+14     	; 0x8dfe <__addsf3+0x1e>
    8df0:	0e 94 4e 34 	call	0x689c	; 0x689c <__fp_pscB>
    8df4:	20 f0       	brcs	.+8      	; 0x8dfe <__addsf3+0x1e>
    8df6:	39 f4       	brne	.+14     	; 0x8e06 <__addsf3+0x26>
    8df8:	9f 3f       	cpi	r25, 0xFF	; 255
    8dfa:	19 f4       	brne	.+6      	; 0x8e02 <__addsf3+0x22>
    8dfc:	26 f4       	brtc	.+8      	; 0x8e06 <__addsf3+0x26>
    8dfe:	0c 94 44 34 	jmp	0x6888	; 0x6888 <__fp_nan>
    8e02:	0e f4       	brtc	.+2      	; 0x8e06 <__addsf3+0x26>
    8e04:	e0 95       	com	r30
    8e06:	e7 fb       	bst	r30, 7
    8e08:	0c 94 3e 34 	jmp	0x687c	; 0x687c <__fp_inf>

00008e0c <__addsf3x>:
    8e0c:	e9 2f       	mov	r30, r25
    8e0e:	0e 94 ae 33 	call	0x675c	; 0x675c <__fp_split3>
    8e12:	58 f3       	brcs	.-42     	; 0x8dea <__addsf3+0xa>
    8e14:	ba 17       	cp	r27, r26
    8e16:	62 07       	cpc	r22, r18
    8e18:	73 07       	cpc	r23, r19
    8e1a:	84 07       	cpc	r24, r20
    8e1c:	95 07       	cpc	r25, r21
    8e1e:	20 f0       	brcs	.+8      	; 0x8e28 <__addsf3x+0x1c>
    8e20:	79 f4       	brne	.+30     	; 0x8e40 <__addsf3x+0x34>
    8e22:	a6 f5       	brtc	.+104    	; 0x8e8c <__addsf3x+0x80>
    8e24:	0c 94 d0 33 	jmp	0x67a0	; 0x67a0 <__fp_zero>
    8e28:	0e f4       	brtc	.+2      	; 0x8e2c <__addsf3x+0x20>
    8e2a:	e0 95       	com	r30
    8e2c:	0b 2e       	mov	r0, r27
    8e2e:	ba 2f       	mov	r27, r26
    8e30:	a0 2d       	mov	r26, r0
    8e32:	0b 01       	movw	r0, r22
    8e34:	b9 01       	movw	r22, r18
    8e36:	90 01       	movw	r18, r0
    8e38:	0c 01       	movw	r0, r24
    8e3a:	ca 01       	movw	r24, r20
    8e3c:	a0 01       	movw	r20, r0
    8e3e:	11 24       	eor	r1, r1
    8e40:	ff 27       	eor	r31, r31
    8e42:	59 1b       	sub	r21, r25
    8e44:	99 f0       	breq	.+38     	; 0x8e6c <__addsf3x+0x60>
    8e46:	59 3f       	cpi	r21, 0xF9	; 249
    8e48:	50 f4       	brcc	.+20     	; 0x8e5e <__addsf3x+0x52>
    8e4a:	50 3e       	cpi	r21, 0xE0	; 224
    8e4c:	68 f1       	brcs	.+90     	; 0x8ea8 <__addsf3x+0x9c>
    8e4e:	1a 16       	cp	r1, r26
    8e50:	f0 40       	sbci	r31, 0x00	; 0
    8e52:	a2 2f       	mov	r26, r18
    8e54:	23 2f       	mov	r18, r19
    8e56:	34 2f       	mov	r19, r20
    8e58:	44 27       	eor	r20, r20
    8e5a:	58 5f       	subi	r21, 0xF8	; 248
    8e5c:	f3 cf       	rjmp	.-26     	; 0x8e44 <__addsf3x+0x38>
    8e5e:	46 95       	lsr	r20
    8e60:	37 95       	ror	r19
    8e62:	27 95       	ror	r18
    8e64:	a7 95       	ror	r26
    8e66:	f0 40       	sbci	r31, 0x00	; 0
    8e68:	53 95       	inc	r21
    8e6a:	c9 f7       	brne	.-14     	; 0x8e5e <__addsf3x+0x52>
    8e6c:	7e f4       	brtc	.+30     	; 0x8e8c <__addsf3x+0x80>
    8e6e:	1f 16       	cp	r1, r31
    8e70:	ba 0b       	sbc	r27, r26
    8e72:	62 0b       	sbc	r22, r18
    8e74:	73 0b       	sbc	r23, r19
    8e76:	84 0b       	sbc	r24, r20
    8e78:	ba f0       	brmi	.+46     	; 0x8ea8 <__addsf3x+0x9c>
    8e7a:	91 50       	subi	r25, 0x01	; 1
    8e7c:	a1 f0       	breq	.+40     	; 0x8ea6 <__addsf3x+0x9a>
    8e7e:	ff 0f       	add	r31, r31
    8e80:	bb 1f       	adc	r27, r27
    8e82:	66 1f       	adc	r22, r22
    8e84:	77 1f       	adc	r23, r23
    8e86:	88 1f       	adc	r24, r24
    8e88:	c2 f7       	brpl	.-16     	; 0x8e7a <__addsf3x+0x6e>
    8e8a:	0e c0       	rjmp	.+28     	; 0x8ea8 <__addsf3x+0x9c>
    8e8c:	ba 0f       	add	r27, r26
    8e8e:	62 1f       	adc	r22, r18
    8e90:	73 1f       	adc	r23, r19
    8e92:	84 1f       	adc	r24, r20
    8e94:	48 f4       	brcc	.+18     	; 0x8ea8 <__addsf3x+0x9c>
    8e96:	87 95       	ror	r24
    8e98:	77 95       	ror	r23
    8e9a:	67 95       	ror	r22
    8e9c:	b7 95       	ror	r27
    8e9e:	f7 95       	ror	r31
    8ea0:	9e 3f       	cpi	r25, 0xFE	; 254
    8ea2:	08 f0       	brcs	.+2      	; 0x8ea6 <__addsf3x+0x9a>
    8ea4:	b0 cf       	rjmp	.-160    	; 0x8e06 <__addsf3+0x26>
    8ea6:	93 95       	inc	r25
    8ea8:	88 0f       	add	r24, r24
    8eaa:	08 f0       	brcs	.+2      	; 0x8eae <__addsf3x+0xa2>
    8eac:	99 27       	eor	r25, r25
    8eae:	ee 0f       	add	r30, r30
    8eb0:	97 95       	ror	r25
    8eb2:	87 95       	ror	r24
    8eb4:	08 95       	ret

00008eb6 <__divsf3>:
    8eb6:	12 d0       	rcall	.+36     	; 0x8edc <__divsf3x>
    8eb8:	0c 94 55 34 	jmp	0x68aa	; 0x68aa <__fp_round>
    8ebc:	0e 94 4e 34 	call	0x689c	; 0x689c <__fp_pscB>
    8ec0:	58 f0       	brcs	.+22     	; 0x8ed8 <__divsf3+0x22>
    8ec2:	0e 94 47 34 	call	0x688e	; 0x688e <__fp_pscA>
    8ec6:	40 f0       	brcs	.+16     	; 0x8ed8 <__divsf3+0x22>
    8ec8:	29 f4       	brne	.+10     	; 0x8ed4 <__divsf3+0x1e>
    8eca:	5f 3f       	cpi	r21, 0xFF	; 255
    8ecc:	29 f0       	breq	.+10     	; 0x8ed8 <__divsf3+0x22>
    8ece:	0c 94 3e 34 	jmp	0x687c	; 0x687c <__fp_inf>
    8ed2:	51 11       	cpse	r21, r1
    8ed4:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__fp_szero>
    8ed8:	0c 94 44 34 	jmp	0x6888	; 0x6888 <__fp_nan>

00008edc <__divsf3x>:
    8edc:	0e 94 ae 33 	call	0x675c	; 0x675c <__fp_split3>
    8ee0:	68 f3       	brcs	.-38     	; 0x8ebc <__divsf3+0x6>

00008ee2 <__divsf3_pse>:
    8ee2:	99 23       	and	r25, r25
    8ee4:	b1 f3       	breq	.-20     	; 0x8ed2 <__divsf3+0x1c>
    8ee6:	55 23       	and	r21, r21
    8ee8:	91 f3       	breq	.-28     	; 0x8ece <__divsf3+0x18>
    8eea:	95 1b       	sub	r25, r21
    8eec:	55 0b       	sbc	r21, r21
    8eee:	bb 27       	eor	r27, r27
    8ef0:	aa 27       	eor	r26, r26
    8ef2:	62 17       	cp	r22, r18
    8ef4:	73 07       	cpc	r23, r19
    8ef6:	84 07       	cpc	r24, r20
    8ef8:	38 f0       	brcs	.+14     	; 0x8f08 <__divsf3_pse+0x26>
    8efa:	9f 5f       	subi	r25, 0xFF	; 255
    8efc:	5f 4f       	sbci	r21, 0xFF	; 255
    8efe:	22 0f       	add	r18, r18
    8f00:	33 1f       	adc	r19, r19
    8f02:	44 1f       	adc	r20, r20
    8f04:	aa 1f       	adc	r26, r26
    8f06:	a9 f3       	breq	.-22     	; 0x8ef2 <__divsf3_pse+0x10>
    8f08:	35 d0       	rcall	.+106    	; 0x8f74 <__divsf3_pse+0x92>
    8f0a:	0e 2e       	mov	r0, r30
    8f0c:	3a f0       	brmi	.+14     	; 0x8f1c <__divsf3_pse+0x3a>
    8f0e:	e0 e8       	ldi	r30, 0x80	; 128
    8f10:	32 d0       	rcall	.+100    	; 0x8f76 <__divsf3_pse+0x94>
    8f12:	91 50       	subi	r25, 0x01	; 1
    8f14:	50 40       	sbci	r21, 0x00	; 0
    8f16:	e6 95       	lsr	r30
    8f18:	00 1c       	adc	r0, r0
    8f1a:	ca f7       	brpl	.-14     	; 0x8f0e <__divsf3_pse+0x2c>
    8f1c:	2b d0       	rcall	.+86     	; 0x8f74 <__divsf3_pse+0x92>
    8f1e:	fe 2f       	mov	r31, r30
    8f20:	29 d0       	rcall	.+82     	; 0x8f74 <__divsf3_pse+0x92>
    8f22:	66 0f       	add	r22, r22
    8f24:	77 1f       	adc	r23, r23
    8f26:	88 1f       	adc	r24, r24
    8f28:	bb 1f       	adc	r27, r27
    8f2a:	26 17       	cp	r18, r22
    8f2c:	37 07       	cpc	r19, r23
    8f2e:	48 07       	cpc	r20, r24
    8f30:	ab 07       	cpc	r26, r27
    8f32:	b0 e8       	ldi	r27, 0x80	; 128
    8f34:	09 f0       	breq	.+2      	; 0x8f38 <__divsf3_pse+0x56>
    8f36:	bb 0b       	sbc	r27, r27
    8f38:	80 2d       	mov	r24, r0
    8f3a:	bf 01       	movw	r22, r30
    8f3c:	ff 27       	eor	r31, r31
    8f3e:	93 58       	subi	r25, 0x83	; 131
    8f40:	5f 4f       	sbci	r21, 0xFF	; 255
    8f42:	3a f0       	brmi	.+14     	; 0x8f52 <__divsf3_pse+0x70>
    8f44:	9e 3f       	cpi	r25, 0xFE	; 254
    8f46:	51 05       	cpc	r21, r1
    8f48:	78 f0       	brcs	.+30     	; 0x8f68 <__divsf3_pse+0x86>
    8f4a:	0c 94 3e 34 	jmp	0x687c	; 0x687c <__fp_inf>
    8f4e:	0c 94 d1 33 	jmp	0x67a2	; 0x67a2 <__fp_szero>
    8f52:	5f 3f       	cpi	r21, 0xFF	; 255
    8f54:	e4 f3       	brlt	.-8      	; 0x8f4e <__divsf3_pse+0x6c>
    8f56:	98 3e       	cpi	r25, 0xE8	; 232
    8f58:	d4 f3       	brlt	.-12     	; 0x8f4e <__divsf3_pse+0x6c>
    8f5a:	86 95       	lsr	r24
    8f5c:	77 95       	ror	r23
    8f5e:	67 95       	ror	r22
    8f60:	b7 95       	ror	r27
    8f62:	f7 95       	ror	r31
    8f64:	9f 5f       	subi	r25, 0xFF	; 255
    8f66:	c9 f7       	brne	.-14     	; 0x8f5a <__divsf3_pse+0x78>
    8f68:	88 0f       	add	r24, r24
    8f6a:	91 1d       	adc	r25, r1
    8f6c:	96 95       	lsr	r25
    8f6e:	87 95       	ror	r24
    8f70:	97 f9       	bld	r25, 7
    8f72:	08 95       	ret
    8f74:	e1 e0       	ldi	r30, 0x01	; 1
    8f76:	66 0f       	add	r22, r22
    8f78:	77 1f       	adc	r23, r23
    8f7a:	88 1f       	adc	r24, r24
    8f7c:	bb 1f       	adc	r27, r27
    8f7e:	62 17       	cp	r22, r18
    8f80:	73 07       	cpc	r23, r19
    8f82:	84 07       	cpc	r24, r20
    8f84:	ba 07       	cpc	r27, r26
    8f86:	20 f0       	brcs	.+8      	; 0x8f90 <__divsf3_pse+0xae>
    8f88:	62 1b       	sub	r22, r18
    8f8a:	73 0b       	sbc	r23, r19
    8f8c:	84 0b       	sbc	r24, r20
    8f8e:	ba 0b       	sbc	r27, r26
    8f90:	ee 1f       	adc	r30, r30
    8f92:	88 f7       	brcc	.-30     	; 0x8f76 <__divsf3_pse+0x94>
    8f94:	e0 95       	com	r30
    8f96:	08 95       	ret

00008f98 <__floatunsisf>:
    8f98:	e8 94       	clt
    8f9a:	09 c0       	rjmp	.+18     	; 0x8fae <__floatsisf+0x12>

00008f9c <__floatsisf>:
    8f9c:	97 fb       	bst	r25, 7
    8f9e:	3e f4       	brtc	.+14     	; 0x8fae <__floatsisf+0x12>
    8fa0:	90 95       	com	r25
    8fa2:	80 95       	com	r24
    8fa4:	70 95       	com	r23
    8fa6:	61 95       	neg	r22
    8fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    8faa:	8f 4f       	sbci	r24, 0xFF	; 255
    8fac:	9f 4f       	sbci	r25, 0xFF	; 255
    8fae:	99 23       	and	r25, r25
    8fb0:	a9 f0       	breq	.+42     	; 0x8fdc <__floatsisf+0x40>
    8fb2:	f9 2f       	mov	r31, r25
    8fb4:	96 e9       	ldi	r25, 0x96	; 150
    8fb6:	bb 27       	eor	r27, r27
    8fb8:	93 95       	inc	r25
    8fba:	f6 95       	lsr	r31
    8fbc:	87 95       	ror	r24
    8fbe:	77 95       	ror	r23
    8fc0:	67 95       	ror	r22
    8fc2:	b7 95       	ror	r27
    8fc4:	f1 11       	cpse	r31, r1
    8fc6:	f8 cf       	rjmp	.-16     	; 0x8fb8 <__floatsisf+0x1c>
    8fc8:	fa f4       	brpl	.+62     	; 0x9008 <__floatsisf+0x6c>
    8fca:	bb 0f       	add	r27, r27
    8fcc:	11 f4       	brne	.+4      	; 0x8fd2 <__floatsisf+0x36>
    8fce:	60 ff       	sbrs	r22, 0
    8fd0:	1b c0       	rjmp	.+54     	; 0x9008 <__floatsisf+0x6c>
    8fd2:	6f 5f       	subi	r22, 0xFF	; 255
    8fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    8fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    8fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    8fda:	16 c0       	rjmp	.+44     	; 0x9008 <__floatsisf+0x6c>
    8fdc:	88 23       	and	r24, r24
    8fde:	11 f0       	breq	.+4      	; 0x8fe4 <__floatsisf+0x48>
    8fe0:	96 e9       	ldi	r25, 0x96	; 150
    8fe2:	11 c0       	rjmp	.+34     	; 0x9006 <__floatsisf+0x6a>
    8fe4:	77 23       	and	r23, r23
    8fe6:	21 f0       	breq	.+8      	; 0x8ff0 <__floatsisf+0x54>
    8fe8:	9e e8       	ldi	r25, 0x8E	; 142
    8fea:	87 2f       	mov	r24, r23
    8fec:	76 2f       	mov	r23, r22
    8fee:	05 c0       	rjmp	.+10     	; 0x8ffa <__floatsisf+0x5e>
    8ff0:	66 23       	and	r22, r22
    8ff2:	71 f0       	breq	.+28     	; 0x9010 <__floatsisf+0x74>
    8ff4:	96 e8       	ldi	r25, 0x86	; 134
    8ff6:	86 2f       	mov	r24, r22
    8ff8:	70 e0       	ldi	r23, 0x00	; 0
    8ffa:	60 e0       	ldi	r22, 0x00	; 0
    8ffc:	2a f0       	brmi	.+10     	; 0x9008 <__floatsisf+0x6c>
    8ffe:	9a 95       	dec	r25
    9000:	66 0f       	add	r22, r22
    9002:	77 1f       	adc	r23, r23
    9004:	88 1f       	adc	r24, r24
    9006:	da f7       	brpl	.-10     	; 0x8ffe <__floatsisf+0x62>
    9008:	88 0f       	add	r24, r24
    900a:	96 95       	lsr	r25
    900c:	87 95       	ror	r24
    900e:	97 f9       	bld	r25, 7
    9010:	08 95       	ret

00009012 <__udivmodsi4>:
    9012:	a1 e2       	ldi	r26, 0x21	; 33
    9014:	1a 2e       	mov	r1, r26
    9016:	aa 1b       	sub	r26, r26
    9018:	bb 1b       	sub	r27, r27
    901a:	fd 01       	movw	r30, r26
    901c:	0d c0       	rjmp	.+26     	; 0x9038 <__udivmodsi4_ep>

0000901e <__udivmodsi4_loop>:
    901e:	aa 1f       	adc	r26, r26
    9020:	bb 1f       	adc	r27, r27
    9022:	ee 1f       	adc	r30, r30
    9024:	ff 1f       	adc	r31, r31
    9026:	a2 17       	cp	r26, r18
    9028:	b3 07       	cpc	r27, r19
    902a:	e4 07       	cpc	r30, r20
    902c:	f5 07       	cpc	r31, r21
    902e:	20 f0       	brcs	.+8      	; 0x9038 <__udivmodsi4_ep>
    9030:	a2 1b       	sub	r26, r18
    9032:	b3 0b       	sbc	r27, r19
    9034:	e4 0b       	sbc	r30, r20
    9036:	f5 0b       	sbc	r31, r21

00009038 <__udivmodsi4_ep>:
    9038:	66 1f       	adc	r22, r22
    903a:	77 1f       	adc	r23, r23
    903c:	88 1f       	adc	r24, r24
    903e:	99 1f       	adc	r25, r25
    9040:	1a 94       	dec	r1
    9042:	69 f7       	brne	.-38     	; 0x901e <__udivmodsi4_loop>
    9044:	60 95       	com	r22
    9046:	70 95       	com	r23
    9048:	80 95       	com	r24
    904a:	90 95       	com	r25
    904c:	9b 01       	movw	r18, r22
    904e:	ac 01       	movw	r20, r24
    9050:	bd 01       	movw	r22, r26
    9052:	cf 01       	movw	r24, r30
    9054:	08 95       	ret

00009056 <__tablejump2__>:
    9056:	ee 0f       	add	r30, r30
    9058:	ff 1f       	adc	r31, r31
    905a:	88 1f       	adc	r24, r24
    905c:	8b bf       	out	0x3b, r24	; 59
    905e:	07 90       	elpm	r0, Z+
    9060:	f6 91       	elpm	r31, Z
    9062:	e0 2d       	mov	r30, r0
    9064:	19 94       	eijmp

00009066 <calloc>:
    9066:	0f 93       	push	r16
    9068:	1f 93       	push	r17
    906a:	cf 93       	push	r28
    906c:	df 93       	push	r29
    906e:	86 9f       	mul	r24, r22
    9070:	80 01       	movw	r16, r0
    9072:	87 9f       	mul	r24, r23
    9074:	10 0d       	add	r17, r0
    9076:	96 9f       	mul	r25, r22
    9078:	10 0d       	add	r17, r0
    907a:	11 24       	eor	r1, r1
    907c:	c8 01       	movw	r24, r16
    907e:	0d d0       	rcall	.+26     	; 0x909a <malloc>
    9080:	ec 01       	movw	r28, r24
    9082:	00 97       	sbiw	r24, 0x00	; 0
    9084:	21 f0       	breq	.+8      	; 0x908e <calloc+0x28>
    9086:	a8 01       	movw	r20, r16
    9088:	60 e0       	ldi	r22, 0x00	; 0
    908a:	70 e0       	ldi	r23, 0x00	; 0
    908c:	17 d2       	rcall	.+1070   	; 0x94bc <memset>
    908e:	ce 01       	movw	r24, r28
    9090:	df 91       	pop	r29
    9092:	cf 91       	pop	r28
    9094:	1f 91       	pop	r17
    9096:	0f 91       	pop	r16
    9098:	08 95       	ret

0000909a <malloc>:
    909a:	0f 93       	push	r16
    909c:	1f 93       	push	r17
    909e:	cf 93       	push	r28
    90a0:	df 93       	push	r29
    90a2:	82 30       	cpi	r24, 0x02	; 2
    90a4:	91 05       	cpc	r25, r1
    90a6:	10 f4       	brcc	.+4      	; 0x90ac <malloc+0x12>
    90a8:	82 e0       	ldi	r24, 0x02	; 2
    90aa:	90 e0       	ldi	r25, 0x00	; 0
    90ac:	e0 91 8e 19 	lds	r30, 0x198E	; 0x80198e <__flp>
    90b0:	f0 91 8f 19 	lds	r31, 0x198F	; 0x80198f <__flp+0x1>
    90b4:	20 e0       	ldi	r18, 0x00	; 0
    90b6:	30 e0       	ldi	r19, 0x00	; 0
    90b8:	a0 e0       	ldi	r26, 0x00	; 0
    90ba:	b0 e0       	ldi	r27, 0x00	; 0
    90bc:	30 97       	sbiw	r30, 0x00	; 0
    90be:	19 f1       	breq	.+70     	; 0x9106 <malloc+0x6c>
    90c0:	40 81       	ld	r20, Z
    90c2:	51 81       	ldd	r21, Z+1	; 0x01
    90c4:	02 81       	ldd	r16, Z+2	; 0x02
    90c6:	13 81       	ldd	r17, Z+3	; 0x03
    90c8:	48 17       	cp	r20, r24
    90ca:	59 07       	cpc	r21, r25
    90cc:	c8 f0       	brcs	.+50     	; 0x9100 <malloc+0x66>
    90ce:	84 17       	cp	r24, r20
    90d0:	95 07       	cpc	r25, r21
    90d2:	69 f4       	brne	.+26     	; 0x90ee <malloc+0x54>
    90d4:	10 97       	sbiw	r26, 0x00	; 0
    90d6:	31 f0       	breq	.+12     	; 0x90e4 <malloc+0x4a>
    90d8:	12 96       	adiw	r26, 0x02	; 2
    90da:	0c 93       	st	X, r16
    90dc:	12 97       	sbiw	r26, 0x02	; 2
    90de:	13 96       	adiw	r26, 0x03	; 3
    90e0:	1c 93       	st	X, r17
    90e2:	27 c0       	rjmp	.+78     	; 0x9132 <malloc+0x98>
    90e4:	00 93 8e 19 	sts	0x198E, r16	; 0x80198e <__flp>
    90e8:	10 93 8f 19 	sts	0x198F, r17	; 0x80198f <__flp+0x1>
    90ec:	22 c0       	rjmp	.+68     	; 0x9132 <malloc+0x98>
    90ee:	21 15       	cp	r18, r1
    90f0:	31 05       	cpc	r19, r1
    90f2:	19 f0       	breq	.+6      	; 0x90fa <malloc+0x60>
    90f4:	42 17       	cp	r20, r18
    90f6:	53 07       	cpc	r21, r19
    90f8:	18 f4       	brcc	.+6      	; 0x9100 <malloc+0x66>
    90fa:	9a 01       	movw	r18, r20
    90fc:	bd 01       	movw	r22, r26
    90fe:	ef 01       	movw	r28, r30
    9100:	df 01       	movw	r26, r30
    9102:	f8 01       	movw	r30, r16
    9104:	db cf       	rjmp	.-74     	; 0x90bc <malloc+0x22>
    9106:	21 15       	cp	r18, r1
    9108:	31 05       	cpc	r19, r1
    910a:	f9 f0       	breq	.+62     	; 0x914a <malloc+0xb0>
    910c:	28 1b       	sub	r18, r24
    910e:	39 0b       	sbc	r19, r25
    9110:	24 30       	cpi	r18, 0x04	; 4
    9112:	31 05       	cpc	r19, r1
    9114:	80 f4       	brcc	.+32     	; 0x9136 <malloc+0x9c>
    9116:	8a 81       	ldd	r24, Y+2	; 0x02
    9118:	9b 81       	ldd	r25, Y+3	; 0x03
    911a:	61 15       	cp	r22, r1
    911c:	71 05       	cpc	r23, r1
    911e:	21 f0       	breq	.+8      	; 0x9128 <malloc+0x8e>
    9120:	fb 01       	movw	r30, r22
    9122:	93 83       	std	Z+3, r25	; 0x03
    9124:	82 83       	std	Z+2, r24	; 0x02
    9126:	04 c0       	rjmp	.+8      	; 0x9130 <malloc+0x96>
    9128:	90 93 8f 19 	sts	0x198F, r25	; 0x80198f <__flp+0x1>
    912c:	80 93 8e 19 	sts	0x198E, r24	; 0x80198e <__flp>
    9130:	fe 01       	movw	r30, r28
    9132:	32 96       	adiw	r30, 0x02	; 2
    9134:	44 c0       	rjmp	.+136    	; 0x91be <malloc+0x124>
    9136:	fe 01       	movw	r30, r28
    9138:	e2 0f       	add	r30, r18
    913a:	f3 1f       	adc	r31, r19
    913c:	81 93       	st	Z+, r24
    913e:	91 93       	st	Z+, r25
    9140:	22 50       	subi	r18, 0x02	; 2
    9142:	31 09       	sbc	r19, r1
    9144:	39 83       	std	Y+1, r19	; 0x01
    9146:	28 83       	st	Y, r18
    9148:	3a c0       	rjmp	.+116    	; 0x91be <malloc+0x124>
    914a:	20 91 8c 19 	lds	r18, 0x198C	; 0x80198c <__brkval>
    914e:	30 91 8d 19 	lds	r19, 0x198D	; 0x80198d <__brkval+0x1>
    9152:	23 2b       	or	r18, r19
    9154:	41 f4       	brne	.+16     	; 0x9166 <malloc+0xcc>
    9156:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    915a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    915e:	30 93 8d 19 	sts	0x198D, r19	; 0x80198d <__brkval+0x1>
    9162:	20 93 8c 19 	sts	0x198C, r18	; 0x80198c <__brkval>
    9166:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    916a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    916e:	21 15       	cp	r18, r1
    9170:	31 05       	cpc	r19, r1
    9172:	41 f4       	brne	.+16     	; 0x9184 <malloc+0xea>
    9174:	2d b7       	in	r18, 0x3d	; 61
    9176:	3e b7       	in	r19, 0x3e	; 62
    9178:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    917c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    9180:	24 1b       	sub	r18, r20
    9182:	35 0b       	sbc	r19, r21
    9184:	e0 91 8c 19 	lds	r30, 0x198C	; 0x80198c <__brkval>
    9188:	f0 91 8d 19 	lds	r31, 0x198D	; 0x80198d <__brkval+0x1>
    918c:	e2 17       	cp	r30, r18
    918e:	f3 07       	cpc	r31, r19
    9190:	a0 f4       	brcc	.+40     	; 0x91ba <malloc+0x120>
    9192:	2e 1b       	sub	r18, r30
    9194:	3f 0b       	sbc	r19, r31
    9196:	28 17       	cp	r18, r24
    9198:	39 07       	cpc	r19, r25
    919a:	78 f0       	brcs	.+30     	; 0x91ba <malloc+0x120>
    919c:	ac 01       	movw	r20, r24
    919e:	4e 5f       	subi	r20, 0xFE	; 254
    91a0:	5f 4f       	sbci	r21, 0xFF	; 255
    91a2:	24 17       	cp	r18, r20
    91a4:	35 07       	cpc	r19, r21
    91a6:	48 f0       	brcs	.+18     	; 0x91ba <malloc+0x120>
    91a8:	4e 0f       	add	r20, r30
    91aa:	5f 1f       	adc	r21, r31
    91ac:	50 93 8d 19 	sts	0x198D, r21	; 0x80198d <__brkval+0x1>
    91b0:	40 93 8c 19 	sts	0x198C, r20	; 0x80198c <__brkval>
    91b4:	81 93       	st	Z+, r24
    91b6:	91 93       	st	Z+, r25
    91b8:	02 c0       	rjmp	.+4      	; 0x91be <malloc+0x124>
    91ba:	e0 e0       	ldi	r30, 0x00	; 0
    91bc:	f0 e0       	ldi	r31, 0x00	; 0
    91be:	cf 01       	movw	r24, r30
    91c0:	df 91       	pop	r29
    91c2:	cf 91       	pop	r28
    91c4:	1f 91       	pop	r17
    91c6:	0f 91       	pop	r16
    91c8:	08 95       	ret

000091ca <free>:
    91ca:	cf 93       	push	r28
    91cc:	df 93       	push	r29
    91ce:	00 97       	sbiw	r24, 0x00	; 0
    91d0:	09 f4       	brne	.+2      	; 0x91d4 <free+0xa>
    91d2:	81 c0       	rjmp	.+258    	; 0x92d6 <free+0x10c>
    91d4:	fc 01       	movw	r30, r24
    91d6:	32 97       	sbiw	r30, 0x02	; 2
    91d8:	13 82       	std	Z+3, r1	; 0x03
    91da:	12 82       	std	Z+2, r1	; 0x02
    91dc:	a0 91 8e 19 	lds	r26, 0x198E	; 0x80198e <__flp>
    91e0:	b0 91 8f 19 	lds	r27, 0x198F	; 0x80198f <__flp+0x1>
    91e4:	10 97       	sbiw	r26, 0x00	; 0
    91e6:	81 f4       	brne	.+32     	; 0x9208 <free+0x3e>
    91e8:	20 81       	ld	r18, Z
    91ea:	31 81       	ldd	r19, Z+1	; 0x01
    91ec:	82 0f       	add	r24, r18
    91ee:	93 1f       	adc	r25, r19
    91f0:	20 91 8c 19 	lds	r18, 0x198C	; 0x80198c <__brkval>
    91f4:	30 91 8d 19 	lds	r19, 0x198D	; 0x80198d <__brkval+0x1>
    91f8:	28 17       	cp	r18, r24
    91fa:	39 07       	cpc	r19, r25
    91fc:	51 f5       	brne	.+84     	; 0x9252 <free+0x88>
    91fe:	f0 93 8d 19 	sts	0x198D, r31	; 0x80198d <__brkval+0x1>
    9202:	e0 93 8c 19 	sts	0x198C, r30	; 0x80198c <__brkval>
    9206:	67 c0       	rjmp	.+206    	; 0x92d6 <free+0x10c>
    9208:	ed 01       	movw	r28, r26
    920a:	20 e0       	ldi	r18, 0x00	; 0
    920c:	30 e0       	ldi	r19, 0x00	; 0
    920e:	ce 17       	cp	r28, r30
    9210:	df 07       	cpc	r29, r31
    9212:	40 f4       	brcc	.+16     	; 0x9224 <free+0x5a>
    9214:	4a 81       	ldd	r20, Y+2	; 0x02
    9216:	5b 81       	ldd	r21, Y+3	; 0x03
    9218:	9e 01       	movw	r18, r28
    921a:	41 15       	cp	r20, r1
    921c:	51 05       	cpc	r21, r1
    921e:	f1 f0       	breq	.+60     	; 0x925c <free+0x92>
    9220:	ea 01       	movw	r28, r20
    9222:	f5 cf       	rjmp	.-22     	; 0x920e <free+0x44>
    9224:	d3 83       	std	Z+3, r29	; 0x03
    9226:	c2 83       	std	Z+2, r28	; 0x02
    9228:	40 81       	ld	r20, Z
    922a:	51 81       	ldd	r21, Z+1	; 0x01
    922c:	84 0f       	add	r24, r20
    922e:	95 1f       	adc	r25, r21
    9230:	c8 17       	cp	r28, r24
    9232:	d9 07       	cpc	r29, r25
    9234:	59 f4       	brne	.+22     	; 0x924c <free+0x82>
    9236:	88 81       	ld	r24, Y
    9238:	99 81       	ldd	r25, Y+1	; 0x01
    923a:	84 0f       	add	r24, r20
    923c:	95 1f       	adc	r25, r21
    923e:	02 96       	adiw	r24, 0x02	; 2
    9240:	91 83       	std	Z+1, r25	; 0x01
    9242:	80 83       	st	Z, r24
    9244:	8a 81       	ldd	r24, Y+2	; 0x02
    9246:	9b 81       	ldd	r25, Y+3	; 0x03
    9248:	93 83       	std	Z+3, r25	; 0x03
    924a:	82 83       	std	Z+2, r24	; 0x02
    924c:	21 15       	cp	r18, r1
    924e:	31 05       	cpc	r19, r1
    9250:	29 f4       	brne	.+10     	; 0x925c <free+0x92>
    9252:	f0 93 8f 19 	sts	0x198F, r31	; 0x80198f <__flp+0x1>
    9256:	e0 93 8e 19 	sts	0x198E, r30	; 0x80198e <__flp>
    925a:	3d c0       	rjmp	.+122    	; 0x92d6 <free+0x10c>
    925c:	e9 01       	movw	r28, r18
    925e:	fb 83       	std	Y+3, r31	; 0x03
    9260:	ea 83       	std	Y+2, r30	; 0x02
    9262:	49 91       	ld	r20, Y+
    9264:	59 91       	ld	r21, Y+
    9266:	c4 0f       	add	r28, r20
    9268:	d5 1f       	adc	r29, r21
    926a:	ec 17       	cp	r30, r28
    926c:	fd 07       	cpc	r31, r29
    926e:	61 f4       	brne	.+24     	; 0x9288 <free+0xbe>
    9270:	80 81       	ld	r24, Z
    9272:	91 81       	ldd	r25, Z+1	; 0x01
    9274:	84 0f       	add	r24, r20
    9276:	95 1f       	adc	r25, r21
    9278:	02 96       	adiw	r24, 0x02	; 2
    927a:	e9 01       	movw	r28, r18
    927c:	99 83       	std	Y+1, r25	; 0x01
    927e:	88 83       	st	Y, r24
    9280:	82 81       	ldd	r24, Z+2	; 0x02
    9282:	93 81       	ldd	r25, Z+3	; 0x03
    9284:	9b 83       	std	Y+3, r25	; 0x03
    9286:	8a 83       	std	Y+2, r24	; 0x02
    9288:	e0 e0       	ldi	r30, 0x00	; 0
    928a:	f0 e0       	ldi	r31, 0x00	; 0
    928c:	12 96       	adiw	r26, 0x02	; 2
    928e:	8d 91       	ld	r24, X+
    9290:	9c 91       	ld	r25, X
    9292:	13 97       	sbiw	r26, 0x03	; 3
    9294:	00 97       	sbiw	r24, 0x00	; 0
    9296:	19 f0       	breq	.+6      	; 0x929e <free+0xd4>
    9298:	fd 01       	movw	r30, r26
    929a:	dc 01       	movw	r26, r24
    929c:	f7 cf       	rjmp	.-18     	; 0x928c <free+0xc2>
    929e:	8d 91       	ld	r24, X+
    92a0:	9c 91       	ld	r25, X
    92a2:	11 97       	sbiw	r26, 0x01	; 1
    92a4:	9d 01       	movw	r18, r26
    92a6:	2e 5f       	subi	r18, 0xFE	; 254
    92a8:	3f 4f       	sbci	r19, 0xFF	; 255
    92aa:	82 0f       	add	r24, r18
    92ac:	93 1f       	adc	r25, r19
    92ae:	20 91 8c 19 	lds	r18, 0x198C	; 0x80198c <__brkval>
    92b2:	30 91 8d 19 	lds	r19, 0x198D	; 0x80198d <__brkval+0x1>
    92b6:	28 17       	cp	r18, r24
    92b8:	39 07       	cpc	r19, r25
    92ba:	69 f4       	brne	.+26     	; 0x92d6 <free+0x10c>
    92bc:	30 97       	sbiw	r30, 0x00	; 0
    92be:	29 f4       	brne	.+10     	; 0x92ca <free+0x100>
    92c0:	10 92 8f 19 	sts	0x198F, r1	; 0x80198f <__flp+0x1>
    92c4:	10 92 8e 19 	sts	0x198E, r1	; 0x80198e <__flp>
    92c8:	02 c0       	rjmp	.+4      	; 0x92ce <free+0x104>
    92ca:	13 82       	std	Z+3, r1	; 0x03
    92cc:	12 82       	std	Z+2, r1	; 0x02
    92ce:	b0 93 8d 19 	sts	0x198D, r27	; 0x80198d <__brkval+0x1>
    92d2:	a0 93 8c 19 	sts	0x198C, r26	; 0x80198c <__brkval>
    92d6:	df 91       	pop	r29
    92d8:	cf 91       	pop	r28
    92da:	08 95       	ret

000092dc <abort>:
    92dc:	81 e0       	ldi	r24, 0x01	; 1
    92de:	90 e0       	ldi	r25, 0x00	; 0
    92e0:	f8 94       	cli
    92e2:	58 c2       	rjmp	.+1200   	; 0x9794 <_exit>

000092e4 <__ftoa_engine>:
    92e4:	28 30       	cpi	r18, 0x08	; 8
    92e6:	08 f0       	brcs	.+2      	; 0x92ea <__ftoa_engine+0x6>
    92e8:	27 e0       	ldi	r18, 0x07	; 7
    92ea:	33 27       	eor	r19, r19
    92ec:	da 01       	movw	r26, r20
    92ee:	99 0f       	add	r25, r25
    92f0:	31 1d       	adc	r19, r1
    92f2:	87 fd       	sbrc	r24, 7
    92f4:	91 60       	ori	r25, 0x01	; 1
    92f6:	00 96       	adiw	r24, 0x00	; 0
    92f8:	61 05       	cpc	r22, r1
    92fa:	71 05       	cpc	r23, r1
    92fc:	39 f4       	brne	.+14     	; 0x930c <__ftoa_engine+0x28>
    92fe:	32 60       	ori	r19, 0x02	; 2
    9300:	2e 5f       	subi	r18, 0xFE	; 254
    9302:	3d 93       	st	X+, r19
    9304:	30 e3       	ldi	r19, 0x30	; 48
    9306:	2a 95       	dec	r18
    9308:	e1 f7       	brne	.-8      	; 0x9302 <__ftoa_engine+0x1e>
    930a:	08 95       	ret
    930c:	9f 3f       	cpi	r25, 0xFF	; 255
    930e:	30 f0       	brcs	.+12     	; 0x931c <__ftoa_engine+0x38>
    9310:	80 38       	cpi	r24, 0x80	; 128
    9312:	71 05       	cpc	r23, r1
    9314:	61 05       	cpc	r22, r1
    9316:	09 f0       	breq	.+2      	; 0x931a <__ftoa_engine+0x36>
    9318:	3c 5f       	subi	r19, 0xFC	; 252
    931a:	3c 5f       	subi	r19, 0xFC	; 252
    931c:	3d 93       	st	X+, r19
    931e:	91 30       	cpi	r25, 0x01	; 1
    9320:	08 f0       	brcs	.+2      	; 0x9324 <__ftoa_engine+0x40>
    9322:	80 68       	ori	r24, 0x80	; 128
    9324:	91 1d       	adc	r25, r1
    9326:	df 93       	push	r29
    9328:	cf 93       	push	r28
    932a:	1f 93       	push	r17
    932c:	0f 93       	push	r16
    932e:	ff 92       	push	r15
    9330:	ef 92       	push	r14
    9332:	19 2f       	mov	r17, r25
    9334:	98 7f       	andi	r25, 0xF8	; 248
    9336:	96 95       	lsr	r25
    9338:	e9 2f       	mov	r30, r25
    933a:	96 95       	lsr	r25
    933c:	96 95       	lsr	r25
    933e:	e9 0f       	add	r30, r25
    9340:	ff 27       	eor	r31, r31
    9342:	e4 50       	subi	r30, 0x04	; 4
    9344:	fe 4f       	sbci	r31, 0xFE	; 254
    9346:	99 27       	eor	r25, r25
    9348:	33 27       	eor	r19, r19
    934a:	ee 24       	eor	r14, r14
    934c:	ff 24       	eor	r15, r15
    934e:	a7 01       	movw	r20, r14
    9350:	e7 01       	movw	r28, r14
    9352:	05 90       	lpm	r0, Z+
    9354:	08 94       	sec
    9356:	07 94       	ror	r0
    9358:	28 f4       	brcc	.+10     	; 0x9364 <__ftoa_engine+0x80>
    935a:	36 0f       	add	r19, r22
    935c:	e7 1e       	adc	r14, r23
    935e:	f8 1e       	adc	r15, r24
    9360:	49 1f       	adc	r20, r25
    9362:	51 1d       	adc	r21, r1
    9364:	66 0f       	add	r22, r22
    9366:	77 1f       	adc	r23, r23
    9368:	88 1f       	adc	r24, r24
    936a:	99 1f       	adc	r25, r25
    936c:	06 94       	lsr	r0
    936e:	a1 f7       	brne	.-24     	; 0x9358 <__ftoa_engine+0x74>
    9370:	05 90       	lpm	r0, Z+
    9372:	07 94       	ror	r0
    9374:	28 f4       	brcc	.+10     	; 0x9380 <__ftoa_engine+0x9c>
    9376:	e7 0e       	add	r14, r23
    9378:	f8 1e       	adc	r15, r24
    937a:	49 1f       	adc	r20, r25
    937c:	56 1f       	adc	r21, r22
    937e:	c1 1d       	adc	r28, r1
    9380:	77 0f       	add	r23, r23
    9382:	88 1f       	adc	r24, r24
    9384:	99 1f       	adc	r25, r25
    9386:	66 1f       	adc	r22, r22
    9388:	06 94       	lsr	r0
    938a:	a1 f7       	brne	.-24     	; 0x9374 <__ftoa_engine+0x90>
    938c:	05 90       	lpm	r0, Z+
    938e:	07 94       	ror	r0
    9390:	28 f4       	brcc	.+10     	; 0x939c <__ftoa_engine+0xb8>
    9392:	f8 0e       	add	r15, r24
    9394:	49 1f       	adc	r20, r25
    9396:	56 1f       	adc	r21, r22
    9398:	c7 1f       	adc	r28, r23
    939a:	d1 1d       	adc	r29, r1
    939c:	88 0f       	add	r24, r24
    939e:	99 1f       	adc	r25, r25
    93a0:	66 1f       	adc	r22, r22
    93a2:	77 1f       	adc	r23, r23
    93a4:	06 94       	lsr	r0
    93a6:	a1 f7       	brne	.-24     	; 0x9390 <__ftoa_engine+0xac>
    93a8:	05 90       	lpm	r0, Z+
    93aa:	07 94       	ror	r0
    93ac:	20 f4       	brcc	.+8      	; 0x93b6 <__ftoa_engine+0xd2>
    93ae:	49 0f       	add	r20, r25
    93b0:	56 1f       	adc	r21, r22
    93b2:	c7 1f       	adc	r28, r23
    93b4:	d8 1f       	adc	r29, r24
    93b6:	99 0f       	add	r25, r25
    93b8:	66 1f       	adc	r22, r22
    93ba:	77 1f       	adc	r23, r23
    93bc:	88 1f       	adc	r24, r24
    93be:	06 94       	lsr	r0
    93c0:	a9 f7       	brne	.-22     	; 0x93ac <__ftoa_engine+0xc8>
    93c2:	84 91       	lpm	r24, Z
    93c4:	10 95       	com	r17
    93c6:	17 70       	andi	r17, 0x07	; 7
    93c8:	41 f0       	breq	.+16     	; 0x93da <__ftoa_engine+0xf6>
    93ca:	d6 95       	lsr	r29
    93cc:	c7 95       	ror	r28
    93ce:	57 95       	ror	r21
    93d0:	47 95       	ror	r20
    93d2:	f7 94       	ror	r15
    93d4:	e7 94       	ror	r14
    93d6:	1a 95       	dec	r17
    93d8:	c1 f7       	brne	.-16     	; 0x93ca <__ftoa_engine+0xe6>
    93da:	e2 ea       	ldi	r30, 0xA2	; 162
    93dc:	f1 e0       	ldi	r31, 0x01	; 1
    93de:	68 94       	set
    93e0:	15 90       	lpm	r1, Z+
    93e2:	15 91       	lpm	r17, Z+
    93e4:	35 91       	lpm	r19, Z+
    93e6:	65 91       	lpm	r22, Z+
    93e8:	95 91       	lpm	r25, Z+
    93ea:	05 90       	lpm	r0, Z+
    93ec:	7f e2       	ldi	r23, 0x2F	; 47
    93ee:	73 95       	inc	r23
    93f0:	e1 18       	sub	r14, r1
    93f2:	f1 0a       	sbc	r15, r17
    93f4:	43 0b       	sbc	r20, r19
    93f6:	56 0b       	sbc	r21, r22
    93f8:	c9 0b       	sbc	r28, r25
    93fa:	d0 09       	sbc	r29, r0
    93fc:	c0 f7       	brcc	.-16     	; 0x93ee <__ftoa_engine+0x10a>
    93fe:	e1 0c       	add	r14, r1
    9400:	f1 1e       	adc	r15, r17
    9402:	43 1f       	adc	r20, r19
    9404:	56 1f       	adc	r21, r22
    9406:	c9 1f       	adc	r28, r25
    9408:	d0 1d       	adc	r29, r0
    940a:	7e f4       	brtc	.+30     	; 0x942a <__ftoa_engine+0x146>
    940c:	70 33       	cpi	r23, 0x30	; 48
    940e:	11 f4       	brne	.+4      	; 0x9414 <__ftoa_engine+0x130>
    9410:	8a 95       	dec	r24
    9412:	e6 cf       	rjmp	.-52     	; 0x93e0 <__ftoa_engine+0xfc>
    9414:	e8 94       	clt
    9416:	01 50       	subi	r16, 0x01	; 1
    9418:	30 f0       	brcs	.+12     	; 0x9426 <__ftoa_engine+0x142>
    941a:	08 0f       	add	r16, r24
    941c:	0a f4       	brpl	.+2      	; 0x9420 <__ftoa_engine+0x13c>
    941e:	00 27       	eor	r16, r16
    9420:	02 17       	cp	r16, r18
    9422:	08 f4       	brcc	.+2      	; 0x9426 <__ftoa_engine+0x142>
    9424:	20 2f       	mov	r18, r16
    9426:	23 95       	inc	r18
    9428:	02 2f       	mov	r16, r18
    942a:	7a 33       	cpi	r23, 0x3A	; 58
    942c:	28 f0       	brcs	.+10     	; 0x9438 <__ftoa_engine+0x154>
    942e:	79 e3       	ldi	r23, 0x39	; 57
    9430:	7d 93       	st	X+, r23
    9432:	2a 95       	dec	r18
    9434:	e9 f7       	brne	.-6      	; 0x9430 <__ftoa_engine+0x14c>
    9436:	10 c0       	rjmp	.+32     	; 0x9458 <__ftoa_engine+0x174>
    9438:	7d 93       	st	X+, r23
    943a:	2a 95       	dec	r18
    943c:	89 f6       	brne	.-94     	; 0x93e0 <__ftoa_engine+0xfc>
    943e:	06 94       	lsr	r0
    9440:	97 95       	ror	r25
    9442:	67 95       	ror	r22
    9444:	37 95       	ror	r19
    9446:	17 95       	ror	r17
    9448:	17 94       	ror	r1
    944a:	e1 18       	sub	r14, r1
    944c:	f1 0a       	sbc	r15, r17
    944e:	43 0b       	sbc	r20, r19
    9450:	56 0b       	sbc	r21, r22
    9452:	c9 0b       	sbc	r28, r25
    9454:	d0 09       	sbc	r29, r0
    9456:	98 f0       	brcs	.+38     	; 0x947e <__ftoa_engine+0x19a>
    9458:	23 95       	inc	r18
    945a:	7e 91       	ld	r23, -X
    945c:	73 95       	inc	r23
    945e:	7a 33       	cpi	r23, 0x3A	; 58
    9460:	08 f0       	brcs	.+2      	; 0x9464 <__ftoa_engine+0x180>
    9462:	70 e3       	ldi	r23, 0x30	; 48
    9464:	7c 93       	st	X, r23
    9466:	20 13       	cpse	r18, r16
    9468:	b8 f7       	brcc	.-18     	; 0x9458 <__ftoa_engine+0x174>
    946a:	7e 91       	ld	r23, -X
    946c:	70 61       	ori	r23, 0x10	; 16
    946e:	7d 93       	st	X+, r23
    9470:	30 f0       	brcs	.+12     	; 0x947e <__ftoa_engine+0x19a>
    9472:	83 95       	inc	r24
    9474:	71 e3       	ldi	r23, 0x31	; 49
    9476:	7d 93       	st	X+, r23
    9478:	70 e3       	ldi	r23, 0x30	; 48
    947a:	2a 95       	dec	r18
    947c:	e1 f7       	brne	.-8      	; 0x9476 <__ftoa_engine+0x192>
    947e:	11 24       	eor	r1, r1
    9480:	ef 90       	pop	r14
    9482:	ff 90       	pop	r15
    9484:	0f 91       	pop	r16
    9486:	1f 91       	pop	r17
    9488:	cf 91       	pop	r28
    948a:	df 91       	pop	r29
    948c:	99 27       	eor	r25, r25
    948e:	87 fd       	sbrc	r24, 7
    9490:	90 95       	com	r25
    9492:	08 95       	ret

00009494 <strnlen_P>:
    9494:	fc 01       	movw	r30, r24
    9496:	05 90       	lpm	r0, Z+
    9498:	61 50       	subi	r22, 0x01	; 1
    949a:	70 40       	sbci	r23, 0x00	; 0
    949c:	01 10       	cpse	r0, r1
    949e:	d8 f7       	brcc	.-10     	; 0x9496 <strnlen_P+0x2>
    94a0:	80 95       	com	r24
    94a2:	90 95       	com	r25
    94a4:	8e 0f       	add	r24, r30
    94a6:	9f 1f       	adc	r25, r31
    94a8:	08 95       	ret

000094aa <memcpy>:
    94aa:	fb 01       	movw	r30, r22
    94ac:	dc 01       	movw	r26, r24
    94ae:	02 c0       	rjmp	.+4      	; 0x94b4 <memcpy+0xa>
    94b0:	01 90       	ld	r0, Z+
    94b2:	0d 92       	st	X+, r0
    94b4:	41 50       	subi	r20, 0x01	; 1
    94b6:	50 40       	sbci	r21, 0x00	; 0
    94b8:	d8 f7       	brcc	.-10     	; 0x94b0 <memcpy+0x6>
    94ba:	08 95       	ret

000094bc <memset>:
    94bc:	dc 01       	movw	r26, r24
    94be:	01 c0       	rjmp	.+2      	; 0x94c2 <memset+0x6>
    94c0:	6d 93       	st	X+, r22
    94c2:	41 50       	subi	r20, 0x01	; 1
    94c4:	50 40       	sbci	r21, 0x00	; 0
    94c6:	e0 f7       	brcc	.-8      	; 0x94c0 <memset+0x4>
    94c8:	08 95       	ret

000094ca <strcasestr>:
    94ca:	fb 01       	movw	r30, r22
    94cc:	51 91       	ld	r21, Z+
    94ce:	55 23       	and	r21, r21
    94d0:	b1 f0       	breq	.+44     	; 0x94fe <strcasestr+0x34>
    94d2:	bf 01       	movw	r22, r30
    94d4:	dc 01       	movw	r26, r24
    94d6:	05 2e       	mov	r0, r21
    94d8:	4d 91       	ld	r20, X+
    94da:	44 23       	and	r20, r20
    94dc:	69 f0       	breq	.+26     	; 0x94f8 <strcasestr+0x2e>
    94de:	10 d0       	rcall	.+32     	; 0x9500 <strcasestr+0x36>
    94e0:	d9 f7       	brne	.-10     	; 0x94d8 <strcasestr+0xe>
    94e2:	cd 01       	movw	r24, r26
    94e4:	01 90       	ld	r0, Z+
    94e6:	00 20       	and	r0, r0
    94e8:	49 f0       	breq	.+18     	; 0x94fc <strcasestr+0x32>
    94ea:	4d 91       	ld	r20, X+
    94ec:	41 11       	cpse	r20, r1
    94ee:	08 d0       	rcall	.+16     	; 0x9500 <strcasestr+0x36>
    94f0:	c9 f3       	breq	.-14     	; 0x94e4 <strcasestr+0x1a>
    94f2:	fb 01       	movw	r30, r22
    94f4:	41 11       	cpse	r20, r1
    94f6:	ee cf       	rjmp	.-36     	; 0x94d4 <strcasestr+0xa>
    94f8:	81 e0       	ldi	r24, 0x01	; 1
    94fa:	90 e0       	ldi	r25, 0x00	; 0
    94fc:	01 97       	sbiw	r24, 0x01	; 1
    94fe:	08 95       	ret
    9500:	40 25       	eor	r20, r0
    9502:	39 f0       	breq	.+14     	; 0x9512 <strcasestr+0x48>
    9504:	40 32       	cpi	r20, 0x20	; 32
    9506:	29 f4       	brne	.+10     	; 0x9512 <strcasestr+0x48>
    9508:	40 29       	or	r20, r0
    950a:	4b 57       	subi	r20, 0x7B	; 123
    950c:	46 5e       	subi	r20, 0xE6	; 230
    950e:	08 f0       	brcs	.+2      	; 0x9512 <strcasestr+0x48>
    9510:	18 94       	sez
    9512:	08 95       	ret

00009514 <strcat>:
    9514:	fb 01       	movw	r30, r22
    9516:	dc 01       	movw	r26, r24
    9518:	0d 90       	ld	r0, X+
    951a:	00 20       	and	r0, r0
    951c:	e9 f7       	brne	.-6      	; 0x9518 <strcat+0x4>
    951e:	11 97       	sbiw	r26, 0x01	; 1
    9520:	01 90       	ld	r0, Z+
    9522:	0d 92       	st	X+, r0
    9524:	00 20       	and	r0, r0
    9526:	e1 f7       	brne	.-8      	; 0x9520 <strcat+0xc>
    9528:	08 95       	ret

0000952a <strcpy>:
    952a:	fb 01       	movw	r30, r22
    952c:	dc 01       	movw	r26, r24
    952e:	01 90       	ld	r0, Z+
    9530:	0d 92       	st	X+, r0
    9532:	00 20       	and	r0, r0
    9534:	e1 f7       	brne	.-8      	; 0x952e <strcpy+0x4>
    9536:	08 95       	ret

00009538 <strncasecmp>:
    9538:	fb 01       	movw	r30, r22
    953a:	dc 01       	movw	r26, r24
    953c:	41 50       	subi	r20, 0x01	; 1
    953e:	50 40       	sbci	r21, 0x00	; 0
    9540:	88 f0       	brcs	.+34     	; 0x9564 <strncasecmp+0x2c>
    9542:	8d 91       	ld	r24, X+
    9544:	81 34       	cpi	r24, 0x41	; 65
    9546:	1c f0       	brlt	.+6      	; 0x954e <strncasecmp+0x16>
    9548:	8b 35       	cpi	r24, 0x5B	; 91
    954a:	0c f4       	brge	.+2      	; 0x954e <strncasecmp+0x16>
    954c:	80 5e       	subi	r24, 0xE0	; 224
    954e:	61 91       	ld	r22, Z+
    9550:	61 34       	cpi	r22, 0x41	; 65
    9552:	1c f0       	brlt	.+6      	; 0x955a <strncasecmp+0x22>
    9554:	6b 35       	cpi	r22, 0x5B	; 91
    9556:	0c f4       	brge	.+2      	; 0x955a <strncasecmp+0x22>
    9558:	60 5e       	subi	r22, 0xE0	; 224
    955a:	86 1b       	sub	r24, r22
    955c:	61 11       	cpse	r22, r1
    955e:	71 f3       	breq	.-36     	; 0x953c <strncasecmp+0x4>
    9560:	99 0b       	sbc	r25, r25
    9562:	08 95       	ret
    9564:	88 1b       	sub	r24, r24
    9566:	fc cf       	rjmp	.-8      	; 0x9560 <strncasecmp+0x28>

00009568 <strnlen>:
    9568:	fc 01       	movw	r30, r24
    956a:	61 50       	subi	r22, 0x01	; 1
    956c:	70 40       	sbci	r23, 0x00	; 0
    956e:	01 90       	ld	r0, Z+
    9570:	01 10       	cpse	r0, r1
    9572:	d8 f7       	brcc	.-10     	; 0x956a <strnlen+0x2>
    9574:	80 95       	com	r24
    9576:	90 95       	com	r25
    9578:	8e 0f       	add	r24, r30
    957a:	9f 1f       	adc	r25, r31
    957c:	08 95       	ret

0000957e <fputc>:
    957e:	0f 93       	push	r16
    9580:	1f 93       	push	r17
    9582:	cf 93       	push	r28
    9584:	df 93       	push	r29
    9586:	fb 01       	movw	r30, r22
    9588:	23 81       	ldd	r18, Z+3	; 0x03
    958a:	21 fd       	sbrc	r18, 1
    958c:	03 c0       	rjmp	.+6      	; 0x9594 <fputc+0x16>
    958e:	8f ef       	ldi	r24, 0xFF	; 255
    9590:	9f ef       	ldi	r25, 0xFF	; 255
    9592:	2c c0       	rjmp	.+88     	; 0x95ec <fputc+0x6e>
    9594:	22 ff       	sbrs	r18, 2
    9596:	16 c0       	rjmp	.+44     	; 0x95c4 <fputc+0x46>
    9598:	46 81       	ldd	r20, Z+6	; 0x06
    959a:	57 81       	ldd	r21, Z+7	; 0x07
    959c:	24 81       	ldd	r18, Z+4	; 0x04
    959e:	35 81       	ldd	r19, Z+5	; 0x05
    95a0:	42 17       	cp	r20, r18
    95a2:	53 07       	cpc	r21, r19
    95a4:	44 f4       	brge	.+16     	; 0x95b6 <fputc+0x38>
    95a6:	a0 81       	ld	r26, Z
    95a8:	b1 81       	ldd	r27, Z+1	; 0x01
    95aa:	9d 01       	movw	r18, r26
    95ac:	2f 5f       	subi	r18, 0xFF	; 255
    95ae:	3f 4f       	sbci	r19, 0xFF	; 255
    95b0:	31 83       	std	Z+1, r19	; 0x01
    95b2:	20 83       	st	Z, r18
    95b4:	8c 93       	st	X, r24
    95b6:	26 81       	ldd	r18, Z+6	; 0x06
    95b8:	37 81       	ldd	r19, Z+7	; 0x07
    95ba:	2f 5f       	subi	r18, 0xFF	; 255
    95bc:	3f 4f       	sbci	r19, 0xFF	; 255
    95be:	37 83       	std	Z+7, r19	; 0x07
    95c0:	26 83       	std	Z+6, r18	; 0x06
    95c2:	14 c0       	rjmp	.+40     	; 0x95ec <fputc+0x6e>
    95c4:	8b 01       	movw	r16, r22
    95c6:	ec 01       	movw	r28, r24
    95c8:	fb 01       	movw	r30, r22
    95ca:	00 84       	ldd	r0, Z+8	; 0x08
    95cc:	f1 85       	ldd	r31, Z+9	; 0x09
    95ce:	e0 2d       	mov	r30, r0
    95d0:	19 95       	eicall
    95d2:	89 2b       	or	r24, r25
    95d4:	e1 f6       	brne	.-72     	; 0x958e <fputc+0x10>
    95d6:	d8 01       	movw	r26, r16
    95d8:	16 96       	adiw	r26, 0x06	; 6
    95da:	8d 91       	ld	r24, X+
    95dc:	9c 91       	ld	r25, X
    95de:	17 97       	sbiw	r26, 0x07	; 7
    95e0:	01 96       	adiw	r24, 0x01	; 1
    95e2:	17 96       	adiw	r26, 0x07	; 7
    95e4:	9c 93       	st	X, r25
    95e6:	8e 93       	st	-X, r24
    95e8:	16 97       	sbiw	r26, 0x06	; 6
    95ea:	ce 01       	movw	r24, r28
    95ec:	df 91       	pop	r29
    95ee:	cf 91       	pop	r28
    95f0:	1f 91       	pop	r17
    95f2:	0f 91       	pop	r16
    95f4:	08 95       	ret

000095f6 <printf>:
    95f6:	cf 93       	push	r28
    95f8:	df 93       	push	r29
    95fa:	cd b7       	in	r28, 0x3d	; 61
    95fc:	de b7       	in	r29, 0x3e	; 62
    95fe:	ae 01       	movw	r20, r28
    9600:	4a 5f       	subi	r20, 0xFA	; 250
    9602:	5f 4f       	sbci	r21, 0xFF	; 255
    9604:	fa 01       	movw	r30, r20
    9606:	61 91       	ld	r22, Z+
    9608:	71 91       	ld	r23, Z+
    960a:	af 01       	movw	r20, r30
    960c:	80 91 92 19 	lds	r24, 0x1992	; 0x801992 <__iob+0x2>
    9610:	90 91 93 19 	lds	r25, 0x1993	; 0x801993 <__iob+0x3>
    9614:	5b d8       	rcall	.-3914   	; 0x86cc <vfprintf>
    9616:	df 91       	pop	r29
    9618:	cf 91       	pop	r28
    961a:	08 95       	ret

0000961c <puts>:
    961c:	0f 93       	push	r16
    961e:	1f 93       	push	r17
    9620:	cf 93       	push	r28
    9622:	df 93       	push	r29
    9624:	e0 91 92 19 	lds	r30, 0x1992	; 0x801992 <__iob+0x2>
    9628:	f0 91 93 19 	lds	r31, 0x1993	; 0x801993 <__iob+0x3>
    962c:	23 81       	ldd	r18, Z+3	; 0x03
    962e:	21 ff       	sbrs	r18, 1
    9630:	1b c0       	rjmp	.+54     	; 0x9668 <puts+0x4c>
    9632:	8c 01       	movw	r16, r24
    9634:	d0 e0       	ldi	r29, 0x00	; 0
    9636:	c0 e0       	ldi	r28, 0x00	; 0
    9638:	f8 01       	movw	r30, r16
    963a:	81 91       	ld	r24, Z+
    963c:	8f 01       	movw	r16, r30
    963e:	60 91 92 19 	lds	r22, 0x1992	; 0x801992 <__iob+0x2>
    9642:	70 91 93 19 	lds	r23, 0x1993	; 0x801993 <__iob+0x3>
    9646:	db 01       	movw	r26, r22
    9648:	18 96       	adiw	r26, 0x08	; 8
    964a:	ed 91       	ld	r30, X+
    964c:	fc 91       	ld	r31, X
    964e:	19 97       	sbiw	r26, 0x09	; 9
    9650:	88 23       	and	r24, r24
    9652:	31 f0       	breq	.+12     	; 0x9660 <puts+0x44>
    9654:	19 95       	eicall
    9656:	89 2b       	or	r24, r25
    9658:	79 f3       	breq	.-34     	; 0x9638 <puts+0x1c>
    965a:	df ef       	ldi	r29, 0xFF	; 255
    965c:	cf ef       	ldi	r28, 0xFF	; 255
    965e:	ec cf       	rjmp	.-40     	; 0x9638 <puts+0x1c>
    9660:	8a e0       	ldi	r24, 0x0A	; 10
    9662:	19 95       	eicall
    9664:	89 2b       	or	r24, r25
    9666:	19 f0       	breq	.+6      	; 0x966e <puts+0x52>
    9668:	8f ef       	ldi	r24, 0xFF	; 255
    966a:	9f ef       	ldi	r25, 0xFF	; 255
    966c:	02 c0       	rjmp	.+4      	; 0x9672 <puts+0x56>
    966e:	8d 2f       	mov	r24, r29
    9670:	9c 2f       	mov	r25, r28
    9672:	df 91       	pop	r29
    9674:	cf 91       	pop	r28
    9676:	1f 91       	pop	r17
    9678:	0f 91       	pop	r16
    967a:	08 95       	ret

0000967c <sprintf>:
    967c:	0f 93       	push	r16
    967e:	1f 93       	push	r17
    9680:	cf 93       	push	r28
    9682:	df 93       	push	r29
    9684:	cd b7       	in	r28, 0x3d	; 61
    9686:	de b7       	in	r29, 0x3e	; 62
    9688:	2e 97       	sbiw	r28, 0x0e	; 14
    968a:	0f b6       	in	r0, 0x3f	; 63
    968c:	f8 94       	cli
    968e:	de bf       	out	0x3e, r29	; 62
    9690:	0f be       	out	0x3f, r0	; 63
    9692:	cd bf       	out	0x3d, r28	; 61
    9694:	0e 89       	ldd	r16, Y+22	; 0x16
    9696:	1f 89       	ldd	r17, Y+23	; 0x17
    9698:	86 e0       	ldi	r24, 0x06	; 6
    969a:	8c 83       	std	Y+4, r24	; 0x04
    969c:	1a 83       	std	Y+2, r17	; 0x02
    969e:	09 83       	std	Y+1, r16	; 0x01
    96a0:	8f ef       	ldi	r24, 0xFF	; 255
    96a2:	9f e7       	ldi	r25, 0x7F	; 127
    96a4:	9e 83       	std	Y+6, r25	; 0x06
    96a6:	8d 83       	std	Y+5, r24	; 0x05
    96a8:	ae 01       	movw	r20, r28
    96aa:	46 5e       	subi	r20, 0xE6	; 230
    96ac:	5f 4f       	sbci	r21, 0xFF	; 255
    96ae:	68 8d       	ldd	r22, Y+24	; 0x18
    96b0:	79 8d       	ldd	r23, Y+25	; 0x19
    96b2:	ce 01       	movw	r24, r28
    96b4:	01 96       	adiw	r24, 0x01	; 1
    96b6:	0a d8       	rcall	.-4076   	; 0x86cc <vfprintf>
    96b8:	ef 81       	ldd	r30, Y+7	; 0x07
    96ba:	f8 85       	ldd	r31, Y+8	; 0x08
    96bc:	e0 0f       	add	r30, r16
    96be:	f1 1f       	adc	r31, r17
    96c0:	10 82       	st	Z, r1
    96c2:	2e 96       	adiw	r28, 0x0e	; 14
    96c4:	0f b6       	in	r0, 0x3f	; 63
    96c6:	f8 94       	cli
    96c8:	de bf       	out	0x3e, r29	; 62
    96ca:	0f be       	out	0x3f, r0	; 63
    96cc:	cd bf       	out	0x3d, r28	; 61
    96ce:	df 91       	pop	r29
    96d0:	cf 91       	pop	r28
    96d2:	1f 91       	pop	r17
    96d4:	0f 91       	pop	r16
    96d6:	08 95       	ret

000096d8 <__ultoa_invert>:
    96d8:	fa 01       	movw	r30, r20
    96da:	aa 27       	eor	r26, r26
    96dc:	28 30       	cpi	r18, 0x08	; 8
    96de:	51 f1       	breq	.+84     	; 0x9734 <__ultoa_invert+0x5c>
    96e0:	20 31       	cpi	r18, 0x10	; 16
    96e2:	81 f1       	breq	.+96     	; 0x9744 <__ultoa_invert+0x6c>
    96e4:	e8 94       	clt
    96e6:	6f 93       	push	r22
    96e8:	6e 7f       	andi	r22, 0xFE	; 254
    96ea:	6e 5f       	subi	r22, 0xFE	; 254
    96ec:	7f 4f       	sbci	r23, 0xFF	; 255
    96ee:	8f 4f       	sbci	r24, 0xFF	; 255
    96f0:	9f 4f       	sbci	r25, 0xFF	; 255
    96f2:	af 4f       	sbci	r26, 0xFF	; 255
    96f4:	b1 e0       	ldi	r27, 0x01	; 1
    96f6:	3e d0       	rcall	.+124    	; 0x9774 <__ultoa_invert+0x9c>
    96f8:	b4 e0       	ldi	r27, 0x04	; 4
    96fa:	3c d0       	rcall	.+120    	; 0x9774 <__ultoa_invert+0x9c>
    96fc:	67 0f       	add	r22, r23
    96fe:	78 1f       	adc	r23, r24
    9700:	89 1f       	adc	r24, r25
    9702:	9a 1f       	adc	r25, r26
    9704:	a1 1d       	adc	r26, r1
    9706:	68 0f       	add	r22, r24
    9708:	79 1f       	adc	r23, r25
    970a:	8a 1f       	adc	r24, r26
    970c:	91 1d       	adc	r25, r1
    970e:	a1 1d       	adc	r26, r1
    9710:	6a 0f       	add	r22, r26
    9712:	71 1d       	adc	r23, r1
    9714:	81 1d       	adc	r24, r1
    9716:	91 1d       	adc	r25, r1
    9718:	a1 1d       	adc	r26, r1
    971a:	20 d0       	rcall	.+64     	; 0x975c <__ultoa_invert+0x84>
    971c:	09 f4       	brne	.+2      	; 0x9720 <__ultoa_invert+0x48>
    971e:	68 94       	set
    9720:	3f 91       	pop	r19
    9722:	2a e0       	ldi	r18, 0x0A	; 10
    9724:	26 9f       	mul	r18, r22
    9726:	11 24       	eor	r1, r1
    9728:	30 19       	sub	r19, r0
    972a:	30 5d       	subi	r19, 0xD0	; 208
    972c:	31 93       	st	Z+, r19
    972e:	de f6       	brtc	.-74     	; 0x96e6 <__ultoa_invert+0xe>
    9730:	cf 01       	movw	r24, r30
    9732:	08 95       	ret
    9734:	46 2f       	mov	r20, r22
    9736:	47 70       	andi	r20, 0x07	; 7
    9738:	40 5d       	subi	r20, 0xD0	; 208
    973a:	41 93       	st	Z+, r20
    973c:	b3 e0       	ldi	r27, 0x03	; 3
    973e:	0f d0       	rcall	.+30     	; 0x975e <__ultoa_invert+0x86>
    9740:	c9 f7       	brne	.-14     	; 0x9734 <__ultoa_invert+0x5c>
    9742:	f6 cf       	rjmp	.-20     	; 0x9730 <__ultoa_invert+0x58>
    9744:	46 2f       	mov	r20, r22
    9746:	4f 70       	andi	r20, 0x0F	; 15
    9748:	40 5d       	subi	r20, 0xD0	; 208
    974a:	4a 33       	cpi	r20, 0x3A	; 58
    974c:	18 f0       	brcs	.+6      	; 0x9754 <__ultoa_invert+0x7c>
    974e:	49 5d       	subi	r20, 0xD9	; 217
    9750:	31 fd       	sbrc	r19, 1
    9752:	40 52       	subi	r20, 0x20	; 32
    9754:	41 93       	st	Z+, r20
    9756:	02 d0       	rcall	.+4      	; 0x975c <__ultoa_invert+0x84>
    9758:	a9 f7       	brne	.-22     	; 0x9744 <__ultoa_invert+0x6c>
    975a:	ea cf       	rjmp	.-44     	; 0x9730 <__ultoa_invert+0x58>
    975c:	b4 e0       	ldi	r27, 0x04	; 4
    975e:	a6 95       	lsr	r26
    9760:	97 95       	ror	r25
    9762:	87 95       	ror	r24
    9764:	77 95       	ror	r23
    9766:	67 95       	ror	r22
    9768:	ba 95       	dec	r27
    976a:	c9 f7       	brne	.-14     	; 0x975e <__ultoa_invert+0x86>
    976c:	00 97       	sbiw	r24, 0x00	; 0
    976e:	61 05       	cpc	r22, r1
    9770:	71 05       	cpc	r23, r1
    9772:	08 95       	ret
    9774:	9b 01       	movw	r18, r22
    9776:	ac 01       	movw	r20, r24
    9778:	0a 2e       	mov	r0, r26
    977a:	06 94       	lsr	r0
    977c:	57 95       	ror	r21
    977e:	47 95       	ror	r20
    9780:	37 95       	ror	r19
    9782:	27 95       	ror	r18
    9784:	ba 95       	dec	r27
    9786:	c9 f7       	brne	.-14     	; 0x977a <__ultoa_invert+0xa2>
    9788:	62 0f       	add	r22, r18
    978a:	73 1f       	adc	r23, r19
    978c:	84 1f       	adc	r24, r20
    978e:	95 1f       	adc	r25, r21
    9790:	a0 1d       	adc	r26, r0
    9792:	08 95       	ret

00009794 <_exit>:
    9794:	f8 94       	cli

00009796 <__stop_program>:
    9796:	ff cf       	rjmp	.-2      	; 0x9796 <__stop_program>
